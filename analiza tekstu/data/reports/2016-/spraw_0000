przedmiot TAS temat A nr_indeksu 396407 liczba_pkt 4 






zadanie 1

s396407@pc24l:~$ cd ~/My Documents/TAS/I
bash: cd: /home/students/s396407/My: Nie ma takiego pliku ani katalogu
s396407@pc24l:~$ cd My Documents
bash: cd: My: Nie ma takiego pliku ani katalogu
s396407@pc24l:~$ cd TAS
s396407@pc24l:~/TAS$ cd I
s396407@pc24l:~/TAS/I$ rpcgen -aC plik.x
s396407@pc24l:~/TAS/I$ 

s396407@pc24l:~/TAS/I$ cd 2
s396407@pc24l:~/TAS/I/2$ rpcgen -aC sum.x


s396407@pc24l:~/TAS/I/2$ make -f Makefile.sum
cc -g    -c -o sum_clnt.o sum_clnt.c
cc -g    -c -o sum_client.o sum_client.c
cc -g    -c -o sum_xdr.o sum_xdr.c
cc -g     -o sum_client  sum_clnt.o sum_client.o sum_xdr.o -lnsl 
cc -g    -c -o sum_svc.o sum_svc.c
cc -g    -c -o sum_server.o sum_server.c
cc -g     -o sum_server  sum_svc.o sum_server.o sum_xdr.o -lnsl

struct Macierz {
	struct {
		u_int Elem_len;
		float *Elem_val;
	} Elem;
	int IleW;
	int IleK;
};

pole ileW - ilo¶æ wierszy;
pole IleK oznacza ilo¶æ kolumn;
Elem_len - ilo¶æ elementów w macierzy
float *Elem_val - wska¼nik do pierwszego elementu macierzy
*(Elem_val+1), *(Elem_val+2) - odwo³anie siê do kolejnych elementów

zadanie 2

serwer

#include "sum.h"

int *
suma_1_svc(ParaLi *argp, struct svc_req *rqstp)
{
	static int  result;

	result = argp -> x1 + argp -> x2;

	return &result;
}

-------------------------------

klient

#include "sum.h"


void
progservice_1(char *host)
{
	CLIENT *clnt;
	int  *result_1;
	ParaLi  suma_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
    suma_1_arg.x1 = 1;
    suma_1_arg.x2 = 3;
	result_1 = suma_1(&suma_1_arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */

	printf ("result %d", *result_1);
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progservice_1 (host);
exit (0);
}

------------------
s396407@pc18l:~/TAS/I/2$ ./sum_client localhost
result 4s396407@pc18l:~/TAS/I/2$ 
-------------------
s396407@pc18l:~/TAS/I/2$ ./sum_server



zadanie 3.



s396407@pc25j:~/TAS/I$ make -f Makefile.plik
cc -g    -c -o plik_clnt.o plik_clnt.c
cc -g    -c -o plik_client.o plik_client.c
cc -g    -c -o plik_xdr.o plik_xdr.c
cc -g     -o plik_client  plik_clnt.o plik_client.o plik_xdr.o -lnsl 
cc -g    -c -o plik_svc.o plik_svc.c
cc -g    -c -o plik_server.o plik_server.c
cc -g     -o plik_server  plik_svc.o plik_server.o plik_xdr.o -lnsl
s396407@pc25j:~/TAS/I$ ./plik_client
usage: ./plik_client server_host
s396407@pc25j:~/TAS/I$ ./plik_client
usage: ./plik_client server_host
s396407@pc25j:~/TAS/I$ ./plik_client localhost


------------
klient


/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "plik.h"


void
progmacierze_1(char *host)
{
	CLIENT *clnt;
	void  *result_1;
	Mac  pokazmacierz_1_arg;
	void  *result_2;
	///TrzyMac  operacjanamacierzach_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, ProgMacierze, VerMacierze, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	float *f = calloc(3*4,sizeof(float));

	f[0] = 1;
	f[1] = 2;
	f[2] = 5;
	f[3] = 6;
	f[4] = 4;
	f[5] = 7;
	f[6] = 9;
	f[7] = 5;
	f[8] = 7;
	f[9] = 6;
	f[10] = 5;
	f[11] = 6;

	pokazmacierz_1_arg.Elem.Elem_val = f;
   	pokazmacierz_1_arg.Elem.Elem_len = 3*4;

	pokazmacierz_1_arg.IleW = 3;
	pokazmacierz_1_arg.IleK = 4;

	result_1 = pokazmacierz_1(&pokazmacierz_1_arg, clnt);
	if (result_1 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	

	//result_2 = operacjanamacierzach_1(&operacjanamacierzach_1_arg, clnt);
	//if (result_2 == (void *) NULL) {
	//	clnt_perror (clnt, "call failed");
	//}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progmacierze_1 (host);
exit (0);
}

zadanie 4


klient

#include "plik4.h"


void
progmacierze_1(char *host)
{
	CLIENT *clnt;
	Macierz  *result_1;
	DwieMac  dodawaniemacierzy_1_arg;
	Macierz  *result_2;
	DwieMac  mnozeniemacierzy_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, ProgMacierze, VerMacierze, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	dodawaniemacierzy_1_arg.M1.IleW = 2;
	dodawaniemacierzy_1_arg.M1.IleK = 2;
	dodawaniemacierzy_1_arg.M1.Elem.Elem_val[0] = 1;
	dodawaniemacierzy_1_arg.M1.Elem.Elem_val[1] = 2;
	dodawaniemacierzy_1_arg.M1.Elem.Elem_val[2] = 3;
	dodawaniemacierzy_1_arg.M1.Elem.Elem_val[3] = 4;

	dodawaniemacierzy_1_arg.M2.IleW = 2;
	dodawaniemacierzy_1_arg.M2.IleK = 2;
	dodawaniemacierzy_1_arg.M2.Elem.Elem_val[0] = 10;
	dodawaniemacierzy_1_arg.M2.Elem.Elem_val[1] = 20;
	dodawaniemacierzy_1_arg.M2.Elem.Elem_val[2] = 30;
	dodawaniemacierzy_1_arg.M2.Elem.Elem_val[3] = 40;
	
	mnozeniemacierzy_1_arg.M1.IleW = 2;
	mnozeniemacierzy_1_arg.M1.IleK = 2;
	mnozeniemacierzy_1_arg.M1.Elem.Elem_val[0] = 1;
	mnozeniemacierzy_1_arg.M1.Elem.Elem_val[1] = 2;
	mnozeniemacierzy_1_arg.M1.Elem.Elem_val[2] = 3;
	mnozeniemacierzy_1_arg.M1.Elem.Elem_val[3] = 4;

	mnozeniemacierzy_1_arg.M2.IleW = 2;
	mnozeniemacierzy_1_arg.M2.IleK = 2;
	mnozeniemacierzy_1_arg.M2.Elem.Elem_val[0] = 10;
	mnozeniemacierzy_1_arg.M2.Elem.Elem_val[1] = 20;
	mnozeniemacierzy_1_arg.M2.Elem.Elem_val[2] = 30;
	mnozeniemacierzy_1_arg.M2.Elem.Elem_val[3] = 40;

	int i;
	for(i=0; i<dodawaniemacierzy_1_arg.M1.IleW*dodawaniemacierzy_1_arg.M1.IleK; i++) {
		result_1 = dodawaniemacierzy_1(&dodawaniemacierzy_1_arg, clnt);
		printf("%f ", result_1->Elem.Elem_val[i]);
	}

	int j;
	for(j=0; j<dodawaniemacierzy_1_arg.M1.IleW*dodawaniemacierzy_1_arg.M1.IleK; j++) {
		result_1 = dodawaniemacierzy_1(&dodawaniemacierzy_1_arg, clnt);
		printf("%f ", result_1->Elem.Elem_val[j]);
	}

	result_1 = dodawaniemacierzy_1(&dodawaniemacierzy_1_arg, clnt);
	if (result_1 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	result_2 = mnozeniemacierzy_1(&mnozeniemacierzy_1_arg, clnt);
	if (result_2 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progmacierze_1 (host);
exit (0);
}

--------------------------------------

serwer

#include "plik4.h"

Macierz *
dodawaniemacierzy_1_svc(DwieMac *argp, struct svc_req *rqstp)
{
	static Macierz * result;

	int i;
	for(i=0; i<argp->M1.IleW*argp->M2.IleK; i++) {
		result->Elem.Elem_val[i] = argp->M1.Elem.Elem_val[i] + argp->M2.Elem.Elem_val[i];
	}

	return result;
}

Macierz *
mnozeniemacierzy_1_svc(DwieMac *argp, struct svc_req *rqstp)
{
	static Macierz * result;

	int i;
	for(i=0; i<argp->M1.IleW*argp->M2.IleK; i++) {
		result->Elem.Elem_val[i] = argp->M1.Elem.Elem_val[i] * argp->M2.Elem.Elem_val[i];
	}

	return result;
}

}
