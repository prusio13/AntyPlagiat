przedmiot TAS temat A nr_indeksu 396295 liczba_pkt 4 


Zadanie 1. ------------------------------------------------------------------
float Elem <>; 
zostalo przetlumaczone na
	struct {
		u_int Elem_len;
		float *Elem_val;
	} Elem;
Zadanie 2. ------------------------------------------------------------------
Kod zrodlowy sum_client.c:
	#include "sum.h"


	void
	progservice_1(char *host, int zmienna1, int zmienna2)
	{
		CLIENT *clnt;
		int  *result_1;
		ParaLi  suma_1_arg;

	#ifndef	DEBUG
		clnt = clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
		if (clnt == NULL) {
			clnt_pcreateerror (host);
			exit (1);
		}
	#endif	/* DEBUG */
	

		suma_1_arg.x1 = zmienna1;							//argument 1 
		suma_1_arg.x2 = zmienna2;							//argument 2
		result_1 = suma_1(&suma_1_arg, clnt);
		if (result_1 == (int *) NULL) {
			clnt_perror (clnt, "call failed");
		}
		printf("suma: %d \n", * result_1);			//wypisz sume
	#ifndef	DEBUG
		clnt_destroy (clnt);
	#endif	 /* DEBUG */
	}


	int
	main (int argc, char *argv[])
	{
		char *host;

		if (argc < 2) {
			printf ("usage: %s server_host\n", argv[0]);
			exit (1);
		}
		host = argv[1];
		progservice_1 (host, atoi(argv[2]), atoi(argv[3]));
	exit (0);
	}

Kod zrodlowy sum_server.c:

	#include "sum.h"

	int *
	suma_1_svc(ParaLi *argp, struct svc_req *rqstp)
	{
		static int  result;

		/*
		 * insert server code here
		 */
		result = (argp->x1 + argp->x2);

		return &result;
	}
Wydruk z sum_client:

suma: 5

Wydruk z rpcinfo:

s396295@pc25i:~/Desktop/TAS/Temat A/Zadanie 2$ rpcinfo -p
   program vers proto   port  service
    100000    4   tcp    111  portmapper
    100000    3   tcp    111  portmapper
    100000    2   tcp    111  portmapper
    100000    4   udp    111  portmapper
    100000    3   udp    111  portmapper
    100000    2   udp    111  portmapper
    100024    1   udp  34139  status
    100024    1   tcp  51793  status
    100021    1   udp  52390  nlockmgr
    100021    3   udp  52390  nlockmgr
    100021    4   udp  52390  nlockmgr
    100021    1   tcp  57995  nlockmgr
    100021    3   tcp  57995  nlockmgr
    100021    4   tcp  57995  nlockmgr
 553648128    1   udp  60758
 553648128    1   tcp  33567

Wydruk z sum_client:
s396295@pc24i:~/Desktop/TAS/Temat A/Zadanie 2$ ./sum_client localhost 2 153
suma: 155 

Zadanie 3. ------------------------------------------------------------------
Kod zrodlowy plik_server.c:
#include "plik.h"

void *
pokazmacierz_1_svc(Mac *argp, struct svc_req *rqstp)
{
	static char * result;
	int i = 0;
	for (i=0; i < argp->Elem.Elem_len; i++){
		printf("%f\n", argp->Elem.Elem_val[i]);
	}
	return (void *) &result;
}

void *
operacjanamacierzach_1_svc(TrzyMac *argp, struct svc_req *rqstp)
{
	static char * result;

	return (void *) &result;
}

Kod zrodlowy plik_client.c:
#include "plik.h"


void
progmacierze_1(char *host)
{
	CLIENT *clnt;
	void  *result_1;
	Mac  pokazmacierz_1_arg;
	void  *result_2;
	TrzyMac  operacjanamacierzach_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, ProgMacierze, VerMacierze, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	
	pokazmacierz_1_arg.IleW = 1;
	pokazmacierz_1_arg.IleK = 5;	
	pokazmacierz_1_arg.Elem.Elem_val = calloc(pokazmacierz_1_arg.IleW*pokazmacierz_1_arg.IleK, sizeof(float));
	pokazmacierz_1_arg.Elem.Elem_len = pokazmacierz_1_arg.IleW*pokazmacierz_1_arg.IleK;
	int i = 0;	
	for (i = 0; i < 5; i++){
		pokazmacierz_1_arg.Elem.Elem_val[i] = i;
	}
		
	result_1 = pokazmacierz_1(&pokazmacierz_1_arg, clnt);
	if (result_1 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	free(&pokazmacierz_1_arg);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progmacierze_1 (host);
exit (0);
}

Wydruk:
s396295@pc24i:~/Desktop/TAS/Temat A/Zadanie3$ ./plik_server
0.000000
1.000000
2.000000
3.000000
4.000000

Zadanie 4. ------------------------------------------------------------------

Kod zrodlowy serwera:
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "plik.h"

TrzyMac *
operacjanamacierzach_1_svc(TrzyMac *argp, struct svc_req *rqstp)
{
	static TrzyMac  result;

	result.M1.a11 = argp->M1.a11 + argp->M2.a11;
	result.M1.a12 = argp->M1.a12 + argp->M2.a12;
	result.M1.a21 = argp->M1.a11 + argp->M2.a21;
	result.M1.a22 = argp->M1.a22 + argp->M2.a22;

	result.M2.a11 = argp->M1.a11 * argp->M2.a11 + argp->M1.a12 * argp->M2.a21;
	result.M2.a12 = argp->M1.a11 * argp->M2.a12 + argp->M1.a12 * argp->M2.a22;
	result.M2.a21 = argp->M1.a21 * argp->M2.a11 + argp->M1.a22 * argp->M2.a21;
	result.M2.a22 = argp->M1.a21 * argp->M2.a12 + argp->M1.a22 * argp->M2.a22;

	return &result;
}

kod zrodlowy klienta:

/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "plik.h"


void
progmacierze_1(char *host)
{
	CLIENT *clnt;
	TrzyMac  *result_1;
	TrzyMac  operacjanamacierzach_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, ProgMacierze, VerMacierze, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	operacjanamacierzach_1_arg.M1.a12 = 4;
	operacjanamacierzach_1_arg.M1.a21 = 7;
	operacjanamacierzach_1_arg.M1.a22 = 2;
	operacjanamacierzach_1_arg.M1.a11 = 9;

	operacjanamacierzach_1_arg.M2.a11 = 11;
	operacjanamacierzach_1_arg.M2.a12 = 3;
	operacjanamacierzach_1_arg.M2.a21 = 2;
	operacjanamacierzach_1_arg.M2.a22 = 1;

	result_1 = operacjanamacierzach_1(&operacjanamacierzach_1_arg, clnt);
	if (result_1 == (TrzyMac *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	printf("dodawanie macierzy: \n%d %d \n%d %d\n",  result_1->M1.a11,  result_1->M1.a12,  result_1->M1.a21,  result_1->M1.a22);
	printf("mnozenie macierzy: \n%d %d \n%d %d\n",  result_1->M2.a11,  result_1->M2.a12,  result_1->M2.a21,  result_1->M2.a22);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progmacierze_1 (host);
exit (0);
}

wydruk:

s396295@lts:~/Desktop/TAS/Temat A/Zadanie4$ ./plik_client localhost
dodawanie macierzy: 
20 7 
11 3
mnozenie macierzy: 
107 31 
81 23


}
