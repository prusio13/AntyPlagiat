przedmiot TAS temat B nr_indeksu 396395 liczba_pkt 3 



Zadanie 10 -------------------------------------
1)

// Server.java
public String powolnaMetoda() throws RemoteException {
	System.out.println("Serwer: powolnaMetoda();");
	
  try { 
    Thread.sleep(2500); 
  } catch(Exception e){};
	
  System.out.println("Serwer: powolnaMetoda(); Koniec dzialania.");
  return Thread.currentThread().toString();
}

// Klient.java
public static void main(String args[]) {
  try {
    OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
      "rmi://localhost/RMI_Example");

    System.out.println("Klient: oo.powolnaMetoda() = " + oo.powolnaMetoda());

  } catch(Exception e) {
    System.err.println("Klient: B³±d. " + e.getMessage());
  }
}

// Terminal output - 2 klientów uruchomionych w tym samym czasie
// Klient 1
MacBook-Air-Wojciech:KLIENT wo$ java Klient
Klient: oo.powolnaMetoda() = Thread[RMI TCP Connection(2)-150.254.63.230,5,RMI Runtime]
// Klient 2
MacBook-Air-Wojciech:KLIENT wo$ java Klient
Klient: oo.powolnaMetoda() = Thread[RMI TCP Connection(3)-150.254.63.230,5,RMI Runtime]

Widaæ, ¿e uruchomiony zosta³ nowy w±tek, bo Connection(2) zmieni³o siê na Connection(3)

2)
// Oba obiekty eksportowane - program dzia³a

// Drugi obiekt nie jest eksportowany - program rzuca wyj±tek
drugiObiekt = new OdleglaKlasa();
// UnicastRemoteObject.exportObject(drugiObiekt);

// Terminal output
MacBook-Air-Wojciech:KLIENT wo$ java Klient
Klient: oo.powolnaMetoda() = warto¶æ zwracana przez pierwszy obiekt
Klient: B³±d. error unmarshalling return; nested exception is:
  java.lang.ClassNotFoundException: OdleglaKlasa (no security manager: RMI class loader disabled)

Problem polega na tym ¿e klient nie ma dostêpu do klasy OdleglaKlasa, a chce wywolac metode z tej klasy.

3)

// Klient.java

public static void main(String args[])
{
  try {
    OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
      "rmi://localhost/RMI_Example");

    oo.generujeBlad();

  } catch(Exception e) {
    System.err.println("Klient: B³±d. " + e.getMessage());
  }
}

// Terminal output

MacBook-Air-Wojciech:KLIENT wo$ java Klient
Klient: B³±d. RemoteException occurred in server thread; nested exception is:
  java.rmi.RemoteException: Not really an error.

Metoda po prostu rzuca wyj±tek RemoteExeption którego opis jest wy¶wietlany po stronie klienta.

Zadanie 11 -------------------------------------

// Serwer.java

class OdleglaKlasa
implements OdleglyBufor, TworzOdlegleBufory, Serializable
{
  OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
      Naming.rebind(s, this);
    } catch(Exception e) {
      System.err.println("Serwer: OdleglaKlasa(String); B³±d. " + e.getMessage());
    }

    System.out.println("Serwer: OdleglaKlasa(String); OK");
  }
  OdleglaKlasa() throws RemoteException
  {
    super();
    head = 0;
    tail = 0;
    buf = new int[50];
    System.out.println("Serwer: OdleglaKlasa(); OK");
  }

  private int head;
  private int tail;
  private int[] buf;

  public void wstawElement(int el) throws RemoteException {
    System.out.println("Serwer: wstawElement();");

    while ( isFull() ) {
      try {
        Thread.sleep(10);
      } catch(Exception e) {
        System.err.println("Serwer: wstawElement; B³±d. " + e.getMessage());
      }
    }

    if (head == 50) {
      head = 0;
    }
    buf[head] = el;
    head++;

    System.out.println("Serwer: wstawElement(); Koniec dzialania.");
  }

  private boolean isEmpty() {
    if (head == tail)
      return true;
    return false;
  }

  private boolean isFull() {
    if ((head == tail - 1) || ( head == 50 && tail == 0))
      return true;
    return false;
  }

  public int pobierzElement() throws RemoteException {
    System.out.println("Serwer: pobierzElement();");
    
    int result = 0;

    while ( isEmpty() ) {
      try {
        Thread.sleep(10);
      } catch(Exception e) {
        System.err.println("Serwer: pobierzElement; B³±d. " + e.getMessage());
      }
    }

    if (tail == 50) {
      tail = 0;
    }
    result = buf[tail];
    tail++;

    System.out.println("Serwer: pobierzElement(); Koniec dzialania.");
    return result;
  }

  public OdleglyBufor nowyOdleglyBufor() throws RemoteException {
    System.out.println("Serwer: nowyOdleglyBufor();");

    OdleglyBufor bufor = new OdleglaKlasa();
    UnicastRemoteObject.exportObject(bufor);

    System.out.println("Serwer: nowyOdleglyBufor(); Koniec dzialania.");
    return bufor;
  }
}

public class Serwer
{
  public static void main(String args[])
  {
    // System.setSecurityManager(new RMISecurityManager());

    try {
      System.out.println("Serwer: Zaczynam tworzyc obiekty.");

      TworzOdlegleBufory tob = new OdleglaKlasa("producent_konsument");

      System.out.println("Serwer: Obiekty utworzone.");
    } catch(Exception e) {
      System.err.println("Serwer: B³±d. " + e.getMessage());
    }
  }
}

// Klient.java

public class Klient
{
  static class Producer extends Thread {
    private OdleglyBufor ob;

    public Producer(OdleglyBufor b) {
      ob = b;
    }

    public void run() {
      for (int i = 0; i < 10; i++) {
        System.out.println("Producer wstawi³ element: " + i);
        try {
          ob.wstawElement(i);
          Thread.sleep(1);
        } catch(Exception e) {
          System.err.println("Klient: B³±d. " + e.getMessage());
        }
      }
    }
  }

  static class Consumer extends Thread {
    private OdleglyBufor ob;
    
    public Consumer(OdleglyBufor b) {
      ob = b;
    }
    public void run() {
      for (int i = 0; i < 10; i++) {
        try {
          System.out.println("Consumer pobra³ element: " + ob.pobierzElement());
          Thread.sleep(1);
        } catch(Exception e) {
          System.err.println("Klient: B³±d. " + e.getMessage());
        }
      }
    }
  }

  public static void main(String args[])
  {
    //System.setSecurityManager(new RMISecurityManager());

    try {
      TworzOdlegleBufory tob = (TworzOdlegleBufory)Naming.lookup(
        "rmi://localhost/producent_konsument");

      OdleglyBufor ob = tob.nowyOdleglyBufor();

      Producer p = new Producer(ob);
      Consumer c = new Consumer(ob);
      p.start();
      c.start();

    } catch(Exception e) {
      System.err.println("Klient: B³±d. " + e.getMessage());
    }
  }
}

// Terminal output

Serwer:

MacBook-Air-Wojciech:SERWER wo$ java -Djava.security.policy=./policy Serwer
Serwer: Zaczynam tworzyc obiekty.
Serwer: OdleglaKlasa(String); OK
Serwer: Obiekty utworzone.
Serwer: nowyOdleglyBufor();
Serwer: OdleglaKlasa(); OK
Serwer: nowyOdleglyBufor(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.

Klient:

MacBook-Air-Wojciech:KLIENT wo$ java Klient
Producer wstawi³ element: 0
Producer wstawi³ element: 1
Producer wstawi³ element: 2
Producer wstawi³ element: 3
Producer wstawi³ element: 4
Producer wstawi³ element: 5
Consumer pobra³ element: 0
Producer wstawi³ element: 6
Consumer pobra³ element: 1
Producer wstawi³ element: 7
Consumer pobra³ element: 2
Producer wstawi³ element: 8
Consumer pobra³ element: 3
Producer wstawi³ element: 9
Consumer pobra³ element: 4
Consumer pobra³ element: 5
Consumer pobra³ element: 6
Consumer pobra³ element: 7
Consumer pobra³ element: 8
Consumer pobra³ element: 9

Zadanie 12 -------------------------------------

// Serwer.java, tylko zmienione fragmenty

OdleglaKlasa(String s) throws RemoteException
{
  super();
  try {
    UnicastRemoteObject.exportObject(this);
    Naming.rebind(s, this);
  } catch(Exception e) {
    System.err.println("Serwer: OdleglaKlasa(String); B³±d. " + e.getMessage());
  }

  buffers = new HashMap<String, OdleglyBufor>();

  System.out.println("Serwer: OdleglaKlasa(String); OK");
}

public HashMap<String, OdleglyBufor> buffers;

public OdleglyBufor nowyOdleglyBuforZNazwa(String name) throws RemoteException {
  System.out.println("Serwer: nowyOdleglyBufor();");
  OdleglyBufor bufor;

  if (buffers.containsKey(name))
    bufor = buffers.get(name);
  else {
    bufor = new OdleglaKlasa();
    UnicastRemoteObject.exportObject(bufor);
    buffers.put(name, bufor);
  }

  System.out.println("Serwer: nowyOdleglyBufor(); Koniec dzialania.");
  return bufor;
}

// Klienci 

Klient 1:

public static void main(String args[])
{
  //System.setSecurityManager(new RMISecurityManager());

  try {
    TworzOdlegleBufory tob = (TworzOdlegleBufory)Naming.lookup(
      "rmi://localhost/producent_konsument");

    OdleglyBufor ob = tob.nowyOdleglyBuforZNazwa("BUFF");

    Consumer c = new Consumer(ob);
    c.start();

  } catch(Exception e) {
    System.err.println("Klient: B³±d. " + e.getMessage());
  }
}

Klient 2:

public static void main(String args[])
{
  //System.setSecurityManager(new RMISecurityManager());

  try {
    TworzOdlegleBufory tob = (TworzOdlegleBufory)Naming.lookup(
      "rmi://localhost/producent_konsument");

    OdleglyBufor ob = tob.nowyOdleglyBuforZNazwa("BUFF");

    Producer p = new Producer(ob);
    p.start();

  } catch(Exception e) {
    System.err.println("Klient: B³±d. " + e.getMessage());
  }
}

// Terminal output

Serwer:

MacBook-Air-Wojciech:SERWER wo$ java -Djava.security.policy=./policy Serwer
Serwer: Zaczynam tworzyc obiekty.
Serwer: OdleglaKlasa(String); OK
Serwer: Obiekty utworzone.
Serwer: nowyOdleglyBufor();
Serwer: OdleglaKlasa(); OK
Serwer: nowyOdleglyBufor(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: nowyOdleglyBufor();
Serwer: nowyOdleglyBufor(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: wstawElement();
Serwer: wstawElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.
Serwer: pobierzElement();
Serwer: pobierzElement(); Koniec dzialania.

Klient 1:

MacBook-Air-Wojciech:KLIENT wo$ java Klient
Producer wstawi³ element: 0
Producer wstawi³ element: 1
Producer wstawi³ element: 2
Producer wstawi³ element: 3
Producer wstawi³ element: 4
Producer wstawi³ element: 5
Producer wstawi³ element: 6
Producer wstawi³ element: 7
Producer wstawi³ element: 8
Producer wstawi³ element: 9

Klient 2:

MacBook-Air-Wojciech:KLIENT2 wo$ java Klient
Consumer pobra³ element: 0
Consumer pobra³ element: 1
Consumer pobra³ element: 2
Consumer pobra³ element: 3
Consumer pobra³ element: 4
Consumer pobra³ element: 5
Consumer pobra³ element: 6
Consumer pobra³ element: 7
Consumer pobra³ element: 8
Consumer pobra³ element: 9}
