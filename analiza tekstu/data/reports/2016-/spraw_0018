przedmiot TAS temat B nr_indeksu 396464 liczba_pkt 2 

\n\nZadanie\ 10\ -------------------------------------\n1.\nPrzy\ uruchamianiu\ metody\ na\ rzecz\ tego\ samego\ obiektu\ przez\ dwóch\ klientów\ zostaj±\ utworzone\ osobne\ w±tki\ na\ serwerze.\ Po\ dodaniu\ linijki\n\nSystem.out.println(Thread.currentThread())\;\n\ndo\ kodu\ powolnaMetoda()\ i\ uruchomieniu\ dwóch\ klientów\ jednocze¶nie\ mo¿na\ zobaczyæ,\ ¿e\ w±tki\ maj±\ ró¿ne\ ID\ -\ jeden\ 2,\ drugi\ 3.\ Wydruk\ z\ serwera\ przedstawiony\ jest\ w\ pliku\ zad10_screenshot.png\n\n2.\nPrzy\ zakomentowaniu\ linijki\ odpowiedzialnej\ za\ eksport\ obiektu\ otrzymujê\ b³±d\ \"no\ security\ manager\",\ natomiast\ po\ próbie\ dodania\ Security\ Managera\ program\ drukowa³\ komunikat\ \"access\ denied\".\n\n3.\nPrzy\ sztucznym\ wywo³aniu\ b³êdu\ jest\ zwracany\ poprawny\ komunikat\ o\ wyst±pieniu\ b³êdu\ \ -\ zad10_screenshot_2.png\n\nZadanie\ 11\ -------------------------------------\nPo\ stronie\ serwera\ znajduje\ siê\ obiekt\ OdleglyBufor,\ który\ s³u¿y\ do\ przenoszenia\ informacji\ pomiêdzy\ Klientem,\ a\ Producentem\ (umieszczeni\ jako\ w±tki\ w\ kliencie).\n\nDefinicja\ interfejsu\ wygl±da\ nastêpuj±co:\n\npublic\ interface\ OdleglyBufor\ extends\ Remote\ \{\n\ \ public\ void\ wstawElement(int\ _element)\ throws\ RemoteException\;\n\ \ public\ int\ pobierzElement()\ throws\ RemoteException\;\n\ \ public\ boolean\ czyPelny()\ throws\ RemoteException\;\n\ \ public\ boolean\ czyPusty()\ throws\ RemoteException\;\n\}\n\nKod\ implementacji\ interfejsu\ natomiast:\n\npublic\ class\ OdleglyBuforImpl\ extends\ UnicastRemoteObject\ implements\ OdleglyBufor\ \{\n\ \ private\ int\[\]\ fifo\;\n\ \ private\ int\ wsk_poczatek,\ wsk_koniec\;\n\ \ private\ int\ ileElem\;\n\n\ \ protected\ OdleglyBuforImpl()\ throws\ RemoteException\ \{\n\ \ \ \ super()\;\n\ \ \ \ try\ \{\n\ \ \ \ \ \ exportObject(this)\;\n\ \ \ \ \ \ Naming.rebind(ConstantParameters.RMI_ID,\ this)\;\n\ \ \ \ \}\ catch(Exception\ e)\ \{\n\ \ \ \ \ \ System.out.println(e.getMessage())\;\n\ \ \ \ \}\n\n\ \ \ \ fifo\ =\ new\ int\[50\]\;\n\ \ \ \ wsk_poczatek\ =\ 0\;\n\ \ \ \ wsk_koniec\ =\ 0\;\n\ \ \ \ ileElem\ =\ 0\;\n\ \ \}\n\n\ \ @Override\n\ \ public\ void\ wstawElement(int\ _element)\ throws\ RemoteException\ \{\n\ \ \ \ fifo\[wsk_koniec\]\ =\ _element\;\n\n\ \ \ \ if(wsk_koniec\ +\ 1\ ==\ 50)\n\ \ \ \ \ \ wsk_koniec\ =\ 0\;\n\ \ \ \ else\n\ \ \ \ \ \ wsk_koniec++\;\n\ \ \ \ ileElem++\;\n\ \ \}\n\n\ \ public\ int\ pobierzElement()\ throws\ RemoteException\ \{\n\ \ \ \ int\ element\ =\ fifo\[wsk_poczatek\]\;\n\n\ \ \ \ if(wsk_poczatek\ +\ 1\ ==\ 50)\n\ \ \ \ \ \ wsk_poczatek\ =\ 0\;\n\ \ \ \ else\n\ \ \ \ \ \ wsk_poczatek++\;\n\ \ \ \ ileElem--\;\n\ \ \ \ return\ element\;\n\ \ \}\n\n\ \ public\ boolean\ czyPelny()\ throws\ RemoteException\ \{\n\ \ \ \ if(ileElem\ ==\ 50)\n\ \ \ \ \ \ return\ true\;\n\ \ \ \ return\ false\;\n\ \ \}\n\n\ \ public\ boolean\ czyPusty()\ throws\ RemoteException\ \{\n\ \ \ \ if(ileElem\ ==\ 0)\n\ \ \ \ \ \ return\ true\;\n\ \ \ \ return\ false\;\n\ \ \}\n\}\n\nPo\ stronie\ klienta\ utworzy³em\ w±tki\ za\ pomoc±\ ExecutorService\ ClientProducer\ i\ ClientConsument,\ które\ s±\ odpowiednio\ Producentem\ i\ Konsumentem.\n\nExecutorService\ service\ =\ Executors.newFixedThreadPool(2)\;\nservice.submit(new\ ClientProducer(bufor))\;\nservice.submit(new\ ClientConsument(bufor))\;\nservice.shutdown()\;\nservice.awaitTermination(1,\ TimeUnit.DAYS)\;\n\nKod\ Producenta:\n\nOdleglyBufor\ bufor\;\n\npublic\ ClientProducer(OdleglyBufor\ bufor)\ \{\n\tthis.bufor\ =\ bufor\;\n\}\n\n@Override\npublic\ Object\ call()\ throws\ Exception\ \{\n\tfor(int\ i\ =\ 0\;\ i\ <\ 1000\;\ i++)\ \{\n\t\tif(bufor.czyPelny())\ \{\n\t\t\tSystem.out.println(\"\[Producent\]\ Bufor\ pelny.\ Czekam\")\;\n\t\t\twhile(bufor.czyPelny())\ \{\n\t\t\t\tThread.sleep(200)\;\n\t\t\t\}\n\t\t\}\n\t\tbufor.wstawElement(i)\;\n\t\}\n\treturn\ null\;\n\}\n\nKod\ Konsumenta:\n\n\ \ OdleglyBufor\ bufor\;\n\n\ \ public\ ClientConsument(OdleglyBufor\ bufor)\ \{\n\ \ \ \ this.bufor\ =\ bufor\;\n\ \ \}\n\n\ \ @Override\n\ \ public\ Object\ call()\ throws\ Exception\ \{\n\ \ \ \ for(int\ i\ =\ 0\;\ i\ <\ 1000\;\ i++)\ \{\n\ \ \ \ \ \ if(bufor.czyPusty())\ \{\n\ \ \ \ \ \ \ \ System.out.println(\"\[Konsument\]\ Bufor\ pusty.\ Czekam\")\;\n\ \ \ \ \ \ \ \ while(bufor.czyPusty())\ \{\n\ \ \ \ \ \ \ \ \ \ Thread.sleep(200)\;\n\ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \}\n\ \ \ \ \ \ System.out.println(\"\[Konsument\]\"\ +\ bufor.pobierzElement())\;\n\ \ \ \ \}\n\ \ \ \ return\ null\;\n\ \ \}\n\}\n\nWydruki\ z\ dzia³ania\ programu\ dla\ konsumenta\ czytaj±cego\ z\ opó¼nieniem\ zapisane\ s±\ w\ pliku\ zad11_screenshot.png,\ natomiast\ dla\ producenta\ wysy³aj±cego\ z\ opó¼nieniem\ w\ zad11_screenshot_2.png\nZarówno\ i\ producent\ i\ konsument\ byli\ opó¼niani\ o\ 50ms\ po\ ka¿dym\ wys³aniu/odczytaniu\ warto¶ci\ z\ kolejki\ FIFO.\n
