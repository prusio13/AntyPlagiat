przedmiot TAS temat B nr_indeksu 384163 liczba_pkt 4 



Zadanie 10 ------------------------------------- 

Zmieniamy czas powolnej metody w celu sprawdzenia, czy klienci s± obd³ugiwani na ró¿nych w±tkach, i uruchamiamy dwóch klientów.

public int powolnaMetoda() throws RemoteException
  {
    licznik++;
    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
    try {Thread.sleep(20000);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }
  
Widaæ, ¿e na serwerze uruchomione s± dwa w±tki.

Serwer:
  
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/SERWER$ ^C
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/SERWER$ javac sss.java 
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/SERWER$ java sss 
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 0
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 2
sss: powolnaMetoda(); licznik=2
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 3
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 0
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 4
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 5
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 2
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 6
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 3
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 7
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 4
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 8
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 5
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 9
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 6
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 7
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 8
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 9
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 0
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 2
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=2
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 3
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 0
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 4
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 5
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 2
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 6
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 3
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 7
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 4
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 8
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 5
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 9
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 6
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 7
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 8
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 9
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=3
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 0
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 2
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=4
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 3
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 0
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 4
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 5
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 2
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 6
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 3
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 7
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 4
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 8
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 5
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 9
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 6
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 7
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 8
Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime] 9
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); koniec dzialania !



Klient 1:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=2
kkk: oo2.powolnaMetoda()=2
kkk: oo2.powolnaMetoda()=4

Klient 2:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=2
kkk: oo2.powolnaMetoda()=3
kkk: oo2.powolnaMetoda()=4


Nieeksportowany: 

Serwer:

^Ckatarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/SERWER$ java sss 
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 0
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 2
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 3
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 4
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 5
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 6
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 7
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 8
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 9
sss: powolnaMetoda(); koniec dzialania !

Klient:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=1
kkk: blad !!! error unmarshalling return; nested exception is: 
	java.lang.ClassNotFoundException: OdleglaKlasa (no security manager: RMI class loader disabled)
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/KLIENT$ ^C


Nale¿y zatem skopiowaæ odleg³a klasa class.
 
Serwer: 

 ^Ckatarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/SERWER$ java sss 
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 0
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 1
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 2
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 3
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 4
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 5
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 6
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 7
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 8
Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime] 9
sss: powolnaMetoda(); koniec dzialania !

Klient:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/10/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=1
sss: powolnaMetoda(); licznik=1
Thread[main,5,main] 0
Thread[main,5,main] 1
Thread[main,5,main] 2
Thread[main,5,main] 3
Thread[main,5,main] 4
Thread[main,5,main] 5
Thread[main,5,main] 6
Thread[main,5,main] 7
Thread[main,5,main] 8
Thread[main,5,main] 9
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=1
sss: powolnaMetoda(); licznik=2
Thread[main,5,main] 0
Thread[main,5,main] 1
Thread[main,5,main] 2
Thread[main,5,main] 3
Thread[main,5,main] 4
Thread[main,5,main] 5
Thread[main,5,main] 6
Thread[main,5,main] 7
Thread[main,5,main] 8
Thread[main,5,main] 9
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=2


W±tek nie operowa³ na obiekcie zdalnym, lecz na lokalnej kopii obiektu, zatem wypisuje komunikaty w konsoli klienta.

10.3.
Wystêpuje b³±d po stronie klienta. Rzucanie wyj±tkiem powoduje, ¿e nic nie pokazuje siê po stronie serwera.

Klient:

kkk: blad !!! RemoteException occurred in server thread; nested exception is: 
        java.rmi.RemoteException: sztucznie wygenerowany blad ...

Zadanie 11 -------------------------------------

Producent produkuje liczbê co 1s, konsument chce j± pobieraæ co 100ms. W rezultacie liczba zostaje pobrana przez konsumenta od razu po jej wstawieniu przez producenta.

Kody:

Klient:

import  java.rmi.*;
import  java.rmi.registry.*;
class  Konsument  implements  Runnable  {
	OdleglyBufor  bufor;
        public  Konsument(  OdleglyBufor  a  )  {
		bufor  =  a;
        }
        @Override
        public  void  run(){
		System.err.println("Konsument  zaczal  dzialanie"  );
		try{
		Thread.sleep(2000);
		}catch(Exception  e){};

		while(true){
			try{
		        	Thread.sleep(1500);
			        int  b  =  bufor.pobierzElement();
				System.err.println("Konsument  pobral  liczbe  "  +  b  );}
			catch(  Exception  c  ){  
				System.err.println("Konsument  blad!!!!"  );  };}
        }
}

class  Producent  implements  Runnable  {
	OdleglyBufor  bufor;
	int  licz  =  0;
        public  Producent(  OdleglyBufor  a  )  {
		bufor  =  a;
        }
        @Override
        public  void  run()  {
		while(true)
		{
			licz++;
			try  {
				Thread.sleep(1000);			
				bufor.wstawElement(  licz  );
				System.err.println("Producent  wstawil  liczbe  "  +  licz  );	
			}
			catch(  Exception  c  ){  System.err.println("Producent  blad!!!!"  );    };	
		}
        }
}
public  class  kkk
{
    public  static  void  main(String  args[])
    {
        //System.setSecurityManager(new  RMISecurityManager());
	OdleglyBufor  dd  =  null;
        try  {
              TworzOdlegleBufory  oo  =  (TworzOdlegleBufory)Naming.lookup(
                "rmi://localhost/przyklad_rmi4");
	    dd  =  oo.nowyOdleglyBufor();
        }  catch(Exception  e)  {
            System.err.println("kkk:  blad  !!!  "+e.getMessage());
        }
        new  Thread(new  Producent(  dd  )).start();
        new  Thread(new  Konsument(  dd  )).start();
    }
}

Serwer:

import  java.rmi.*;
import  java.rmi.registry.*;
import  java.rmi.server.*;
import  java.io.*;
import  java.util.*;
class  Fabryka
implements  TworzOdlegleBufory,  Serializable{
    Fabryka(String  s)  throws  RemoteException{
        super();
        try  {
            UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
        }  catch(Exception  e)  {
            System.err.println("sss:  OdleglaKlasa(String);  blad  !!!  "+e.getMessage());
        }
        System.out.println("sss:  OdleglaKlasa(String);  ok");
    }
    Fabryka()  throws  RemoteException{
        super();
        System.out.println("sss:  OdleglaKlasa();  ok");}
    public  OdleglyBufor  nowyOdleglyBufor(  )  throws  RemoteException
    {
        OdleglyBufor  nowyB  =  new  Bufor();
        UnicastRemoteObject.exportObject(nowyB);
        return  nowyB;
    }
}
class  Bufor
implements  OdleglyBufor,  Serializable
{
    Vector<Integer>  bufor;
    static  int  maxSize  =  10;  
    Bufor()  throws  RemoteException
    {
        super();
        bufor  =  new  Vector();
        System.out.println("sss:  OdleglaKlasa(String);  ok");
    }
    public  synchronized  int  pobierzElement()  throws  RemoteException
    {
	int  res  =  0;
	try  {
			while(  bufor.isEmpty()  ){
				wait();}
		        res  =    bufor.firstElement();
			bufor.removeElementAt(0);
			System.err.println("Usuwanie  liczby");
			notifyAll();
		}
		catch(Exception  e){};
		return  res;	
    }
    public  synchronized  void  wstawElement(int  a)  throws  RemoteException
    {
		try  {
			if(  bufor.size()  ==  maxSize  ){
				wait();}
			bufor.add(  a  );
			System.err.println("Wstawianie  liczby");
			notifyAll();}
		catch(Exception  e){};
    }
}

public  class  sss
{
    public  static  void  main(String  args[]){
        try  {
            System.out.println("sss:  zaczynam  tworzyc  obiekty  ...");
            Fabryka  oo=  new  Fabryka("przyklad_rmi4");
            System.out.println("sss:  obiekty  utworzone  !!!");
        }  catch(Exception  e)  {
            System.err.println("sss:  blad  !!!  "+e.getMessage());
        }
    }
}

Interface:

import  java.rmi.*;
public  interface  OdleglyBufor  extends  Remote
{
	void  wstawElement(  int  el  )  throws  RemoteException;
	int  pobierzElement()  throws  RemoteException;
}
import  java.rmi.*;
import  java.util.*;

public  interface  TworzOdlegleBufory  extends  Remote
{
        OdleglyBufor  nowyOdleglyBufor()  throws  RemoteException;
}

Wydruki:

Klient:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/11/KLIENT>java kkk
Konsument zaczal dzialanie
Producent wstawil liczbe 1
Producent wstawil liczbe 2
Konsument pobral liczbe 1
Konsument pobral liczbe 2
Producent wstawil liczbe 3
Konsument pobral liczbe 3
Producent wstawil liczbe 4
Konsument pobral liczbe 4
Producent wstawil liczbe 5
Konsument pobral liczbe 5

Serwer:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/11/SERWER>java sss localhost
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: OdleglaKlasa(String); ok
Wstawianie liczby
Wstawianie liczby
Usuwanie liczby
Usuwanie liczby
Wstawianie liczby
Usuwanie liczby
Wstawianie liczby
Usuwanie liczby
Wstawianie liczby
Usuwanie liczby
Wstawianie liczby

Zadanie 12 -------------------------------------

Wydruki:

Klient:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/12/KLIENT>java kkk
Konsument zaczal dzialanie
Producent wstawil liczbe 1
Producent wstawil liczbe 2
Konsument pobral liczbe 1
Konsument pobral liczbe 2
Producent wstawil liczbe 3
Konsument pobral liczbe 3
Producent wstawil liczbe 4
Konsument pobral liczbe 4
Producent wstawil liczbe 5

Serwer:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/12/SERWER>java sss localhost
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: OdleglaKlasa(String); ok
Wstawianie liczby
Wstawianie liczby
Usuwanie liczby
Usuwanie liczby
Wstawianie liczby
Usuwanie liczby
Wstawianie liczby
Usuwanie liczby
Wstawianie liczby
Usuwanie liczby
Wstawianie liczby

Kody:

Klient:

import  java.rmi.*;
import  java.rmi.registry.*;
class  Konsument  implements  Runnable  {
	OdleglyBufor  bufor;
        public  Konsument(  )  {
			OdleglyBufor  dd  =  null;
			try  {
			    TworzOdlegleBufory  oo  =  (TworzOdlegleBufory)Naming.lookup(
				"rmi://localhost/przyklad_rmi4");

			    dd  =  oo.nowyOdleg³yBufor(  "buforek"  );
	
			}  catch(Exception  e)  {
			    System.err.println("Konsument  :  blad  !!!  "+e.getMessage());
			}
			bufor  =  dd;
        }
        @Override
        public  void  run()  {	
		System.err.println("Konsument  zaczal  dzialanie"  );
		try{
		Thread.sleep(2000);
		}catch(Exception  e){};
		while(true)
		{
			try{
		        	Thread.sleep(100);
			        int  b  =  bufor.pobierzElement();
				System.err.println("Konsument  pobral  liczbe  "  +  b  );
			}
			catch(  Exception  c  ){  
				System.err.println("Konsument  blad!!!!"  );  };
		}
        }
}

class  Producent  implements  Runnable  {
	OdleglyBufor  bufor;
	int  licz  =  0;
        public  Producent(  )  {
			OdleglyBufor  dd  =  null;
			try  {
			    TworzOdlegleBufory  oo  =  (TworzOdlegleBufory)Naming.lookup(
				"rmi://localhost/przyklad_rmi4");
			    dd  =  oo.nowyOdleg³yBufor(  "buforek"  );
			}  catch(Exception  e)  {
			    System.err.println("Producent  :  blad  !!!  "+e.getMessage());}
			bufor  =  dd;
        }
  
        @Override
        public  void  run()  {
		while(true){
			licz++;
			try  {
				Thread.sleep(1000);			
				bufor.wstawElement(  licz  );
				System.err.println("Producent  wstawil  liczbe  "  +  licz  );
			}
			catch(  Exception  c  ){  System.err.println("Producent  blad!!!!"  );    };
		}
        }
}

public  class  kkk
{
    public  static  void  main(String  args[])
    {
        //System.setSecurityManager(new  RMISecurityManager());
	
        new  Thread(new  Producent(    )).start();
        new  Thread(new  Konsument(    )).start();
    }
}

Serwer:

import  java.rmi.*;
import  java.rmi.registry.*;
import  java.rmi.server.*;
import  java.io.*;
import  java.util.*;
class  Fabryka
implements  TworzOdlegleBufory,  Serializable
{
    Map<  String,  OdleglyBufor  >  slownik;  
    Fabryka(String  s)  throws  RemoteException
    {
        super();
	slownik  =  new  HashMap<String,  OdleglyBufor>();
        try  {
            UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
        }  catch(Exception  e)  {
            System.err.println("sss:  OdleglaKlasa(String);  blad  !!!  "+e.getMessage());
        }
        System.out.println("sss:  OdleglaKlasa(String);  ok");
    }
    Fabryka()  throws  RemoteException
    {
        super();
        System.out.println("sss:  OdleglaKlasa();  ok");
    }
    public  OdleglyBufor  nowyOdleg³yBufor(  String  s  )  throws  RemoteException
    {
        if(  slownik.get(  s  )  ==  null  )
	{
	System.out.println("Tworze  obiekt");
        	OdleglyBufor  nowyB  =  new  Bufor();
		slownik.put(s,  nowyB);
        	UnicastRemoteObject.exportObject(nowyB);
	}

	if(  slownik.get(  s  )  ==  null  ){
		System.out.println("Cos  srednio  sie  stworzylo");}
	return  slownik.get(  s  );
    }
}

class  Bufor
implements  OdleglyBufor,  Serializable
{
    Vector<Integer>  bufor;
    static  int  maxSize  =  10;  
    Bufor()  throws  RemoteException
    {
        super();
        bufor  =  new  Vector();
        System.out.println("sss:  OdleglaKlasa(String);  ok");
    }
    public  synchronized  int  pobierzElement()  throws  RemoteException
    {
	int  res  =  0;
	try  {
			while(  bufor.isEmpty()  ){
				wait();}	
		        res  =    bufor.firstElement();
			bufor.removeElementAt(0);
			System.err.println("Usuwanie  liczby");
			notifyAll();
		}
		catch(Exception  e){};
		return  res;	
    }

    public  synchronized  void  wstawElement(int  a)  throws  RemoteException{
		try  {
			if(  bufor.size()  ==  maxSize  ){wait();}
			bufor.add(  a  );
			System.err.println("Wstawianie  liczby");
			notifyAll();
		}
		catch(Exception  e){};
    }
}
public  class  sss
{
    public  static  void  main(String  args[])
    {
        //System.setSecurityManager(new  RMISecurityManager());

        try  {
            System.out.println("sss:  zaczynam  tworzyc  obiekty  ...");
            Fabryka  oo=  new  Fabryka("przyklad_rmi4");
            System.out.println("sss:  obiekty  utworzone  !!!");
        }  catch(Exception  e)  {
            System.err.println("sss:  blad  !!!  "+e.getMessage());
        }
    }
}

Interface:

import  java.rmi.*;
public  interface  OdleglyBufor  extends  Remote
{
	void  wstawElement(  int  el  )  throws  RemoteException;
	int  pobierzElement()  throws  RemoteException;
}
import  java.rmi.*;
import  java.util.*;
public  interface  TworzOdlegleBufory  extends  Remote
{
        OdleglyBufor  nowyOdleg³yBufor(  String  s  )  throws  RemoteException;
}

Serwer - fabryka buforów, ma wen±trz siebie s³ownik na bufor ze stringa. Próbuj±c utworzyæ bufor z u¿yt± ju¿ nazw±, zwraca istniej±cy.

Klient - dwa w±tki pobireaj± bufor niezale¿nie od siebie.

Zadanie 14 -------------------------------------

Klient:

NiceObject tworzy 2 w±tki
-konsument
-producent
obs³uguj± one obiekty typu NIceObject.

Kod:

import  java.rmi.*;
import  java.io.*;
import  java.rmi.registry.*;
class  NiceObject  implements  Serializable  {
          String  name;
          NiceObject(  String  _name)  {
                  name  =  _name;}
          void  Show()  {
                    System.err.println("Jestem  obiektem  "  +  name  );  }
}

class  Konsument  implements  Runnable  {
        OdleglyBufor  bufor;
        public  Konsument(  OdleglyBufor  a  )  {
		bufor  =  a;
        }

        @Override
        public  void  run()  {	
		System.err.println("Konsument  zaczal  dzialanie"  );
		try{
		Thread.sleep(2000);
		}catch(Exception  e){};
		while(true){
			try{
		        		Thread.sleep(1500);
			                NiceObject  b  =  (NiceObject)bufor.pobierzElement();
				System.err.println("---------------------------\nKonsument  pobral  obiekt  ");
				b.Show();
			}
			catch(  Exception  c  ){  
				System.err.println("Konsument  blad!!!!"  );
				c.printStackTrace();  }
		}
        }
}

class  Producent  implements  Runnable  {
	OdleglyBufor  bufor;
	int  licz  =  0;
        public  Producent(  OdleglyBufor  a  )  {
		bufor  =  a;
        }
        @Override
        public  void  run()  {
		while(true)
		{
			licz++;
			try  {
				Thread.sleep(1000);
                                                                NiceObject  a  =  new  NiceObject(  "Object  "  +  licz  );			
				bufor.wstawElement(  (Object)a  );
				System.err.println("----------------------------\nProducent  wstawil  obiekt  "  );
				a.Show();
			}
			catch(  Exception  c  ){  System.err.println("Producent  blad!!!!"  );  c.printStackTrace();  };
		}
        }
}
public  class  kkk
{
    public  static  void  main(String  args[])
    {
        System.setProperty("java.security.policy","file:./server.policy");
        System.setSecurityManager(new  RMISecurityManager());
	OdleglyBufor  dd  =  null;
        try  {
            TworzOdlegleBufory  oo  =  (TworzOdlegleBufory)Naming.lookup(
                "rmi://localhost/przyklad_rmi4");
	    dd  =  oo.nowyOdleglyBufor();
        }  catch(Exception  e)  {
            System.err.println("kkk:  blad  !!!  "+e.getMessage());
        }
        new  Thread(new  Producent(  dd  )).start();
        new  Thread(new  Konsument(  dd  )).start();
    }
}

Serwer:

import  java.rmi.*;
import  java.rmi.registry.*;
import  java.rmi.server.*;
import  java.io.*;
import  java.util.*;

class  Fabryka
implements  TworzOdlegleBufory,  Serializable
{
    Fabryka(String  s)  throws  RemoteException
    {
        super();
        try  {
            UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
        }  catch(Exception  e)  {
            System.err.println("sss:  OdleglaKlasa(String);  blad  !!!  "+e.getMessage());
        }
        System.out.println("sss:  OdleglaKlasa(String);  ok");
    }
    Fabryka()  throws  RemoteException{
        super();
        System.out.println("sss:  OdleglaKlasa();  ok");}

    public  OdleglyBufor  nowyOdleglyBufor(  )  throws  RemoteException
    {
        OdleglyBufor  nowyB  =  new  Bufor();
        UnicastRemoteObject.exportObject(nowyB);
        return  nowyB;
    }
}
class  Bufor
implements  OdleglyBufor,  Serializable
{
    Vector<Object>  bufor;
    static  int  maxSize  =  10;  
    Bufor()  throws  RemoteException
    {
        super();
        bufor  =  new  Vector();
        System.out.println("sss:  OdleglaKlasa(String);  ok");
    }
    public  synchronized  Object  pobierzElement()  throws  RemoteException
    {
	System.err.println("Pobranie  obiektu");
	Object  res  =  null;
	try  {
		while(  bufor.isEmpty()  ){
			wait();}	
	              res  =    bufor.firstElement();
		bufor.removeElementAt(0);
		System.err.println("Usuwanie  liczby");
		notifyAll();
	}
	catch(Exception  e){};
	return  res;	
    }

    public  synchronized  void  wstawElement(Object  a)  throws  RemoteException
    {

	System.err.println("Wstawianie  obiektu");
	try  {
		if(  bufor.size()  ==  maxSize  ){
			wait();}
		bufor.add(  a  );
		System.err.println("Wstawianie  liczby");
		notifyAll();}
	catch(Exception  e){};
    }
}

public  class  sss
{
    public  static  void  main(String  args[])
    {
        System.setProperty("java.security.policy","file:./server.policy");
        System.setSecurityManager(new  RMISecurityManager());
        //System.setSecurityManager(new  RMISecurityManager());

        try  {
            System.out.println("sss:  zaczynam  tworzyc  obiekty  ...");
            Fabryka  oo=  new  Fabryka("przyklad_rmi4");
            System.out.println("sss:  obiekty  utworzone  !!!");
        }  catch(Exception  e)  {
            System.err.println("sss:  blad  !!!  "+e.getMessage());
        }
    }
}

Interface:

import  java.rmi.*;
public  interface  OdleglyBufor  extends  Remote
{
	void  wstawElement(  Object  el  )  throws  RemoteException;
	Object  pobierzElement()  throws  RemoteException;
}
import  java.rmi.*;
import  java.util.*;
public  interface  TworzOdlegleBufory  extends  Remote{
        OdleglyBufor  nowyOdleglyBufor()  throws  RemoteException;
}



Serwer przechowuje obiekty jako typ Object (nie ma dostêpu do NIceObject). 

Klient:
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/14/KLIENT$ va -Djava.rmi.server.codebase=file:~/TAS/tematB/14/KLIENT -Djava.rmi.server.useCodebaseOnly=false kkk

Konsument zaczal dzialanie
Producent wstawil obiekt 
Jestem obiektem Object 1
Producent wstawil obiekt 
Jestem obiektem Object 2
Producent wstawil obiekt 
Jestem obiektem Object 3
Konsument pobral obiekt 
Jestem obiektem Object 1
Producent wstawil obiekt 
Jestem obiektem Object 4
Konsument pobral obiekt 
Jestem obiektem Object 2
Producent wstawil obiekt 
Jestem obiektem Object 5
Producent wstawil obiekt 
Jestem obiektem Object 6
Konsument pobral obiekt 
Jestem obiektem Object 3
Producent wstawil obiekt 
Jestem obiektem Object 7

Serwer:
java -Djava.rmi.server.debase=file:katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematB/14/SERWER/  -Djava.rmi.server.useCodebaseOnly=false sss


sss: OdleglaKlasa(String); ok
Wstawianie obiektu
Wstawianie liczby
Wstawianie obiektu
Wstawianie liczby
Wstawianie obiektu
Wstawianie liczby
Pobranie obiektu
Usuwanie liczby
Wstawianie obiektu
Wstawianie obiektu
Wstawianie liczby
Pobranie obiektu
Usuwanie liczby
Wstawianie obiektu
Wstawianie liczby

Serializacja w jêzyku Java zachowuje obiekty dok³adnie i mo¿liwe jest rzutowanie bez obawy o uszkodzenie jego struktury.


}
