przedmiot TAS temat D nr_indeksu 396365 liczba_pkt 2 



Zadanie 40 -------------------------------------
[Zaprogramuj aplikacje SOAP z metod± "pomnozRazy2" mono¿±c± i zwracaj±c± ci±g liczb float dowolnej d³ugo¶ci;
klienci SOAP: 2 klientów: gsoap i tclsoap
serwer SOAP: dowolny (najpro¶ciej tclsoap)
Wstaw do sprawozdania tak¿e komunikaty SOAP wysy³ane/ odbierane przez klienta.]

Do wykonania zadania 40 wystarczy odpalic przykladowy webservice ktory jest opisany w temacie D.
kompilacja serwera i klientow w gSOAP wyglada tak:

Na poczatku nalezy dodac prawa wykonywania dla programu "soapcpp2" ktory utworzy potrzebe pienki dla klienta oraz serwera.

Gdy mamy ju¿ przygotowany plik musimy utworzyæ trzy pliki z których utworzony zostanie program koncowy. Plik naglowkowy "q.h" (w folderze) z niego beda utworzone wczesniej wspomniane pienki. 
pozniej powstale pliki i nasz plik "q.c" (klient) oraz "q_serv" (serwer) kompilujemy razem z pozostalymi plikami. Wazne by pliki serwera oraz klienta byly w osobnych folderach (zalecenie prowadzacego).

Klient w tclSOAP potrzebujemy plikow ktore pozwola nam na komunikacje za pomoca protokolu SOAP.
W moim przypadku bylo to wrzucenie folderu z plikami do katalogu gdzie umiescilem rowniez plik tclkit oraz plik tcl "konsola2c.tcl"

Wydruki:

Server gSOAP (obslugiwal klienta gSOAP oraz klienta tclSOAP):

s396365@pc24f:~/Desktop/TAS/TematD/Zad40/SERV$ ./soapcpp2 -S -c q.h
s396365@pc24f:~/Desktop/TAS/TematD/Zad40/SERV$ ./gcc q_serv.c soapC.c soapServer.c stdsoap2.c -o Server
s396365@pc24f:~/Desktop/TAS/TematD/Zad40/SERV$ ./Server
serwer/dbg: argument:
1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 16.000000 17.000000 18.000000 19.000000 20.000000 21.000000 22.000000 23.000000 24.000000 25.000000 26.000000 27.000000 28.000000 29.000000 30.000000 31.000000 32.000000 33.000000 34.000000 35.000000 36.000000 37.000000 38.000000 39.000000 40.000000 41.000000 42.000000 43.000000 44.000000 45.000000 46.000000 47.000000 48.000000 49.000000 50.000000 51.000000 52.000000 53.000000 54.000000 55.000000 
.serwer/dbg: argument:
1.000000 2.000000 3.000000
.^C
s396365@pc24f:~/Desktop/TAS/TematD/Zad40/SERV$ 

Klient gSOAP:

s396365@pc24f:~/Desktop/TAS/TematD/Zad40/CLIE$ ./soapcpp2 -C -c q.h
s396365@pc24f:~/Desktop/TAS/TematD/Zad40/CLIE$ gcc q.c soapC.c soapClient.c stdsoap2.c -o Client
s396365@pc24f:~/Desktop/TAS/TematD/Zad40/CLIE$ ./Client 
argument:
1.000000 2.000000 3.000000 4.000000 5.000000 6.000000 7.000000 8.000000 9.000000 10.000000 11.000000 12.000000 13.000000 14.000000 15.000000 16.000000 17.000000 18.000000 19.000000 20.000000 21.000000 22.000000 23.000000 24.000000 25.000000 26.000000 27.000000 28.000000 29.000000 30.000000 31.000000 32.000000 33.000000 34.000000 35.000000 36.000000 37.000000 38.000000 39.000000 40.000000 41.000000 42.000000 43.000000 44.000000 45.000000 46.000000 47.000000 48.000000 49.000000 50.000000 51.000000 52.000000 53.000000 54.000000 55.000000 
wynik:
2.000000 4.000000 6.000000 8.000000 10.000000 12.000000 14.000000 16.000000 18.000000 20.000000 22.000000 24.000000 26.000000 28.000000 30.000000 32.000000 34.000000 36.000000 38.000000 40.000000 42.000000 44.000000 46.000000 48.000000 50.000000 52.000000 54.000000 56.000000 58.000000 60.000000 62.000000 64.000000 66.000000 68.000000 70.000000 72.000000 74.000000 76.000000 78.000000 80.000000 82.000000 84.000000 86.000000 88.000000 90.000000 92.000000 94.000000 96.000000 98.000000 100.000000 102.000000 104.000000 106.000000 108.000000 110.000000 
s396365@pc24f:~/Desktop/TAS/TematD/Zad40/CLIE$ 

Klient tclSOAP:

s396365@pc24f:~/Desktop/TAS/TematD/Zad40/tclCLIENT$ ./tclkit_2 konsola2c.tcl 

# uruchamianie komendy - Ctrl+Enter
# (uruchamia sie zaznaczona komenda lub ta na ktorej jest kursor)
# procedura "_puts" uzywa okienka output
lappend auto_path ./pkg ./tcllib
  #% {/home/students/s396365/Desktop/TAS/TematD/Zad40/CLIE TCL/tclkit_2/lib/tcl8.4} {/home/students/s396365/Desktop/TAS/TematD/Zad40/CLIE TCL/tclkit_2/lib} {/home/students/s396365/Desktop/TAS/TematD/Zad40/CLIE TCL/tclkit_2/lib/tcllib} {/home/students/s396365/Desktop/TAS/TematD/Zad40/CLIE TCL/tclkit_2/lib/tklib} {/home/students/s396365/Desktop/TAS/TematD/Zad40/CLIE TCL/tclkit_2/lib/tk8.4} ./pkg ./tcllib
package re SOAP
  #% 1.6.8.1

# w razie potrzeby tez mozna definiowac typy z³o¿one przy pomocy rpcvar::typedef !!!

SOAP::create pomnozRazy2 \
  -uri qqq \
  -proxy http://localhost:10000/soap/qqq/go \
  -params {x float()}
  #% ::pomnozRazy2
     # -uri to namespace xml, w którym s± zdef operacje serwisu
     # -proxy do url serwera (adres serwera)
     # -params definiuje nazwy i typy parametrów procedury
     #    "typ()" oznacza sekwencje elementów typu "typ"
     #    aby przekazac sekwencjê struktur trzeba zdef. typ strukturowy 
     #      przy pomocy rpcvar::typedef

pomnozRazy2 {1 2 3}
  #% 2 4 6
  # powinno zwrocic: 2 4 6

SOAP::dump -request pomnozRazy2
  #% <?xml version="1.0"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsd="http://www.w3.org/1999/XMLSchema" xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance">
<SOAP-ENV:Body>
<ns:pomnozRazy2 xmlns:ns="qqq">
<x xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xsi:type="SOAP-ENC:Array" SOAP-ENC:offset="[0]" SOAP-ENC:arrayType="xsd:float[3]">
<item xsi:type="xsd:float">1</item>
<item xsi:type="xsd:float">2</item>
<item xsi:type="xsd:float">3</item>
</x>
</ns:pomnozRazy2>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>

SOAP::dump -reply pomnozRazy2
  #% <?xml version="1.0" encoding="UTF-8"?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns="qqq"><SOAP-ENV:Body SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><ns:pomnozRazy2Response><return xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="xsd:float[0]"></return></ns:pomnozRazy2Response></SOAP-ENV:Body></SOAP-ENV:Envelope>
  # wy¶wietla komunikaty SOAP !!!

Zadanie 41 -------------------------------------
[Zaprogramuj WebSerwis z metod± "pomnozDwieMacierze" mno¿±c± dwie podane macierze (o dowolnych wymiarach)
i zwracajac± wynik w postaci macierzy.
serwer: gsoap; wygenerowany plik wsdl ma byc udostêpniony klientom!
klient: java/axis, pieniek wygenerowany aoutomatycznie z pliku wsdl,]

pliki zostaly utworzene podobnie do tych co z zadania 40 z ta roznica ze w tym przypadku robimy tylko serwer w gSOAP.

Wydruk server:
s396365@pc16f:~/Desktop/TAS/TAS/TematD/Zad41$ gcc q.c soap
soapC.c          soapH.h          soapServerLib.c  
soapcpp2         soapServer.c     soapStub.h       
s396365@pc16f:~/Desktop/TAS/TAS/TematD/Zad41$ gcc q.c soapC.c soapServer.c stdsoap2.c -o Server
s396365@pc16f:~/Desktop/TAS/TAS/TematD/Zad41$ ./Server
serwer/dbg:  argument:
.^C
s396365@pc16f:~/Desktop/TAS/TAS/TematD/Zad41$

Wydruk klient:
s396365@pc16f:~/Desktop/TAS/TAS/TematD/Zad41$ javac q.java
s396365@pc16f:~/Desktop/TAS/TAS/TematD/Zad41$ java q
3 
3
6  6  6  
6  6  6  
6  6  6  
}
