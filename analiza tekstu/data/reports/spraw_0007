przedmiot TAS temat A nr_indeksu 384200 liczba_pkt 3 



Zadanie 1 -------------------------------------
Zbadaj i opisz jak rpcgen tlumaczy bardziej z?o?one struktury danych, 
ktorych def jest podana poni?ej;
aby wykona? to zadanie skompiluj plik "rpcgen -aC plik.x"
a potem zajrzyj do plikow ...

struct Macierz {
	float Elem <>;
	int IleW; int IleK;
};
typedef struct Macierz Mac
;
struct TrzyMacierze {Mac M1; Mac M2; Mac M3; };
typedef struct TrzyMacierze TrzyMac;

program ProgMacierze {
	version VerMacierze {
		void PokazMacierz(Mac) = 1;
		void OperacjaNaMacierzach(TrzyMac) = 2;
	} = 1;
} = 0x21001234;


Rpcgen t?umaczy <> na struct {
		u_int Elem_len;
		float *Elem_val;
	}

co wida? w pliku plik.h


Zadanie 2 -------------------------------------
Zaprogramuj aplikacje "sum.x" i wyprobuj jej dzialanie;
w aplikacji tej klient uruchamia proc RPC, która sumuje dwie liczby;
te dwie liczby powinny by? parametrami wywo?ania klienta;
klient powinien wypisywa? tak?e wynik dodawania;
zmiany jakie trzeba wprowadzi? do sum_client.c i sum_server.c ?atwo zauwa?y?
gdy si? do tych plików zajrzy...
klienta i serwer uruchamiaj na lokalnej maszynie;
zobacz jakie proc RPC s? dost?pne przy pomocy "rpcinfo -p";
do sprawozdania wstaw odpowiednie wydruki!

Wydruk znajduje si? w za??czniku o nazwie "Suma".

---------------------- kod sum_client.c

/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "sum.h"


void
progservice_1(char *host, int first, int sec)
{
	CLIENT *clnt;
	int  *result_1;
	ParaLi  suma_1_arg;

#ifndef	DEBUG
	clnt = clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
	suma_1_arg.x1 = first;
	suma_1_arg.x2 = sec;
	result_1 = suma_1(&suma_1_arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	printf("suma %d \n", *result_1);
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;
	char *raz;
	char *dwa;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	raz= argv[2];
	dwa = argv[3];
	int i = atoi(raz);
	int j = atoi(dwa);
	progservice_1 (host, i, j);

exit (0);
}

-------------- kod sum_server.c

/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "sum.h"

int *
suma_1_svc(ParaLi *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */
	result = (argp->x1 + argp->x2);
	return &result;
}


Zadanie 3 -------------------------------------
Zdefiniuj proc RPC pozwalaj?c? przes?a? macierz o dowolnych wymiarach do serwera
oraz wyœwietli? j? na terminalu po stronie serwera;
koniecznie pami?taj o mo?liwych wyciekach pami?ci!! 

Wydruk znajduje si? w za??czniku o nazwie "pokazMacierz".

-------------------- kod proba_client.c
/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "proba.h"


void
progmacierze_1(char *host)
{
	CLIENT *clnt;
	void  *result_1;
	Mac  pokazmacierz_1_arg;
	void  *result_2;
	TrzyMac  operacjanamacierzach_1_arg;

	pokazmacierz_1_arg.IleW = 2;
	pokazmacierz_1_arg.IleK = 2;
	pokazmacierz_1_arg.Elem.Elem_len = 4;
	pokazmacierz_1_arg.Elem.Elem_val = calloc(pokazmacierz_1_arg.IleW*pokazmacierz_1_arg.IleK, sizeof(float));
	

#ifndef	DEBUG
	clnt = clnt_create (host, ProgMacierze, VerMacierze, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}

	int a = 0;
	for(a=0; a<4; a++) {
		pokazmacierz_1_arg.Elem.Elem_val[a] = a;
	}

#endif	/* DEBUG */

	result_1 = pokazmacierz_1(&pokazmacierz_1_arg, clnt);
	if (result_1 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	//result_2 = operacjanamacierzach_1(&operacjanamacierzach_1_arg, clnt);
	//if (result_2 == (void *) NULL) {
	//	clnt_perror (clnt, "call failed");
	//}
	
	
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progmacierze_1 (host);
	

exit (0);
}

------------------------------------- kod proba_server.c

/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "proba.h"

void *
pokazmacierz_1_svc(Mac *argp, struct svc_req *rqstp)
{
	static char * result;
	int a=0;
	for(a=0; a<4; a++) {
		printf("%f \n", argp->Elem.Elem_val[a]);
	}

	return (void *) &result;
}

void *
operacjanamacierzach_1_svc(TrzyMac *argp, struct svc_req *rqstp)
{
	static char * result;

	/*
	 * insert server code here
	 */

	return (void *) &result;
}
}
