przedmiot TAS temat A nr_indeksu 396289 liczba_pkt 3 



Zadanie 1 -------------------------------------
	struct {
		u_int Elem_len;
		float *Elem_val;
	} Elem;
Po zadzia³aniu komend± rpcgen -aC na plik .x z float Elem <> zostaje wygenerowana podana wy¿ej struktura.

Zadanie 2 -------------------------------------
Wydruk z konsoli:
14

Kod po stronie serwera:

result = argp -> x1 + argp -> x2; 

Kod po stronie klienta:

	suma_1_arg.x1 = 4;
	suma_1_arg.x2 = 10;

	result_1 = suma_1(&suma_1_arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	printf("%d\n", *result_1);


Zadanie 3 -------------------------------------
Wydruk z konsoli :
1.000000 2.000000 3.000000 
4.000000 5.000000 6.000000 

kod po stronie serwera:

	float macierz, ile_wierszy;
	int i, rozmiar, ile_kolumn;

	rozmiar = argp -> Elem.Elem_len;
	ile_kolumn = argp -> IleK;

	float macierz2[rozmiar];

	for (i = 0; i < rozmiar; i++) {
 
		macierz2[i] = argp -> Elem.Elem_val[i];

	}	

	for (i = 0; i < rozmiar; i++) {

		printf("%f ", macierz2[i]);
		if ( (i+1) % ile_kolumn == 0 && i!= 0) printf("\n");

	}

	printf("\n");

kod po stronie klienta:

	pokazmacierz_1_arg.Elem.Elem_val = calloc (2*3, sizeof(float));
	pokazmacierz_1_arg.Elem.Elem_len = 2*3;
	pokazmacierz_1_arg.IleW = 2;
	pokazmacierz_1_arg.IleK = 3;

	pokazmacierz_1_arg.Elem.Elem_val[0] = 1;
	pokazmacierz_1_arg.Elem.Elem_val[1] = 2;
	pokazmacierz_1_arg.Elem.Elem_val[2] = 3;
	pokazmacierz_1_arg.Elem.Elem_val[3] = 4;
	pokazmacierz_1_arg.Elem.Elem_val[4] = 5;
	pokazmacierz_1_arg.Elem.Elem_val[5] = 6;


	result_1 = pokazmacierz_1(&pokazmacierz_1_arg, clnt);

	if (result_1 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	free(pokazmacierz_1_arg.Elem.Elem_val);


}
