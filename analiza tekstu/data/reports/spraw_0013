przedmiot TAS temat A nr_indeksu 396289 liczba_pkt 4 



Zadanie 1 -------------------------------------
	struct {
		u_int Elem_len;
		float *Elem_val;
	} Elem;
Po zadzia³aniu komend± rpcgen -aC na plik .x z float Elem <> zostaje wygenerowana podana wy¿ej struktura.

Zadanie 2 -------------------------------------
Wydruk z konsoli:
14

Kod po stronie serwera:

result = argp -> x1 + argp -> x2; 

Kod po stronie klienta:

	suma_1_arg.x1 = 4;
	suma_1_arg.x2 = 10;

	result_1 = suma_1(&suma_1_arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	printf("%d\n", *result_1);


Zadanie 3 -------------------------------------
Wydruk z konsoli :
1.000000 2.000000 3.000000 
4.000000 5.000000 6.000000 

kod po stronie serwera:

	float macierz, ile_wierszy;
	int i, rozmiar, ile_kolumn;

	rozmiar = argp -> Elem.Elem_len;
	ile_kolumn = argp -> IleK;

	float macierz2[rozmiar];

	for (i = 0; i < rozmiar; i++) {
 
		macierz2[i] = argp -> Elem.Elem_val[i];

	}	

	for (i = 0; i < rozmiar; i++) {

		printf("%f ", macierz2[i]);
		if ( (i+1) % ile_kolumn == 0 && i!= 0) printf("\n");

	}

	printf("\n");

kod po stronie klienta:

	pokazmacierz_1_arg.Elem.Elem_val = calloc (2*3, sizeof(float));
	pokazmacierz_1_arg.Elem.Elem_len = 2*3;
	pokazmacierz_1_arg.IleW = 2;
	pokazmacierz_1_arg.IleK = 3;

	pokazmacierz_1_arg.Elem.Elem_val[0] = 1;
	pokazmacierz_1_arg.Elem.Elem_val[1] = 2;
	pokazmacierz_1_arg.Elem.Elem_val[2] = 3;
	pokazmacierz_1_arg.Elem.Elem_val[3] = 4;
	pokazmacierz_1_arg.Elem.Elem_val[4] = 5;
	pokazmacierz_1_arg.Elem.Elem_val[5] = 6;


	result_1 = pokazmacierz_1(&pokazmacierz_1_arg, clnt);

	if (result_1 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	free(pokazmacierz_1_arg.Elem.Elem_val);

Zadanie 4 -------------------------------------
Wydruk z konsoli:

Mno¿enie
16.000000 19.000000 
36.000000 43.000000 
Dodawanie
5.000000 7.000000 
9.000000 11.000000 

kod po stronie serwera : 

void ustaw(int wiersz, int kolumna, Mac *macierz_wy, float mnozenie) {macierz_wy->Elem.Elem_val[macierz_wy->IleK*wiersz + kolumna] = mnozenie;}

float mnoz_elementy(Mac *m_1, Mac *m_2, int i, int j, int kol) {
  int k = 0;
  float wart = 0;
  for(k = 0; k < kol ; k++) wart = wart + (m_1->Elem.Elem_val[i*m_1->IleK + k] * m_2->Elem.Elem_val[k*m_2->IleK + j]);
  return wart;
}

Mac *
mnozmacierz_1_svc(TrzyMac *argp, struct svc_req *rqstp)
{
	static Mac  result;
	int wyjsciowe_wiersze, wyjsciowe_kolumny, macierz_1_kolumny, macierz_2_wiersze;

	wyjsciowe_wiersze = argp->M1.IleW;
	wyjsciowe_kolumny = argp->M2.IleK;

	macierz_1_kolumny = argp->M1.IleK;
	macierz_2_wiersze = argp->M2.IleW;

	result.IleW = wyjsciowe_wiersze;
	result.IleK = wyjsciowe_kolumny;
	result.Elem.Elem_len = wyjsciowe_kolumny*wyjsciowe_wiersze;
	result.Elem.Elem_val = calloc(wyjsciowe_wiersze*wyjsciowe_kolumny, sizeof(float));

	int wiersz, kolumna;
	for (wiersz = 0; wiersz < wyjsciowe_wiersze; wiersz++) {
	    for (kolumna = 0; kolumna < wyjsciowe_kolumny; kolumna++) {
		ustaw(wiersz, kolumna, &result, mnoz_elementy(&argp->M1, &argp->M2, wiersz, kolumna, macierz_1_kolumny));
	    }	  
	}
	printf("\n");
	return &result;
}

void dodawanie(int element, Mac *mac_wyj, Mac *mac_1, Mac *mac_2) {mac_wyj->Elem.Elem_val[element] = mac_1 -> Elem.Elem_val[element] + mac_2 -> Elem.Elem_val[element];}

Mac *
dodajmacierz_1_svc(TrzyMac *argp, struct svc_req *rqstp)
{

	static Mac  result;
	int wyjsciowe_kolumny, wyjsciowe_wiersze;

	wyjsciowe_kolumny = argp -> M1.IleK;
	wyjsciowe_wiersze = argp -> M1.IleW;

	result.Elem.Elem_len = wyjsciowe_kolumny * wyjsciowe_wiersze;
	result.Elem.Elem_val = calloc(result.Elem.Elem_len, sizeof(float));
	
	result.IleK = wyjsciowe_kolumny;	
	result.IleW = wyjsciowe_wiersze;
	
	int i = 0;

	for (i = 0; i < result.Elem.Elem_len; i++) dodawanie(i, &result, &argp->M1, &argp->M2);
	return &result;

}

Kod po stronie klienta :

	mnozmacierz_1_arg.M1.Elem.Elem_val = calloc (2*2, sizeof(float));
	mnozmacierz_1_arg.M2.Elem.Elem_val = calloc (2*2, sizeof(float));

	mnozmacierz_1_arg.M1.Elem.Elem_len = 2*2;
	mnozmacierz_1_arg.M2.Elem.Elem_len = 2*2;	

	mnozmacierz_1_arg.M1.IleW = 2;
	mnozmacierz_1_arg.M1.IleK = 2;	

	mnozmacierz_1_arg.M2.IleW = 2;
	mnozmacierz_1_arg.M2.IleK = 2;

	mnozmacierz_1_arg.M1.Elem.Elem_val[0] = 1.0;
	mnozmacierz_1_arg.M1.Elem.Elem_val[1] = 2.0;
	mnozmacierz_1_arg.M1.Elem.Elem_val[2] = 3.0;
	mnozmacierz_1_arg.M1.Elem.Elem_val[3] = 4.0;

	mnozmacierz_1_arg.M2.Elem.Elem_val[0] = 4.0;
	mnozmacierz_1_arg.M2.Elem.Elem_val[1] = 5.0;
	mnozmacierz_1_arg.M2.Elem.Elem_val[2] = 6.0;
	mnozmacierz_1_arg.M2.Elem.Elem_val[3] = 7.0;

	result_2 = mnozmacierz_1(&mnozmacierz_1_arg, clnt);

	if (result_2 == (Mac *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	printf("Mno¿enie\n");
	int i = 0;
	for (i = 0; i < 4 ; i++) drukuj_macierz(result_2, i, result_2->IleK);

	free(mnozmacierz_1_arg.M1.Elem.Elem_val);
	free(mnozmacierz_1_arg.M2.Elem.Elem_val);

	dodajmacierz_1_arg.M1.Elem.Elem_val = calloc (2*2, sizeof(float));
	dodajmacierz_1_arg.M2.Elem.Elem_val = calloc (2*2, sizeof(float));

	dodajmacierz_1_arg.M1.Elem.Elem_len = 2*2;
	dodajmacierz_1_arg.M2.Elem.Elem_len = 2*2;	

	dodajmacierz_1_arg.M1.IleW = 2;
	dodajmacierz_1_arg.M1.IleK = 2;	

	dodajmacierz_1_arg.M2.IleW = 2;
	dodajmacierz_1_arg.M2.IleK = 2;

	dodajmacierz_1_arg.M1.Elem.Elem_val[0] = 1.0;
	dodajmacierz_1_arg.M1.Elem.Elem_val[1] = 2.0;
	dodajmacierz_1_arg.M1.Elem.Elem_val[2] = 3.0;
	dodajmacierz_1_arg.M1.Elem.Elem_val[3] = 4.0;

	dodajmacierz_1_arg.M2.Elem.Elem_val[0] = 4.0;
	dodajmacierz_1_arg.M2.Elem.Elem_val[1] = 5.0;
	dodajmacierz_1_arg.M2.Elem.Elem_val[2] = 6.0;
	dodajmacierz_1_arg.M2.Elem.Elem_val[3] = 7.0;


	result_3 = dodajmacierz_1(&dodajmacierz_1_arg, clnt);

	if (result_3 == (Mac *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	printf("Dodawanie\n");
	int j = 0;
	for (j = 0; j < dodajmacierz_1_arg.M1.Elem.Elem_len ; j++) drukuj_macierz(result_3, j, result_3->IleK);

	free(mnozmacierz_1_arg.M1.Elem.Elem_val);
	free(mnozmacierz_1_arg.M2.Elem.Elem_val);

Plik macierz.x:

struct Macierz {
  float Elem <>;
  int IleW; int IleK;
};
typedef struct Macierz Mac;

struct TrzyMacierze { Mac M1; Mac M2; };
typedef struct TrzyMacierze TrzyMac;

program ProgMacierze {
  version VerMacierze {
    void PokazMacierz(Mac) = 1;
    Mac MnozMacierz(TrzyMac) = 2;
    Mac DodajMacierz(TrzyMac) = 3;
  } = 1;
} = 0x21001234;
}
