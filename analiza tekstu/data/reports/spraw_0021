przedmiot TAS temat B nr_indeksu 396309 liczba_pkt 3 



Zadanie 10 ------------------------------------------------

######## uruchomienie servera #############
s396309@pc22g:~/Desktop/TAS/temat B/SERWER$ java sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=2
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=2
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=3
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=4
sss: powolnaMetoda(); koniec dzialania !

########### uruchomienie klienta 1 ##################
s396309@pc22g:~/Desktop/TAS/temat B/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=1
kkk: oo2.powolnaMetoda()=1
kkk: oo2.powolnaMetoda()=2


########### uruchomienie klienta 2 ################
s396309@pc22g:~/Desktop/TAS/temat B/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=2
kkk: oo2.powolnaMetoda()=3
kkk: oo2.powolnaMetoda()=4


########### dodanie metody generujBlad ###############
############# server ############
s396309@pc22g:~/Desktop/TAS/temat B/SERWER$ java sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !

########### klient ##############
s396309@pc22g:~/Desktop/TAS/temat B/KLIENT$ java kkk
kkk: blad !!! RemoteException occurred in server thread; nested exception is: 
	java.rmi.RemoteException: sztucznie wygenerowany blad ...

Po dodaniu tej metody klient dostaje informacjê o b³êdzie.


Zadanie 11 -------------------------------------------------

############SERWER#################
s396309@pc23c:~/Desktop/TAS/temat B/producent_konsument2/SERWER$ java Server Stworzono liste
----po produkcji----
----Elementy w bufforze: 1----
0: 45
1: 0
2: 0
3: 0
4: 0
5: 0
6: 0
///////////////////////
----po produkcji----
----Elementy w bufforze: 2----
0: 45
1: 87
2: 0
3: 0
4: 0
5: 0
6: 0
///////////////////////
----po produkcji----
----Elementy w bufforze: 3----
0: 45
1: 87
2: 98
3: 0
4: 0
5: 0
6: 0
///////////////////////
----po produkcji----
----Elementy w bufforze: 4----
0: 45
1: 87
2: 98
3: 456
4: 0
5: 0
6: 0
///////////////////////
----po produkcji----
----Elementy w bufforze: 5----
0: 45
1: 87
2: 98
3: 456
4: 876
5: 0
6: 0
///////////////////////
----po konsumpcji----
----Elementy w bufforze: 4----
0: 87
1: 98
2: 456
3: 876
4: 0
5: 0
6: 0
///////////////////////
----po konsumpcji----
----Elementy w bufforze: 3----
0: 98
1: 456
2: 876
3: 0
4: 0
5: 0
6: 0
///////////////////////


########### PRODUCENT ###############
s396309@pc23c:~/Desktop/TAS/temat B/producent_konsument2/PRODUCENT$ java producent 45
45
Producent wyprodukowal liczbe 45
s396309@pc23c:~/Desktop/TAS/temat B/producent_kont 87
87
Producent wyprodukowal liczbe 87
s396309@pc23c:~/Desktop/TAS/temat B/producent_kont 98
98
Producent wyprodukowal liczbe 98
s396309@pc23c:~/Desktop/TAS/temat B/producent_kont 456
456
Producent wyprodukowal liczbe 456
s396309@pc23c:~/Desktop/TAS/temat B/producent_knt 876
876
Producent wyprodukowal liczbe 876


############# KONSUMENT ##############
s396309@pc23c:~/Desktop/TAS/temat B/producent_konsument2/KONSUMENT$ java konsument
 Skonsumowano liczbe45
s396309@pc23c:~/Desktop/TAS/temat B/producent_konsument2/KONSUMENT$ java konsument
 Skonsumowano liczbe87

##################### metoda produkcji #####################
	synchronized public void push(int elem)
	{
		if (isFull())
		{
			try
			{
				wait();
			} catch (Exception e) 
			{
				System.out.println(">>>" + e.getMessage());
			}
		} 
		buffer[elements] = elem;
		elements++;
		notifyAll();
		showBuffer("po produkcji");
	}


###################### metoda konsumpcji ########################
	synchronized public int pop()
	{
		if (isEmpty())
		{
			try
			{
				wait();
			} catch (Exception e)
			{
				System.out.println(">>>" + e.getMessage());
			}
		}
		int result = buffer[0];
		for (int i = 0; i < elements - 1; i++)
		{
			buffer[i] = buffer[i + 1];
		}
		buffer[elements - 1] = 0;

		elements_in_buffer--;
		notifyAll();
		showBuffer("po konsumpcji");

		return result;
	}

Zadanie 17 ------------------------------------------------

Serializacja javowa u¿ywana w RMI wymaga klienta jak i serwera naspisanego w javie. Nie mo¿na zatem komunikowaæ siê w innym jêzyku. RMI umo¿liwia uruchomienie implementacji na oddzielnej maszynie javy.
Java u¿ywa serializacji XML, która jest czytelna dla cz³owieka. Pewnym ograniczeniem w javie jest ilo¶æ danych jak± mo¿emy zaalokowaæ w pamiêci maszyny wirtualnej. W javie te¿ wszystkie typy danych s± serializowane.

W XDR serwer i klient musz± znaæ strukturê danych.
XDR jest wykorzystywany w wielu systemach jak:
Network File System (protocol)
ZFS File System
NDMP Network Data Management Protocol
Open Network Computing Remote Procedure Call
Legato NetWorker backup software (later sold by EMC)
NetCDF (a scientific data format)
The R language and environment for statistical computing
[...]

XDR posiada nastêpuj±ce typy danych:
boolean
int ? 32-bit integer
unsigned int ? unsigned 32-bit integer
hyper ? 64-bit integer
unsigned hyper ? unsigned 64-bit integer
IEEE float
IEEE double
quadruple (new in RFC1832)
enumeration
structure
string
fixed length array
variable length array
union ? discriminated union
fixed length opaque data
variable length opaque data
void 
optional 

¬ród³a:
https://en.wikipedia.org/wiki/External_Data_Representation
http://docstore.mik.ua/orelly/java-ent/dist/ch03_06.htm
http://wazniak.mimuw.edu.pl/index.php?title=PO_Serializacja#Serializacja_do_postaci_XML

}
