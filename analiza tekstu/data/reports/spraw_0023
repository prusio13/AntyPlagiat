przedmiot TAS temat B nr_indeksu 384119 liczba_pkt 7 



Zadanie 10 -------------------------------------
(

		1.  -------------------------------------
Modyfikacja sss.java

  // -------- implementacja interf OdleglyObiekt ----------

  private OdleglyObiekt drugiObiekt;
  public OdleglyObiekt drugiObiekt() throws RemoteException
  {
    return drugiObiekt;
  }

  int licznik=0;
  public int powolnaMetoda() throws RemoteException
  {
    licznik++;
    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
    for (int i=1; i < 150; ++i) {
        System.out.println("Numer w±tku: " + Thread.currentThread().getId());
        try {Thread.sleep(200);} catch(Exception e){};
    }
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }

s384119@pc23k:~/Desktop/TAS/LematB/10/1/SERWER$ javac sss.java
Note: sss.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s384119@pc23k:~/Desktop/TAS/LematB/10/1/SERWER$ rmic OdleglaKlasa
Warning: generation and use of skeletons and static stubs for JRMP
is deprecated. Skeletons are unnecessary, and static stubs have
been superseded by dynamically generated stubs. Users are
encouraged to migrate away from using rmic to generate skeletons and static
stubs. See the documentation for java.rmi.server.UnicastRemoteObject.
s384119@pc23k:~/Desktop/TAS/LematB/10/1/SERWER$ 

W nowej wersji nie jest potrzebna klasa  OdleglaKlasa_Skel.class zaetm nie jest tworzona
kopiujemy kody klas: OdleglyObiekt.class oraz OdleglaKlasa_Stub.class do katalogu KLIENT

odpalamy rmiregistry; rmiregistry musi posiadaæ dostêp do klas SERWERA poprzez zmienn± ¶rodowiskow± CLASSPATH 

s384119@pc23k:~/Desktop/TAS/LematB/10/1/SERWER$ rmiregistry

s384119@pc23k:~/Desktop/TAS/LematB/10/1/SERWER$ java sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!

s384119@pc23k:~/Desktop/TAS/LematB/10/1/KLIENT$ javac kkk.java
 ----- klient 1
s384119@pc23k:~/Desktop/TAS/LematB/10/1/KLIENT$ java kkk
^Cs384119@pc23k:~/Desktop/TAS/LematB/10/1/KLIENT$ 
 ----- klient 2
s384119@pc23k:~/Desktop/TAS/LematB/10/1/KLIENT$ java kkk
^Cs384119@pc23k:~/Desktop/TAS/LematB/10/1/KLIENT$ 
------- serwer 

s384119@pc23k:~/Desktop/TAS/LematB/10/1/SERWER$ java sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
Numer w±tku: 16
Numer w±tku: 16
Numer w±tku: 16
Numer w±tku: 16
Numer w±tku: 16
Numer w±tku: 16
Numer w±tku: 16
Numer w±tku: 16
Numer w±tku: 16
Numer w±tku: 16
sss: powolnaMetoda(); licznik=2
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
Numer w±tku: 16
Numer w±tku: 17
sss: powolnaMetoda(); koniec dzialania !
Numer w±tku: 17
Numer w±tku: 17
Numer w±tku: 17
Numer w±tku: 17
Numer w±tku: 17
Numer w±tku: 17
Numer w±tku: 17
Numer w±tku: 17
Numer w±tku: 17
sss: powolnaMetoda(); koniec dzialania !

		2.  -------------------------------------

Modyfikacja sss.java

komentujemy w sss.java // UnicastRemoteObject.exportObject(drugiObiekt);

s384119@pc23k:~/Desktop/TAS/LematB/10/2/SERWER$ javac sss.java
Note: sss.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s384119@pc23k:~/Desktop/TAS/LematB/10/2/SERWER$ rmic OdleglaKlasa
Warning: generation and use of skeletons and static stubs for JRMP
is deprecated. Skeletons are unnecessary, and static stubs have
been superseded by dynamically generated stubs. Users are
encouraged to migrate away from using rmic to generate skeletons and static
stubs. See the documentation for java.rmi.server.UnicastRemoteObject.
s384119@pc23k:~/Desktop/TAS/LematB/10/2/SERWER$ 

kopiujemy kody klas: OdleglyObiekt.class oraz OdleglaKlasa_Stub.class do katalogu KLIENT
s384119@pc23k:~/Desktop/TAS/LematB/10/2/SERWER$ rmiregistry

s384119@pc23k:~/Desktop/TAS/LematB/10/2/SERWER$ java sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !
^Cs384119@pc23k:~/Desktop/TAS/LematB/10/2/SERWER$ 

s384119@pc23k:~/Desktop/TAS/LematB/10/2/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=1
kkk: blad !!! error unmarshalling return; nested exception is: 
	java.lang.ClassNotFoundException: OdleglaKlasa (no security manager: RMI class loader disabled)
s384119@pc23k:~/Desktop/TAS/LematB/10/2/KLIENT$ 

W takiej sytuacji nastêpuje próba skopiowania obiektu na maszynê, lecz brakuje klasy tego obiektu na maszynie klienta! Nale¿y wiêc dostarczyæ plik OdleglaKlasa.class do katalogu klienta.

kopiujemy kody klasy: OdleglaKlasa.class do katalogu KLIENT

^Cs384119@pc23k:~/Desktop/TAS/LematB/10/2/SERWER$ java sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
...
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=2
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
...
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
Numer w±tku: 1
sss: powolnaMetoda(); koniec dzialania !
^Cs384119@pc23k:~/Desktop/TAS/LematB/10/2/SERWER$ 

Gdy eksportujemy obiekt to kod wykouje siê na serwerze, a wyj¶cie jest wy¶wietlane po stronie serwera. Gdy nie eksportujemy obiektu, wykonanie metody nastêpuje po stronie klienta i wyj¶cie jest wy¶wietlane po stronie klienta:

		3.  -------------------------------------
Modyfikacja sss.java

Dodajemy wyj±tek do powolnametoda()

    public void generujeBlad() throws RemoteException
    {
        throw new RemoteException("sztucznie wygenerowany blad ...");
    }

s384119@pc23k:~/Desktop/TAS/LematB/10/3/SERWER$ rmiregistry

s384119@pc23k:~/Desktop/TAS/LematB/10/3/SERWER$ java sss

s384119@pc23k:~/Desktop/TAS/LematB/10/3/KLIENT$ java kkk
kkk: blad !!! RemoteException occurred in server thread; nested exception is: 
	java.rmi.RemoteException: sztucznie wygenerowany blad ...

Widzimy ¿e wyj±tek wypisuje siê na kliencie a nie na serwerze.

)

Zadanie 11 -------------------------------------
(
    BuforImpl.java
import java.io.Serializable;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class BuforImpl implements OdleglyBufor, Serializable {

	private int[] buff = new int[50];

	int head = 0;
	int tail = 0;

	BuforImpl() {
		try {
	      UnicastRemoteObject.exportObject(this);
	      Naming.rebind(String.valueOf(hashCode()), this);
	    } catch(Exception e) {
			e.printStackTrace();
	    }
	}

	@Override
	public synchronized void AddElement(int el) throws RemoteException{
		if (state() > 48) {
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        notify();
		buff[tail] = el;
		tailNext();
        System.out.println("Wstawiono element: " + el + " W±tek: " + Thread.currentThread().getId());
    }

	@Override
	public synchronized int DownloadElement() throws RemoteException {
        if (state() == 0) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
        notify();
		int result = buff[head];
		headNext();
        System.out.println("Pobrano element: " + result + " W±tek: " + Thread.currentThread().getId());
        return result;
	}

	private int state() {
		return (50 + (tail - head)) % 50;
	}

	private void tailNext() {
		if (tail < 49) tail++;
		else tail = 0;
	}

	private void headNext() {
		if (head < 49) head++;
		else head = 0;
	}

	public boolean equals(Object object) {
		if (this == object) return true;
		if (object == null || getClass() != object.getClass()) return false;
		if (!super.equals(object)) return false;

		BuforImpl bufor = (BuforImpl) object;

		if (head != bufor.head) return false;
		if (tail != bufor.tail) return false;
		if (!java.util.Arrays.equals(buff, bufor.buff)) return false;

		return true;
	}

	public int hashCode() {
		int result = super.hashCode();
		result = 31 * result + (buff != null ? java.util.Arrays.hashCode(buff) : 0);
		result = 31 * result + head;
		result = 31 * result + tail;
		return result;
	}

}
------------------------------------------------
    OdleglyBufor.java
import java.rmi.*;

interface OdleglyBufor extends Remote {
    void AddElement(int el) throws RemoteException;
    int DownloadElement() throws RemoteException;
}
------------------------------------------------
    TworzOdlegleBufory.java
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface TworzOdlegleBufory extends Remote {
	OdleglyBufor nowyOdleglyBufor() throws RemoteException;
}
------------------------------------------------
    TworzOdlegleBuforyImpl.java
import java.io.Serializable;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

class TworzOdlegleBuforyImpl implements TworzOdlegleBufory, Serializable {

    public TworzOdlegleBuforyImpl() {
        super();
        try {
	      UnicastRemoteObject.exportObject(this);
	      Naming.rebind("producent_konsument", this);
	    } catch(Exception e) {
			e.printStackTrace();
	    }
    }

    public OdleglyBufor nowyOdleglyBufor() throws RemoteException{
        return new BuforImpl();
    };
}
------------------------------------------------
    sss.java
public class Server {
    public static void main(String[] args) {
        new TworzOdlegleBuforyImpl();
    }
}
------------------------------------------------
    kkk.java
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;

public class Client {
    public static void main(String[] args) {
        try {
            TworzOdlegleBufory fabryka = (TworzOdlegleBufory) Naming.lookup(
                    "rmi://localhost/Producent_Konsument");
            final OdleglyBufor bufor = fabryka.nowyOdleglyBufor();


            new Thread(() -> { receiving(bufor); }).start();
            Thread.sleep(6);
            sending(bufor);
        } catch (RemoteException | MalformedURLException | InterruptedException | NotBoundException e) {
            System.err.println("kkk: blad !!! " + e.getMessage());
        }
    }

    private static void sending(OdleglyBufor bufor) {
        for (int i = 1; i <= 1000; ++i) {
            try {
                bufor.AddElement(i);
                Thread.sleep(100);
            } catch (InterruptedException | RemoteException e) {
                e.printStackTrace();
            }
        }
    }

    private static void receiving(OdleglyBufor bufor) {
        while (true) {
            try {
                System.out.println(bufor.DownloadElement());
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
    }
}
------------------------------------------------

s384119@pc23d:~/Desktop/TAS/LematB/11$  java sss
        Wstawiono element: 0 W±tek: 17
        Pobrano element: 0 W±tek: 16
        Wstawiono element: 1 W±tek: 17
        Pobrano element: 1 W±tek: 16
        Wstawiono element: 2 W±tek: 17
        Pobrano element: 2 W±tek: 16
        Wstawiono element: 3 W±tek: 17
        Pobrano element: 3 W±tek: 16
        Wstawiono element: 4 W±tek: 17
        Pobrano element: 4 W±tek: 16
        Wstawiono element: 5 W±tek: 17
        Pobrano element: 5 W±tek: 16
        Wstawiono element: 6 W±tek: 17
        Pobrano element: 6 W±tek: 16
        Wstawiono element: 7 W±tek: 17
        Pobrano element: 7 W±tek: 16
        Wstawiono element: 8 W±tek: 17
        Pobrano element: 8 W±tek: 16
        ...

s384119@pc23d:~/Desktop/TAS/LematB/11$  java kkk
        0
        1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
		24
		25
		26
		27
		28
		29
		30
		31
		32
		33
        ...

)

Zadanie 12 -------------------------------------
(
		BuforImpl.java
import java.io.Serializable;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

public class BuforImpl implements OdleglyBufor, Serializable {

	private int[] buff = new int[50];

	int head = 0;
	int tail = 0;

	BuforImpl() {
		try {
	      UnicastRemoteObject.exportObject(this);
	      Naming.rebind(String.valueOf(hashCode()), this);
	    } catch(Exception e) {
			e.printStackTrace();
	    }
	}

	BuforImpl(String name) {
		try {
			UnicastRemoteObject.exportObject(this);
			Naming.rebind(String.valueOf(name), this);
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public synchronized void AddElement(int el) throws RemoteException{
		if (state() > 48) {
            try {
                wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        notify();
		buff[tail] = el;
		tailNext();
        System.out.println("Wstawiono element: " + el + " W±tek: " + Thread.currentThread().getId());
    }

	@Override
	public synchronized int DownloadElement() throws RemoteException {
        if (state() == 0) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
        notify();
		int result = buff[head];
		headNext();
        System.out.println("Pobrano element: " + result + " W±tek: " + Thread.currentThread().getId());
        return result;
	}

	private int state() {
		return (50 + (tail - head)) % 50;
	}

	private void tailNext() {
		if (tail < 49) tail++;
		else tail = 0;
	}

	private void headNext() {
		if (head < 49) head++;
		else head = 0;
	}

	public boolean equals(Object object) {
		if (this == object) return true;
		if (object == null || getClass() != object.getClass()) return false;
		if (!super.equals(object)) return false;

		BuforImpl bufor = (BuforImpl) object;

		if (head != bufor.head) return false;
		if (tail != bufor.tail) return false;
		if (!java.util.Arrays.equals(buff, bufor.buff)) return false;

		return true;
	}

	public int hashCode() {
		int result = super.hashCode();
		result = 31 * result + (buff != null ? java.util.Arrays.hashCode(buff) : 0);
		result = 31 * result + head;
		result = 31 * result + tail;
		return result;
	}

}
------------------------------------------------
		OdleglyBufor.java
import java.rmi.*;

interface OdleglyBufor extends Remote {
    void AddElement(int el) throws RemoteException;
    int DownloadElement() throws RemoteException;
}
------------------------------------------------
		TworzOdlegleBufory.java
import java.rmi.Remote;
import java.rmi.RemoteException;

public interface TworzOdlegleBufory extends Remote {
	OdleglyBufor nowyOdleglyBufor() throws RemoteException;
    OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException;
}
------------------------------------------------
		TworzOdlegleBuforyImpl.java
import java.io.Serializable;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

class TworzOdlegleBuforyImpl implements TworzOdlegleBufory, Serializable {

    public TworzOdlegleBuforyImpl() {
        super();
        try {
	      UnicastRemoteObject.exportObject(this);
	      Naming.rebind("producent_konsument", this);
	    } catch(Exception e) {
			e.printStackTrace();
	    }
    }

    public OdleglyBufor nowyOdleglyBufor() throws RemoteException{
        return new BuforImpl();
    }

    @Override
    public OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException {
        try {
            return (OdleglyBufor) Naming.lookup(
                    "rmi://localhost/" + nazwa);
        } catch (NotBoundException e) {
            return new BuforImpl(nazwa);
        } catch (MalformedURLException | RemoteException e) {
            e.printStackTrace();
        }
        return null;
    }
}
------------------------------------------------
		sss.java
public class Server {
    public static void main(String[] args) {
        new TworzOdlegleBuforyImpl();
    }
}
------------------------------------------------
		kkkSending.java
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;


public class ClientSending {
    public static void main(String[] args) {
        try {
            TworzOdlegleBufory fabryka = (TworzOdlegleBufory) Naming.lookup(
                    "rmi://localhost/producent_konsument");
            final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa(args[0]);

            sending(bufor);
        } catch (RemoteException | MalformedURLException | NotBoundException e) {
            System.err.println("kkk: blad !!! " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void sending(OdleglyBufor bufor) {
        for (int i = 1; i <= 1000; ++i) {
            try {
                bufor.AddElement(i);
                Thread.sleep(100);
            } catch (InterruptedException | RemoteException e) {
                e.printStackTrace();
            }
        }
    }
}
------------------------------------------------
		kkkReceiving.java
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;


public class ClientReceiving {
    public static void main(String[] args) {
        try {
            TworzOdlegleBufory fabryka = (TworzOdlegleBufory) Naming.lookup(
                    "rmi://localhost/producent_konsument");
            final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa(args[0]);

            receiving(bufor);
        } catch (RemoteException | MalformedURLException | NotBoundException e) {
            System.err.println("kkk: blad !!! " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void receiving(OdleglyBufor bufor) {
        while (true) {
            try {
                System.out.println(bufor.DownloadElement());
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
    }
}
------------------------------------------------



s384119@pc23d:~/Desktop/TAS/LematB/12$ java sss
        Wstawiono element: 1 W±tek: 16
        Wstawiono element: 2 W±tek: 16
        Wstawiono element: 3 W±tek: 16
        Wstawiono element: 4 W±tek: 16
        Wstawiono element: 5 W±tek: 16
        Wstawiono element: 6 W±tek: 16
        Wstawiono element: 7 W±tek: 16
        Wstawiono element: 8 W±tek: 16
        Wstawiono element: 9 W±tek: 16
        Wstawiono element: 10 W±tek: 16
        Wstawiono element: 11 W±tek: 16
        Wstawiono element: 12 W±tek: 16
        Wstawiono element: 13 W±tek: 16
        Wstawiono element: 14 W±tek: 16
        Wstawiono element: 15 W±tek: 16
        Wstawiono element: 16 W±tek: 16
        Wstawiono element: 17 W±tek: 16
        Wstawiono element: 18 W±tek: 16
        Wstawiono element: 19 W±tek: 16
        Wstawiono element: 20 W±tek: 16
        Wstawiono element: 21 W±tek: 16
        Wstawiono element: 22 W±tek: 16
        Wstawiono element: 23 W±tek: 16
        Wstawiono element: 24 W±tek: 16
        Wstawiono element: 25 W±tek: 16
        Wstawiono element: 26 W±tek: 16
        Wstawiono element: 27 W±tek: 16
        Wstawiono element: 28 W±tek: 16
        Wstawiono element: 29 W±tek: 16
        Wstawiono element: 30 W±tek: 16
        Wstawiono element: 31 W±tek: 16
        Wstawiono element: 32 W±tek: 16
        Wstawiono element: 33 W±tek: 16
        Wstawiono element: 34 W±tek: 16
        Wstawiono element: 35 W±tek: 16
        Wstawiono element: 36 W±tek: 16
        Wstawiono element: 37 W±tek: 16
        Wstawiono element: 38 W±tek: 16
        Wstawiono element: 39 W±tek: 16
        Wstawiono element: 40 W±tek: 16
        Pobrano element: 1 W±tek: 17
        Pobrano element: 2 W±tek: 17
        Pobrano element: 3 W±tek: 17
        Pobrano element: 4 W±tek: 17
        Pobrano element: 5 W±tek: 17
        Pobrano element: 6 W±tek: 17
        Pobrano element: 7 W±tek: 17
        Pobrano element: 8 W±tek: 17
        Pobrano element: 9 W±tek: 17
        Pobrano element: 10 W±tek: 17
        Pobrano element: 11 W±tek: 17
        Pobrano element: 12 W±tek: 17
        Pobrano element: 13 W±tek: 17
        Pobrano element: 14 W±tek: 17
        Pobrano element: 15 W±tek: 17
        Pobrano element: 16 W±tek: 17
        Pobrano element: 17 W±tek: 17
        Pobrano element: 18 W±tek: 17
        Pobrano element: 19 W±tek: 17
        Pobrano element: 20 W±tek: 17
        Pobrano element: 21 W±tek: 17
        Pobrano element: 22 W±tek: 17
        Pobrano element: 23 W±tek: 17
        Pobrano element: 24 W±tek: 17
        Pobrano element: 25 W±tek: 17
        Pobrano element: 26 W±tek: 17
        Pobrano element: 27 W±tek: 17
        Pobrano element: 28 W±tek: 17
        Pobrano element: 29 W±tek: 17
        Pobrano element: 30 W±tek: 17
        Pobrano element: 31 W±tek: 17
        Pobrano element: 32 W±tek: 17
        Pobrano element: 33 W±tek: 17
        Pobrano element: 34 W±tek: 17
        Pobrano element: 35 W±tek: 17
        Pobrano element: 36 W±tek: 17
        Pobrano element: 37 W±tek: 17
        Pobrano element: 38 W±tek: 17
        Pobrano element: 39 W±tek: 17
        Pobrano element: 40 W±tek: 17
        Wstawiono element: 41 W±tek: 16
        Pobrano element: 41 W±tek: 17
        Wstawiono element: 42 W±tek: 16
        Pobrano element: 42 W±tek: 17
        Wstawiono element: 43 W±tek: 16
        Pobrano element: 43 W±tek: 17
        Wstawiono element: 44 W±tek: 16
        Pobrano element: 44 W±tek: 17
        Wstawiono element: 45 W±tek: 16
        Pobrano element: 45 W±tek: 17
        Wstawiono element: 46 W±tek: 16
        Pobrano element: 46 W±tek: 17
        Wstawiono element: 47 W±tek: 16
        ...

s384119@pc23d:~/Desktop/TAS/LematB/12$ java kkkSending moj_bufor

s384119@pc23d:~/Desktop/TAS/LematB/12$ java kkkReceiving moj_bufor
        1
        2
        3
        4
        5
        6
        7
        8
        9
        10
        11
        12
        13
        14
        15
        16
        17
        18
        19
        20
        21
        22
        23
		24
		25
		26
		27
		28
		29
		30
		31
		32
		33
        ...
)

Zadanie 13 -------------------------------------
(
KOD:
#KLIENT-----------------------------------------  

kkk.java
/*
eksperymenty z RMI (klient)
*/

import java.rmi.*;
import java.rmi.registry.*;

public class kkk
{
  public static void main(String args[])
  {
    System.setSecurityManager(new RMISecurityManager());

    try {
      OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
        "rmi://localhost/przyklad_rmi4");
      PrzykladowaKlasa2 pk2 = new PrzykladowaKlasa2();
      PrzykladowaKlasa pk1 = new PrzykladowaKlasa();
      PrzykladowaKlasa result = oo.eksperyment1(pk1, pk2);

      System.out.println(result.pokaz());
      
    } catch(Exception e) {
      System.err.println("kkk: blad !!! "+e.getMessage());
    }
  }
}


------------------------------------------------   
plik.polityka   
grant { permission java.security.AllPermission; };        
------------------------------------------------
PrzykladowaKlasa2.java
import java.util.Date;

public class PrzykladowaKlasa2 extends PrzykladowaKlasa{
    private final Date data;
   
    public PrzykladowaKlasa2(){
	super();
	data = new Date();
	System.out.println("Utworzono instancje PrzykladowaKlasa2");
    }

    @Override
    public String pokaz(){
	return super.pokaz() + ", moja data utworzenia to " + data;
    }
}

------------------------------------------------
------------------------------------------------
#SERWER-----------------------------------------

OdleglyObiekt.java
/*
eksperymenty z RMI (def zdalnego interfejsu)
*/

import java.rmi.*;

public interface OdleglyObiekt extends Remote{
    OdleglyObiekt drugiObiekt() throws RemoteException;
    int powolnaMetoda() throws RemoteException;
    PrzykladowaKlasa eksperyment1(PrzykladowaKlasa pk1, PrzykladowaKlasa pk2) throws RemoteException;
}
------------------------------------------------ 
plik.polityka 
grant { permission java.security.AllPermission; };       
------------------------------------------------
PrzykladowaKlasa.java
import java.util.Random;
import java.io.Serializable;

public class PrzykladowaKlasa implements Serializable{
    private final String nazwa;
    private final int numer;

    public PrzykladowaKlasa(){
	nazwa = "Instancja klasy PrzykladowaKlasa";
	numer = new Random(System.currentTimeMillis()).nextInt();
	
	System.out.println("Utworzono instancje klasy PrzykladowaKlasa");
    }

    public String pokaz(){
	return "moja nazwa to " + nazwa + ", a moj numer to " + numer;
    }
}
------------------------------------------------  
sss.java
/*
eksperymenty z RMI (serwer)
*/

import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*;
import java.io.*;
import java.util.Random;


class OdleglaKlasa
implements OdleglyObiekt, Serializable
{
  OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
        // tu decydujemy ze obiekt bedzie "zdalny"
        // exportObject() musi byc PRZED rebind() !!!
      Naming.rebind(s,this);
        // rejestruje sie w Naming Service (= rmiregistry)
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }

    // tworzymy drugi obiekty ...
    drugiObiekt= new OdleglaKlasa();
    UnicastRemoteObject.exportObject(drugiObiekt);
      // tu decydujemy ze drugi obiekt bedzie "odlegly"

    System.out.println("sss: OdleglaKlasa(String); ok");
  }
  OdleglaKlasa() throws RemoteException
  {
    super();
    System.out.println("sss: OdleglaKlasa(); ok");
  }

  // -------- implementacja interf OdleglyObiekt ----------

  private OdleglyObiekt drugiObiekt;
  public OdleglyObiekt drugiObiekt() throws RemoteException
  {
    return drugiObiekt;
  }

  int licznik=0;
  public int powolnaMetoda() throws RemoteException
  {
    licznik++;
    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
    try {Thread.sleep(200);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }

    public PrzykladowaKlasa eksperyment1(PrzykladowaKlasa pk1, PrzykladowaKlasa pk2){
	System.out.println(pk1.pokaz());
	System.out.println(pk2.pokaz());
	return (new Random(System.currentTimeMillis()).nextInt() % 2 == 0) ? pk1 : pk2;
    }
  // ------------------------------------------------------
}

public class sss
{
  public static void main(String args[])
  {
    System.setSecurityManager(new RMISecurityManager());

    try {
      System.out.println("sss: zaczynam tworzyc obiekty ...");
      OdleglyObiekt oo= new OdleglaKlasa("przyklad_rmi4");
      System.out.println("sss: obiekty utworzone !!!");
    } catch(Exception e) {
      System.err.println("sss: blad !!! "+e.getMessage());
    }
  }
}
------------------------------------------------
------------------------------------------------
s384119@pc23d:~/public_html/TAS/LematB/13/SERWER$ javac PrzykladowaKlasa.java
s384119@pc23d:~/public_html/TAS/LematB/13/SERWER$ javac sss.java 
Note: sss.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s384119@pc23d:~/public_html/TAS/LematB/13/SERWER$ rmic OdleglaKlasa
Warning: generation and use of skeletons and static stubs for JRMP
is deprecated. Skeletons are unnecessary, and static stubs have
been superseded by dynamically generated stubs. Users are
encouraged to migrate away from using rmic to generate skeletons and static
stubs. See the documentation for java.rmi.server.UnicastRemoteObject.
s384119@pc23d:~/public_html/TAS/LematB/13/SERWER$ 

Kopiuje do KLIENT: OdleglyObiekt.class  PrzykladowaKlasa.class

s384119@pc23d:~/public_html/TAS/LematB/13/KLIENT$ javac PrzykladowaKlasa2.java 
s384119@pc23d:~/public_html/TAS/LematB/13/KLIENT$ javac kkk.java 
Note: kkk.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s384119@pc23d:~/public_html/TAS/LematB/13/KLIENT$ 



W przeciwieñstwie do poprzednich przyk³adów, teraz po kompilacji rmic, nie przenoszê OdleglaKlasa... z serwera do katalogu klienta. Nie umieszczam tak¿e pliku class klasy PrzykladowaKlasa2 po stronie serwera. Zamiast tego te pliki class umie¶ci³em na serwerze www, pod adresem: https://s384119.students.wmi.amu.edu.pl/TAS/LematB/13/ ; oraz da³em odpowiednie uprawnienia


s384119@pc23d:~/public_html/TAS/LematB/13/SERWER$ rmiregistry

s384119@pc23d:~/public_html/TAS/LematB/13/SERWER$ java -Djava.security.policy=ik.polityka -Djava.rmi.server.codebase=https://s384119.students.wmi.amu.edu.pl/TAS/LematB/13/ sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!

s384119@pc23d:~/public_html/TAS/LematB/13/KLIENT$ java -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s384119.students.wmi.amu.edu.pl/TAS/LematB/13/ kkk

#Gdy zwracany jest obiekt klasy PrzykladowaKlasa:

Serwer:------------------------------------------
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 1104600740
moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 1104600740, moja data utworzenia to Thu Nov 19 14:41:25 CET 2015

Klient:------------------------------------------
s384119@pc23d:~/public_html/TAS/LematB/13/KLIENT$ java -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s384119.students.wmi.amu.edu.pl/TAS/LematB/13/ kkk
Utworzono instancje klasy PrzykladowaKlasa
Utworzono instancje PrzykladowaKlasa2
Utworzono instancje klasy PrzykladowaKlasa
moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 1104600740
s384119@pc23d:~/public_html/TAS/LematB/13/KLIENT$ 

#Gdy zwracany jest obiekt klasy PrzykladowaKlasa2:

Serwer:------------------------------------------
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -1237243222
moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -1237243222, moja data utworzenia to Thu Nov 19 14:40:41 CET 2015

Klient:------------------------------------------
s384119@pc23d:~/public_html/TAS/LematB/13/KLIENT$ java -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s384119.students.wmi.amu.edu.pl/TAS/LematB/13/ kkk
Utworzono instancje klasy PrzykladowaKlasa
Utworzono instancje PrzykladowaKlasa2
Utworzono instancje klasy PrzykladowaKlasa
moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -1237243222, moja data utworzenia to Thu Nov 19 14:40:41 CET 2015


)

Zadanie 14 -------------------------------------
(
KOD:
#KLIENT-----------------------------------------  
Client.java
import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Client{
  public static void main(String args[]){
      //System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforowow fabryka = (FabrykaBuforowow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBufor(10);



	  Runnable producent = new Runnable(){
		  public void run(){
		      try{
			  int x;
			  Random random = new Random(System.currentTimeMillis());
			  while(true){
			      x = random.nextInt(100);
			      bufor.wstaw(x);
			      Thread.sleep(random.nextInt(1000));
			  }
		      }catch(RemoteException ex){
			  System.out.println("Blad Remote: " + ex.getMessage());
		      }catch(InterruptedException ex){
			  System.out.println("Zakonczono produkcje");
			  return;
		      }
		  }
	  };
	  
	  Runnable konsument = new Runnable(){
		  public void run(){
		      try{
			  Random random = new Random(System.currentTimeMillis());
			  while(true){
			      System.out.println("pobrano " + bufor.pobierz());
			      Thread.sleep(random.nextInt(1000));
			  }
		      }catch(RemoteException ex){
			  System.out.println("Blad Remote: " + ex.getMessage());
		      }catch(InterruptedException ex){
			  System.out.println("Zakonczono konsumpcje");
			  return;
		      }
		  }
	  };

      	  final Thread produkuj = new Thread(producent);
	  final Thread konsumuj = new Thread(konsument);
	  
	  Runnable zakoncz = new Runnable(){
		  public void run(){
		      produkuj.interrupt();
		      konsumuj.interrupt();
		  }
	  };

          Runtime.getRuntime().addShutdownHook(new Thread(zakoncz));

		
	  produkuj.start();
	  konsumuj.start();
	  
     
    } catch(Exception e) {
      System.err.println("Client: blad !!! "+e.getMessage());
    }
  }
}
------------------------------------------------       
plik.polityka    
grant { permission java.security.AllPermission; }; 
------------------------------------------------
Laptop.java     
import java.io.Serializable;

public class Laptop implements Serializable{

    private final String model;
    private final String procesor;
    private final String ram;
    private final String grafika;
    private final String dysk;

    public Laptop(String mod,String proc,String ra,String gr,String dy){

	model = mod;
	procesor = proc;
    ram = ra;
    grafika = gr;
    dysk = dy;
    }

    @Override
    public String toString(){
	return "(Laptop: " + model +", procesor = " + procesor + ", ram = " + ram + ", grafika = " + grafika + ", dysk = " + dysk + ")";
    }
}
------------------------------------------------
Manga.java     
import java.io.Serializable;

public class Manga implements Serializable{
    private final int liczbaStron;
    private final String tytul;
    private final String autor;
    private final String przeklad;

    public Manga(int l, String tyt, String a, String prze){
	liczbaStron = l;
	tytul = tyt;
	autor = a;
	przeklad = prze;
    }

    @Override
    public String toString(){
	return "(Manga: " + autor + ", " + tytul + ", " + przeklad + ", " + liczbaStron + "str)";
    }
}
------------------------------------------------
Motor.java     
import java.io.Serializable;

public class Motor implements Serializable{
    private final int moc;
    private final int vMax;
    private final String model;

    public Motor(int m, int v, String mod){
	moc = m;
	vMax = v;
	model = mod;
    }

    @Override
    public String toString(){
	return "(Motor: " + model +", moc = " + moc + ", vMax = " + vMax + ")";
    }
}
------------------------------------------------
Producent.java   
import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Producent{
  public static void main(String args[]){
      System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforowow fabryka = (FabrykaBuforowow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons2");
	  
// Manga
	  String[] tytuly = {
	      "Naruto", 
	      "Afro Samurai", 
	      "Dragon Ball GT", 
	      "Bleach"  
	  };

	  String[] autorzy = {
	      "Masashi Kishimoto", 
	      "Takashi Okazaki", 
	      "Akira Toriyama", 
	      "Tite Kubo"  
	  };
	  String[] przeklady = {
	      "Polski", 
	      "Japoñski", 
	      "Angielski"
	  };

// Motor
      String[] motory = {
	      "Honda Grom",
	      "Star Bolt",
	      "Suzuki V-Strom 650 ABS",
	      "Indian Chief Classic",
		  "Yamaha FZ-09",
		  "Kawasaki Ninja 1000" 
	  };

// Laptop
	  String[] modele = {
	      "Apple MacBook Pro",
	      "Dell XPS 15",
	      "Dell Alienware 15",
	      "MSI GS60"
	  };
	  String[] procesory = {
	      "i7-5700HQ",
	      "i7-6700HQ",
	      "i7-6900HQ"
	  };

	  String[] ramy = {
	      "16GB",
	      "8GB",
	      "12GB"
	  };
	  String[] grafiki = {
	      "HD5600",
	      "GTX960M",
	      "GTX970M"
	  };

	  String[] dyski = {
	      "128+1000",
	      "256+1000"
	  };

	  Object x = new Integer(4);
	  Random random = new Random(System.currentTimeMillis());
	  int los;
	  while(true){
	      random.setSeed(System.currentTimeMillis());
	      switch(random.nextInt(3)){
	         case 0:
		     los = random.nextInt(250);
		     x = new Manga(los, tytuly[los % 4], autorzy[los % 4], przeklady[los % 3]);
		     break;
	         case 1:
		     los = random.nextInt(50);
		     x = new Motor(los * 5, los * 7, motory[los%6]);
		     break;
	         case 2:
		     los = random.nextInt(7);
		     x = new Laptop(modele[los % 4],procesory[los % 3],ramy[los % 3],grafiki[los % 3],dyski[los % 2] );
		     break;
	      }
	      
	      bufor.wstaw(x);
	      System.out.println("Wstawiono: " + x);
	      Thread.sleep(random.nextInt(2500));
	  }
      } catch(Exception e) {
	  System.err.println("Producent: blad !!! "+e.getMessage());
      }
  }
}
------------------------------------------------
Konsument.java       
import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Konsument{
  public static void main(String args[]){
      System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforowow fabryka = (FabrykaBuforowow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons2");
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      System.out.println("Pobrano: \n" + bufor.pobierz() + "\n---------------------------------------------");
	      Thread.sleep(random.nextInt(2500));
	  }
      } catch(Exception e) {
	  System.err.println("Konsument: blad !!! "+e.getMessage());
      }
  }
}

------------------------------------------------
------------------------------------------------
#SERWER------------------------------------------  

FabrykaBuforow.java
import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
    OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException;
}
------------------------------------------------
OdleglyBufor.java   
import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public Object pobierz() throws RemoteException, InterruptedException;
    public void wstaw(Object element) throws RemoteException, InterruptedException;
}
------------------------------------------------
plik.polityka     
grant { permission java.security.AllPermission; }; 
------------------------------------------------
ServerLogic.java
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Object> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Object>();
    }
    
    public synchronized Object pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(Object element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println();
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    private final Map<String, OdleglyBufor> memory;
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	memory = new HashMap<String, OdleglyBufor>();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("ServerLogic: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }

    public OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa){
	if(memory.containsKey(nazwa)){
	    System.out.println("wys³ano do klienta bufor o nazwie: " + nazwa);
	    return memory.get(nazwa);
	}else{
	    OdleglyBufor odleglyBufor =  new OBuforImpl(5);
	    try {
		UnicastRemoteObject.exportObject(odleglyBufor);
	    } catch(Exception e) {
		System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
	    }
	    memory.put(nazwa, odleglyBufor);
	    System.out.println("Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: " + nazwa);
	    return odleglyBufor;
	}
    }
}

public class ServerLogic{
    public static void main(String[] argv){
	System.setSecurityManager(new RMISecurityManager());
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}
------------------------------------------------
------------------------------------------------

s384119@pc15l:~/public_html/TAS/LematB/14/Serwer$ javac ServerLogic.java 
Note: ServerLogic.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s384119@pc15l:~/public_html/TAS/LematB/14/Serwer$ rmic OBuforImpl
Warning: generation and use of skeletons and static stubs for JRMP
is deprecated. Skeletons are unnecessary, and static stubs have
been superseded by dynamically generated stubs. Users are
encouraged to migrate away from using rmic to generate skeletons and static
stubs. See the documentation for java.rmi.server.UnicastRemoteObject.
s384119@pc15l:~/public_html/TAS/LematB/14/Serwer$ rmic TworzOdlegleBufory
Warning: generation and use of skeletons and static stubs for JRMP
is deprecated. Skeletons are unnecessary, and static stubs have
been superseded by dynamically generated stubs. Users are
encouraged to migrate away from using rmic to generate skeletons and static
stubs. See the documentation for java.rmi.server.UnicastRemoteObject.
s384119@pc15l:~/public_html/TAS/LematB/14/Serwer$ 

Kopiuje klasy: FabrykaBuforow.class; OdleglyBufor.class do katalogu Klient.

s384119@pc15l:~/public_html/TAS/LematB/14/Klient$ javac Client.java 
s384119@pc15l:~/public_html/TAS/LematB/14/Klient$ javac Konsument.java 
Note: Konsument.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s384119@pc15l:~/public_html/TAS/LematB/14/Klient$ javac Producent.java 
Note: Producent.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s384119@pc15l:~/public_html/TAS/LematB/14/Klient$ javac Manga.java 
s384119@pc15l:~/public_html/TAS/LematB/14/Klient$ javac Motor.java 
s384119@pc15l:~/public_html/TAS/LematB/14/Klient$ javac Laptop.java 

Pliki class: 

Client.class	Client$1.class	Client$2.class	Client$3.class 	
OBuforImpl_Stub.class	OBuforImpl.class
Laptop.class	Manga.class		Motor.class  
TworzOdlegleBufory.class	TworzOdlegleBufory_Stub.class

umie¶ci³em na serwerze www, pod adresem: https://s384119.students.wmi.amu.edu.pl/TAS/LematB/14/; oraz da³em odpowiednie uprawnienia

s384119@pc01k:~/public_html/TAS/LematB/14/Serwer$ rmiregistry

1#Serwer

s384119@pc01k:~/public_html/TAS/LematB/14/Serwer$ java -Djava.security.manager -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s384119.students.wmi.amu.edu.pl/TAS/LematB/14/ ServerLogic
ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: prodKons2
wys³ano do klienta bufor o nazwie: prodKons2

wstawiono (Motor: Suzuki V-Strom 650 ABS, moc = 10, vMax = 14), #elementow w buforze: 1

wstawiono (Motor: Indian Chief Classic, moc = 135, vMax = 189), #elementow w buforze: 1

wstawiono (Manga: Takashi Okazaki, Afro Samurai, Angielski, 5str), #elementow w buforze: 1

wstawiono (Manga: Takashi Okazaki, Afro Samurai, Angielski, 17str), #elementow w buforze: 1

wstawiono (Motor: Kawasaki Ninja 1000, moc = 145, vMax = 203), #elementow w buforze: 1

wstawiono (Laptop: Dell XPS 15, procesor = i7-6900HQ, ram = 12GB, grafika = GTX970M, dysk = 256+1000), #elementow w buforze: 1

wstawiono (Manga: Akira Toriyama, Dragon Ball GT, Angielski, 110str), #elementow w buforze: 1

wstawiono (Motor: Indian Chief Classic, moc = 225, vMax = 315), #elementow w buforze: 2

wstawiono (Motor: Indian Chief Classic, moc = 15, vMax = 21), #elementow w buforze: 1

wstawiono (Laptop: Dell Alienware 15, procesor = i7-6900HQ, ram = 12GB, grafika = GTX970M, dysk = 128+1000), #elementow w buforze: 2

wstawiono (Manga: Tite Kubo, Bleach, Polski, 51str), #elementow w buforze: 2

wstawiono (Motor: Yamaha FZ-09, moc = 140, vMax = 196), #elementow w buforze: 2

wstawiono (Laptop: Apple MacBook Pro, procesor = i7-6700HQ, ram = 8GB, grafika = GTX960M, dysk = 128+1000), #elementow w buforze: 2

wstawiono (Motor: Yamaha FZ-09, moc = 50, vMax = 70), #elementow w buforze: 1

wstawiono (Motor: Kawasaki Ninja 1000, moc = 235, vMax = 329), #elementow w buforze: 1

wstawiono (Laptop: MSI GS60, procesor = i7-5700HQ, ram = 16GB, grafika = HD5600, dysk = 256+1000), #elementow w buforze: 2

wstawiono (Motor: Yamaha FZ-09, moc = 170, vMax = 238), #elementow w buforze: 1

wstawiono (Motor: Yamaha FZ-09, moc = 170, vMax = 238), #elementow w buforze: 1

wstawiono (Manga: Tite Kubo, Bleach, Angielski, 11str), #elementow w buforze: 1

wstawiono (Laptop: Dell XPS 15, procesor = i7-6700HQ, ram = 8GB, grafika = GTX960M, dysk = 256+1000), #elementow w buforze: 1

wstawiono (Manga: Akira Toriyama, Dragon Ball GT, Angielski, 74str), #elementow w buforze: 1
^Cs384119@pc01k:~/public_html/TAS/LematB/14/Serwer$

2#Konsument

s384119@pc01k:~/public_html/TAS/LematB/14/Klient$ java -Djava.security.manager -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s384119.students.wmi.amu.edu.pl/TAS/LematB/14/ Konsument
Pobrano: 
(Motor: Suzuki V-Strom 650 ABS, moc = 10, vMax = 14)
---------------------------------------------
Pobrano: 
(Motor: Indian Chief Classic, moc = 135, vMax = 189)
---------------------------------------------
Pobrano: 
(Manga: Takashi Okazaki, Afro Samurai, Angielski, 5str)
---------------------------------------------
Pobrano: 
(Manga: Takashi Okazaki, Afro Samurai, Angielski, 17str)
---------------------------------------------
Pobrano: 
(Motor: Kawasaki Ninja 1000, moc = 145, vMax = 203)
---------------------------------------------
Pobrano: 
(Laptop: Dell XPS 15, procesor = i7-6900HQ, ram = 12GB, grafika = GTX970M, dysk = 256+1000)
---------------------------------------------
Pobrano: 
(Manga: Akira Toriyama, Dragon Ball GT, Angielski, 110str)
---------------------------------------------
Pobrano: 
(Motor: Indian Chief Classic, moc = 225, vMax = 315)
---------------------------------------------
Pobrano: 
(Motor: Indian Chief Classic, moc = 15, vMax = 21)
---------------------------------------------
Pobrano: 
(Laptop: Dell Alienware 15, procesor = i7-6900HQ, ram = 12GB, grafika = GTX970M, dysk = 128+1000)
---------------------------------------------
Pobrano: 
(Manga: Tite Kubo, Bleach, Polski, 51str)
---------------------------------------------
Pobrano: 
(Motor: Yamaha FZ-09, moc = 140, vMax = 196)
---------------------------------------------
Pobrano: 
(Laptop: Apple MacBook Pro, procesor = i7-6700HQ, ram = 8GB, grafika = GTX960M, dysk = 128+1000)
---------------------------------------------
Pobrano: 
(Motor: Yamaha FZ-09, moc = 50, vMax = 70)
---------------------------------------------
Pobrano: 
(Motor: Kawasaki Ninja 1000, moc = 235, vMax = 329)
---------------------------------------------
Pobrano: 
(Laptop: MSI GS60, procesor = i7-5700HQ, ram = 16GB, grafika = HD5600, dysk = 256+1000)
---------------------------------------------
Pobrano: 
(Motor: Yamaha FZ-09, moc = 170, vMax = 238)
---------------------------------------------
Pobrano: 
(Motor: Yamaha FZ-09, moc = 170, vMax = 238)
---------------------------------------------
Pobrano: 
(Manga: Tite Kubo, Bleach, Angielski, 11str)
---------------------------------------------
Pobrano: 
(Laptop: Dell XPS 15, procesor = i7-6700HQ, ram = 8GB, grafika = GTX960M, dysk = 256+1000)
---------------------------------------------
Konsument: blad !!! Connection refused to host: 127.0.0.1; nested exception is: 
	java.net.ConnectException: Po³±czenie odrzucone
s384119@pc01k:~/public_html/TAS/LematB/14/Klient$ 

3#Producent

s384119@pc01k:~/public_html/TAS/LematB/14/Klient$ java -Djava.security.manager -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s384119.students.wmi.amu.edu.pl/TAS/LematB/14/ Producent
Wstawiono: (Motor: Suzuki V-Strom 650 ABS, moc = 10, vMax = 14)
Wstawiono: (Motor: Indian Chief Classic, moc = 135, vMax = 189)
Wstawiono: (Manga: Takashi Okazaki, Afro Samurai, Angielski, 5str)
Wstawiono: (Manga: Takashi Okazaki, Afro Samurai, Angielski, 17str)
Wstawiono: (Motor: Kawasaki Ninja 1000, moc = 145, vMax = 203)
Wstawiono: (Laptop: Dell XPS 15, procesor = i7-6900HQ, ram = 12GB, grafika = GTX970M, dysk = 256+1000)
Wstawiono: (Manga: Akira Toriyama, Dragon Ball GT, Angielski, 110str)
Wstawiono: (Motor: Indian Chief Classic, moc = 225, vMax = 315)
Wstawiono: (Motor: Indian Chief Classic, moc = 15, vMax = 21)
Wstawiono: (Laptop: Dell Alienware 15, procesor = i7-6900HQ, ram = 12GB, grafika = GTX970M, dysk = 128+1000)
Wstawiono: (Manga: Tite Kubo, Bleach, Polski, 51str)
Wstawiono: (Motor: Yamaha FZ-09, moc = 140, vMax = 196)
Wstawiono: (Laptop: Apple MacBook Pro, procesor = i7-6700HQ, ram = 8GB, grafika = GTX960M, dysk = 128+1000)
Wstawiono: (Motor: Yamaha FZ-09, moc = 50, vMax = 70)
Wstawiono: (Motor: Kawasaki Ninja 1000, moc = 235, vMax = 329)
Wstawiono: (Laptop: MSI GS60, procesor = i7-5700HQ, ram = 16GB, grafika = HD5600, dysk = 256+1000)
Wstawiono: (Motor: Yamaha FZ-09, moc = 170, vMax = 238)
Wstawiono: (Motor: Yamaha FZ-09, moc = 170, vMax = 238)
Wstawiono: (Manga: Tite Kubo, Bleach, Angielski, 11str)
Wstawiono: (Laptop: Dell XPS 15, procesor = i7-6700HQ, ram = 8GB, grafika = GTX960M, dysk = 256+1000)
Wstawiono: (Manga: Akira Toriyama, Dragon Ball GT, Angielski, 74str)
Producent: blad !!! Connection refused to host: 127.0.0.1; nested exception is: 
	java.net.ConnectException: Po³±czenie odrzucone
s384119@pc01k:~/public_html/TAS/LematB/14/Klient$ 

)

Zadanie 15 -------------------------------------
(

	farmerimp.java
import java.io.Serializable;
import java.net.MalformedURLException;
import java.rmi.AlreadyBoundException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

public class farmerimp extends UnicastRemoteObject implements farmer, Serializable {

    public farmerimp() throws RemoteException, AlreadyBoundException, MalformedURLException {
        super();
        Naming.rebind("good_farmer", this);
    }

    public List<Object> wykonajWielowatkowo(List<worker> workers) {
        List<Object> results = new ArrayList<>();
        workers.forEach(w -> {
            Thread thread = new Thread(() -> {
                results.add(w.oblicz());
            });
            thread.start();
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        return results;
    }
}
------------------------------------------------
	farmer.java
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.List;

public interface farmer extends Remote {
    List<Object> wykonajWielowatkowo(List<worker> workers) throws RemoteException;
}
------------------------------------------------  
	kkk.java  
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

public class kkk {
    public static void main(String[] args) {
        List<worker> workers = new ArrayList<>();
        for (int i = 0; i < 100; ++i) {
            workers.add(new workerimp(i, i + 1));
        }
        try {
            farmer farmer = (farmer) Naming.lookup("rmi://localhost/good_farmer");
            System.out.println("Minimum funkcji cos w przedzia³ach (0,1), (1,2), ..., (99, 100):");
            farmer.wykonajWielowatkowo(workers).forEach(r -> {
                System.out.println(r);
            });
        } catch (NotBoundException | MalformedURLException | RemoteException e) {
            e.printStackTrace();
        }
    }
}
------------------------------------------------
	sss.java
import java.net.MalformedURLException;
import java.rmi.AlreadyBoundException;
import java.rmi.RemoteException;

public class sss {
    public static void main(String[] args) {
        try {
            new farmerimp();
        } catch (RemoteException |MalformedURLException | AlreadyBoundException e) {
            e.printStackTrace();
        }
    }
}
------------------------------------------------
	workerimp.java
import java.io.Serializable;

public class workerimp implements worker, Serializable {

    private double x1, x2;

    public workerimp(double x1, double x2) {
        this.x1 = x1;
        this.x2 = x2;
    }

    @Override
    public Object oblicz() {
        System.out.println("W±tek nr: " + Thread.currentThread().getId());

        double min = Double.MAX_VALUE;

        for (double d = x1+Double.MIN_VALUE; d < x2; d+=0.0001) {
            min = Math.cos(d) < min ? Math.cos(d) : min;
        }

        return min;
    }
}
------------------------------------------------
	worker.java
public interface worker {
    Object oblicz();
}
------------------------------------------------
s384119@pc23d:~/Desktop/TAS/LematB/15$ javac farmer.java 
s384119@pc23d:~/Desktop/TAS/LematB/15$ javac farmerimp.java 
s384119@pc23d:~/Desktop/TAS/LematB/15$ javac kkk.java 
s384119@pc23d:~/Desktop/TAS/LematB/15$ javac sss.java 
s384119@pc23d:~/Desktop/TAS/LematB/15$ javac worker.java 
s384119@pc23d:~/Desktop/TAS/LematB/15$ javac workerimp.java 
s384119@pc23d:~/Desktop/TAS/LematB/15$ rmiregistry


Serwer
-----------------------------------------------
s384119@pc23d:~/Desktop/TAS/LematB/15$ java sss
W±tek nr: 17
W±tek nr: 18
W±tek nr: 19
W±tek nr: 20
W±tek nr: 21
W±tek nr: 22
W±tek nr: 23
W±tek nr: 24
W±tek nr: 25
W±tek nr: 26
W±tek nr: 27
W±tek nr: 28
W±tek nr: 29
W±tek nr: 30
W±tek nr: 31
W±tek nr: 32
W±tek nr: 33
W±tek nr: 34
W±tek nr: 35
W±tek nr: 36
W±tek nr: 37
W±tek nr: 38
W±tek nr: 39
W±tek nr: 40
W±tek nr: 41
W±tek nr: 42
W±tek nr: 43
W±tek nr: 44
W±tek nr: 45
W±tek nr: 46
W±tek nr: 47
W±tek nr: 48
W±tek nr: 49
W±tek nr: 50
W±tek nr: 51
W±tek nr: 52
W±tek nr: 53
W±tek nr: 54
W±tek nr: 55
W±tek nr: 56
W±tek nr: 57
W±tek nr: 58
W±tek nr: 59
W±tek nr: 60
W±tek nr: 61
W±tek nr: 62
W±tek nr: 63
W±tek nr: 64
W±tek nr: 65
W±tek nr: 66
W±tek nr: 67
W±tek nr: 68
W±tek nr: 69
W±tek nr: 70
W±tek nr: 71
W±tek nr: 72
W±tek nr: 73
W±tek nr: 74
W±tek nr: 75
W±tek nr: 76
W±tek nr: 77
W±tek nr: 78
W±tek nr: 79
W±tek nr: 80
W±tek nr: 81
W±tek nr: 82
W±tek nr: 83
W±tek nr: 84
W±tek nr: 85
W±tek nr: 86
W±tek nr: 87
W±tek nr: 88
W±tek nr: 89
W±tek nr: 90
W±tek nr: 91
W±tek nr: 92
W±tek nr: 93
W±tek nr: 94
W±tek nr: 95
W±tek nr: 96
W±tek nr: 97
W±tek nr: 98
W±tek nr: 99
W±tek nr: 100
W±tek nr: 101
W±tek nr: 102
W±tek nr: 103
W±tek nr: 104
W±tek nr: 105
W±tek nr: 106
W±tek nr: 107
W±tek nr: 108
W±tek nr: 109
W±tek nr: 110
W±tek nr: 111
W±tek nr: 112
W±tek nr: 113
W±tek nr: 114
W±tek nr: 115
W±tek nr: 116
^Cs384119@pc23d:~/Desktop/TAS/LematB/15$ 

Klient
-----------------------------------------------
s384119@pc23d:~/Desktop/TAS/LematB/15$ java kkk
Minimum funkcji sin w przedzia³ach (0,1), (1,2), ..., (99, 100):
4.9E-324
0.8414709848078965
0.14121900660167327
-0.7567371271633178
-0.999999999939284
-0.9589242746631385
-0.27941549819892586
0.6569865987187891
0.41211848524388
-0.5440211108874143
-0.9999999996694354
-0.9999902065507035
-0.5365729180004349
0.4201670368266409
0.6502878401588874
-0.2879033166628334
-0.9613974918789155
-0.9999999991837076
-0.7509872467716762
0.14987720966295234
0.8366556385373326
-0.008851309288073386
-0.8462204041739289
-0.9999999989919086
-0.9055783620066238
-0.13235175009777303
0.7625584504796028
0.27090578831011247
-0.663633884211224
-0.999999999543705
-0.9880316240928618
-0.404037645323065
0.5514266812416906
0.5291675404737823
-0.42809229816487704
-0.9917660521195308
-0.9999999998796225
-0.6435381333569995
0.2963685787093853
0.7451798505377016
-0.15852393411678134
-0.9164815448148738
-0.9999999999996609
-0.8317747426285983
0.017701925105413577
0.8509035245341184
0.12367235564116968
-0.7681906430698042
-0.9999999999038202
-0.9537526527594719
-0.26237485370392877
0.6702291758433747
0.3960169764501971
-0.5587061151020523
-0.9999999995921001
-0.9997551733586199
-0.5215510020869119
0.43616475524782494
0.6368151119520243
-0.3047153783118955
-0.9660919550228237
-0.9999999990645022
-0.7391806966492229
0.16735570030280691
0.8268849207223232
-0.02645118917896262
-0.855468197735019
-0.9999999991158078
-0.8979276806892913
-0.11478481378318722
0.7738906815578891
0.2539200865194803
-0.6766983342561866
-0.9999999996257335
-0.9851462604682474
-0.38778163540943045
0.5661076368981803
0.514064233698353
-0.4440230694221569
-0.9938776102332338
-0.9999999999197794
-0.6298879942744539
0.31322878243308516
0.7332583187342162
-0.17597718143670887
-0.9234200725550759
-0.9999999999979471
-0.8218178366308225
0.03539830273366068
0.8600694058124532
0.10608694793414046
-0.7794034212945841
-0.9999999998602355
-0.9482821412699473
-0.24525198546765434
0.683261714736121
0.37970025185228107
-0.5732999403263177
-0.9999999995066446
-0.9992068341863537
s384119@pc23d:~/Desktop/TAS/LematB/15$ ^C
s384119@pc23d:~/Desktop/TAS/LematB/15$ java kkk
Minimum funkcji cos w przedzia³ach (0,1), (1,2), ..., (99, 100):
0.5403023058682187
-0.41614683654704226
-0.9899783796499985
-0.9999999999730151
-0.6536436208636119
0.28366218546322625
0.7539022543448358
-0.14550003380630774
-0.9111302618837165
-0.9999999997571362
-0.8390715290764524
0.004425697988050785
0.8438539587324921
0.1367372182101423
-0.7596879128573057
-0.9999999993253783
-0.9576594803233847
-0.27516333805159693
0.6603167082440802
0.4080820618155197
-0.5477292602223185
-0.9999999988202284
-0.9999608263946371
-0.5328330203333975
0.424179007336997
0.6469193223304175
-0.2921388087316073
-0.9626058663129352
-0.9999999994259946
-0.7480575296890004
0.15425144988758405
0.8342233605077954
-0.013176756004022024
-0.8485173622907948
-0.9999999998158822
-0.9036922050915067
-0.12796368962740468
0.7654140519453434
0.26673931053319977
-0.6668635470263827
-0.9999999999898901
-0.9873392775238264
-0.39998531498835127
0.5551133015206257
0.5254070765151888
-0.4320877639192087
-0.9923231068811026
-0.9999999999480191
-0.6401443394691997
0.3005925437436371
0.7422212159982395
-0.16289211725446187
-0.9182431891188979
-0.9999999996902692
-0.8293098328631502
0.022126756261955736
0.853220107722584
0.11927942208460532
-0.7710165453409743
-0.9999999992166398
-0.9524129804151563
-0.25810163593826746
0.6735071623235862
0.39194923104339285
-0.5623711655855386
-0.999999998954596
-0.99964745596635
-0.5177697997895051
0.4401430224960407
0.6333965889620448
-0.3089276211873597
-0.9672252011098241
-0.9999999995184902
-0.7361927182273159
0.17171734183077755
0.8243879377307084
-0.030875079593827223
-0.8577516911275228
-0.9999999998665067
-0.8959709467909631
-0.11038724383904756
0.7766859820216312
0.24963695313944384
-0.6799501731796754
-0.9999999999986439
-0.9843766433940419
-0.38369844494974187
0.569750334265312
0.5102630493026747
-0.44798421425226714
-0.9943568572087281
-0.9999999999149023
-0.626444447910339
0.31742870151970165
0.7302418834926343
-0.18033208964720127
-0.9251095712094402
-0.9999999996152814
-0.8192882452914593
0.0398208803931389
s384119@pc23d:~/Desktop/TAS/LematB/15$ 

)
}
