przedmiot TAS temat B nr_indeksu 384200 liczba_pkt 3 

\n\nZadanie\ 10\ --------------------------------------\n\nUruchom\ przyk³ad\ programu\ RMI\ rmi4.zip,\ a\ nastêpnie:\n\n\ \ \ \ Zaprojektuj\ eksperyment\ który\ poka¿e\ ¿e\ je¶li\ 2\ klientów\ uruchamia\ metodê\ na\ rzecz\ tego\ samego\ obiektu\ RMI,\ to\ s±\ oni\ obs³ugiwani\ na\ osobnych\ w±tkach\ (przerób\ implementacjê\ powolnaMetoda()\ !).\n\ \ \ \ Sprawd¼\ i\ opisz\ ró¿nicê\ w\ dzia³aniu\ tego\ programu\ gdy\ drugiObiekt:\n\ \ \ \ \ \ \ \ jest\ eksportowany\ (czyli\ jest\ obiektem\ odleg³ym)\n\ \ \ \ \ \ \ \ nie\ jest\ eksportowany\n\ \ \ \ Zbadaj\ jak\ s±\ obs³ugiwane\ wyj±tki\ które\ pojawiaj±\ siê\ w\ metodach\ obiektu\ RMI\;\ w\ tym\ celu\ dodaj\ nastêpuj±c±\ metodê\ do\ interfejsu\ Odleg³yObiekt:\n\ \ \ \ \ \ \ \ public\ void\ generujeBlad()\ throws\ RemoteException\n\ \ \ \ \ \ \ \ \{\n\ \ \ \ \ \ \ \ \ \ \ \ throw\ new\ RemoteException(\"sztucznie\ wygenerowany\ blad\ ...\")\;\n\ \ \ \ \ \ \ \ \}\n\ \ \ \ i\ zobacz\ jak\ siê\ ona\ zachowuje\ z\ pkt\ widzenia\ klienta\ ...\n\n\t\n1)\nWynik\ eksperymentu\ pokazany\ jest\ w\ pliku\ Zad10A.png.\n\npublic\ int\ powolnaMetoda()\ throws\ RemoteException\n\ \ \{\n\ \ \ \ licznik++\;\n\ \ \ \ System.out.println(\"sss:\ powolnaMetoda()\;\ licznik=\"+licznik)\;\n\ \ \ \ System.out.println(Thread.currentThread())\;\n\ \ \ \ try\ \{Thread.sleep(20)\;\}\ catch(Exception\ e)\{\}\;\n\ \ \ \ System.out.println(\"sss:\ powolnaMetoda()\;\ koniec\ dzialania\ !\")\;\n\ \ \ \ return\ licznik\;\n\ \ \}\n\ \ \n2)\n\nZ\ programu\ usuwamy\ liniê:\n\ UnicastRemoteObject.exportObject(drugiObiekt)\;\nco\ spowoduje,\ ¿e\ drugi\ obiekt\ nie\ bêdzie\ \"odleg³y\".\n\nW\ momencie,\ kiedy\ drugi\ obiekt\ zostanie\ wyeksportowany,\ to\ bêdzie\ on\ dzia³a³\ po\ stronie\ serwera.\nJe¶li\ nie\ zostanie\ wyeksportowany\ to\ wynik\ dzia³ania\ bêdzie\ wy¶wietla³\ siê\ po\ stronie\ klienta.\n\nWynik\ eksperymentu\ z\ nieeksportowanym\ drugim\ obiektem\ znajduje\ siê\ w\ pliku\ Zad10B.png.\n\n3)\nStrona\ klienta\ wyrzuca\ b³±d\ w\ w±tku\ serwera\ co\ widaæ\ na\ pliku\ Zad10C.png.\n\nZadanie\ 11\ --------------------------------------\n\nZaprogramuj\ obiekt\ RMI\ \"Odleg³yBufor\"\ (nazwa\ interfejsu),\ rozwi±zuj±cy\ problem\ producenta\ i\ konsumenta.\nObiekt\ RMI\ powinien\ mieæ\ metody:\n\n\ \ \ \ void\ WstawElement(int\ el)\ \n\ \ \ \ int\ PobierzElement()\ \n\ \ \ \ \ \ //\ jak\ widaæ\ do\ bufora\ wstawiamy\ jedynie\ liczby\ \"int\"\ !\n\nBufor\ przechowujacy\ elementy\ (typu\ FIFO)\ powinien\ byc\ w\ tablicy\ 50\ integerow.\nPowinien\ istnieæ\ pomocniczy\ obiekt\ RMI\ \"TwórzOdleg³eBufory\"\ dostêpny\ przez\ nazwê\ \"producent_konsument\"\ w\ rmiregistry,\ zawieraj±cy\ metodê:\n\n\ \ \ \ OdleglyBufor\ nowyOdleg³yBufor()\n\ \ \ \ \ \ //\ mog±\ z\ niej\ korzystaæ\ dwa\ w±tki\ tego\ samego\ procesu\ ...\n\ntworz±c±\ obiekty\ Odleg³yBufor\ na\ ¿±danie\ (cos\ w\ rodzaju\ \"fabryki\ obiektow\").\nPrzygotuj\ eksperyment\ pokazuj±cy\ ¿e\ to\ wszystko\ dzia³a.\nNiech\ producent\ produkuje\ liczby\ 1..1000,\ a\ konsument\ wyswietla\ co\ konsumuje.\nUwaga:\ producent\ i\ konsument\ musza\ byc\ (w\ zadaniu\ 11)\ watkami\ jednego\ programu,\ aby\ mialy\ dostep\ do\ wspolnego\ odleglego\ bufora.\nDo\ sprawozdania\ wstaw\ kody\ ¼ród³owe\ klas\ oraz\ wydruki\ eksperymentów\ ...\n\nZrzuty\ ekranu\ dotycz±ce\ tego\ zadania:\ Zad11A.png,\ Zad11B.png,\ Zad11C.png.\nKod\ ¼ród³owy:\n\nimport\ java.rmi.*\;\n\npublic\ interface\ OdleglyBufor\ extends\ Remote\n\{\n\ \ public\ void\ WstawElement(int\ el)\ throws\ RemoteException\;\n\ \ public\ int\ PobierzElement()\ throws\ RemoteException\;\n\}\n\nimport\ java.rmi.*\;\nimport\ java.io.*\;\n\npublic\ class\ OdleglyBuforKlasa\ implements\ OdleglyBufor,\ Serializable\ \{\n\ \ int\[\]\ tablica\ =\ new\ int\[50\]\;\n\ \ \ \ int\ koniec=0\;\n\ \ \ \ int\ poczatek=0\;\n\ \ \ \ int\ rozmiar=0\;\n\ \ public\ synchronized\ void\ WstawElement(int\ el)\ throws\ RemoteException\n\ \ \{\n\ \ \ \ \ \ try\{\n\ \ \ \ \ \ while\ (rozmiar==tablica.length)\ \{wait()\;\}\n\ \ \ \ \ \ notifyAll()\;\n\ \ \ \ \ \ \}\n\ \ \ \ \ \ catch(InterruptedException\ e)\ \{e.printStackTrace()\;\}\n\ \ \ \ \ \ tablica\[koniec\ %\ tablica.length\]\ =\ el\;\n\ \ \ \ \ \ koniec++\;\ \n\ \ \ \ \ \ rozmiar++\;\n\ \ \ \ \ \ System.out.println(\"wstawilo\")\;\n\ \ \ \ \n\ \ \}\n\n\ \ public\ synchronized\ int\ PobierzElement()\ throws\ RemoteException\ \n\ \ \{\n\ \ \ \ \ \ try\{\n\ \ \ \ \ \ while\ (rozmiar==0)\ \{wait()\;\}\n\ \ \ \ \ \ notifyAll()\;\n\ \ \ \ \ \ \}\n\ \ \ \ \ \ catch(InterruptedException\ e)\{e.printStackTrace()\;\}\n\ \ \ \ \ \ int\ temp\ \ =\ tablica\[\ poczatek\ %\ tablica.length\]\;\n\ \ \ \ \ \ poczatek++\;\n\ \ \ \ \ \ rozmiar--\;\n\ \ \ \ \ \ return\ temp\;\n\ \ \ \ \ \ \n\ \ \}\n\n\}\n\n/*\neksperymenty\ z\ RMI\ (serwer)\n*/\n\nimport\ java.rmi.*\;\nimport\ java.rmi.registry.*\;\nimport\ java.rmi.server.*\;\nimport\ java.io.*\;\n\n\npublic\ class\ sss\n\{\n\ \ public\ static\ void\ main(String\ args\[\])\n\ \ \{\n\ \ \ \ //System.setSecurityManager(new\ RMISecurityManager())\;\n\n\ \ \ \ try\ \{\n\ \ \ \ \ \ \ \ String\ nazwa\ =\ \"producent_konsument\"\;\n\ \ \ \ \ \ \ \ TworzOdlegleObiektyimpl\ obiekt\ =\ new\ TworzOdlegleObiektyimpl()\;\n\ \ \ \ \ \ \ \ UnicastRemoteObject.exportObject(obiekt)\;\n\ \ \ \ \ \ Naming.rebind(nazwa,obiekt)\;\n\ \ \ \ \}\ catch(Exception\ e)\ \{\n\ \ \ \ \ \ System.err.println(\"sss:\ blad\ !!!\ \"+e.getMessage())\;\n\ \ \ \ \}\n\ \ \}\n\}\n\nimport\ java.rmi.*\;\n\npublic\ interface\ TworzOdlegleObiekty\ extends\ Remote\n\{\n\ \ public\ OdleglyBuforKlasa\ nowyOdleglyBufor()\ throws\ RemoteException\;\n\}\n\nimport\ java.rmi.*\;\nimport\ java.io.*\;\n\npublic\ class\ TworzOdlegleObiektyimpl\ implements\ TworzOdlegleObiekty,\ Serializable\n\{\n\ \ public\ OdleglyBuforKlasa\ nowyOdleglyBufor()\ throws\ RemoteException\{\n\ \ \ \ OdleglyBuforKlasa\ bufor\ =\ new\ OdleglyBuforKlasa()\;\n\ \ \ \ \ \ return\ bufor\;\n\ \ \}\n\n\ \ \n\}\n\n/*\neksperymenty\ z\ RMI\ (klient)\n*/\n\nimport\ java.rmi.*\;\nimport\ java.rmi.registry.*\;\n\npublic\ class\ kkk\ \n\{\n\ \ public\ static\ void\ main(String\ args\[\])\n\ \ \{\n\ \ \ \ //System.setSecurityManager(new\ RMISecurityManager())\;\n\n\ \ \ \ try\ \{\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ TworzOdlegleObiekty\ obiekt\ =\ (TworzOdlegleObiekty)Naming.lookup(\"rmi://localhost/producent_konsument\")\;\n\ \ \ \ \ \ \ \ OdleglyBuforKlasa\ bufor\ =\ obiekt.nowyOdleglyBufor()\;\n\ \ \ \ \ \ \ \ konsument\ kons=new\ konsument(bufor)\;\n\ \ \ \ \ \ \ \ producent\ prod=new\ producent(bufor)\;\n\ \ \ \ \ \ \ \ Thread\ thread1\ =\ new\ Thread(kons)\;\n\ \ \ \ \ \ \ \ Thread\ thread2\ =\ new\ Thread(prod)\;\n\ \ \ \ \ \ \ \ thread1.start()\;\n\ \ \ \ \ \ \ \ thread2.start()\;\n\ \ \ \ \ \ \ \ //bufor.WstawElement(5)\;\n\ \ \ \ \ \ \ \ //bufor.PobierzElement()\;\n\ \ \ \ \ \ \ \ //dla\ obiekt\ pocisnac\ watki\ -\ kolejna\ klasa\ run\n\ \ \ \ \ \ \ \ System.out.println(\"cos\")\;\n\n\ \ \ \ \}\ catch(Exception\ e)\ \{\n\ \ \ \ \ \ System.err.println(\"kkk:\ blad\ !!!\ \"+e.getMessage())\;\n\ \ \ \ \}\n\ \ \}\n\}\n\nimport\ java.rmi.*\;\n\npublic\ interface\ konsument2\n\{\n\ \ \ \ public\ void\ run()\;\n\}\n\nimport\ java.rmi.*\;\n\npublic\ class\ konsument\ implements\ konsument2,Runnable\ \{\n\ \n\ \ \ \ private\ OdleglyBuforKlasa\ bufor\;\n\ \n\ \ \ \ public\ konsument(OdleglyBuforKlasa\ bufor)\ \{\n\ \ \ \ \ \ \ \ this.bufor\ =\ bufor\;\n\ \ \ \ \}\n\ \n\ \ \ \ @Override\n\ \ \ \ public\ void\ run()\ \{\n\ \ \ \ \ \ \ \ for(int\ i=0\;i<100\;i++)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ try\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ System.out.println(\"pobralo:\ \"+bufor.PobierzElement())\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //usypiamy\ w±tek\ na\ 100\ milisekund\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //Thread.sleep(100)\;\n\ \ \ \ \ \ \ \ \ \ \ \ \}\ catch\ (RemoteException\ e)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ e.printStackTrace()\;\n\ \ \ \ \ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ \}\n\ \ \ \ \}\n\}\n\nimport\ java.rmi.*\;\n\npublic\ interface\ producent2\n\{\n\ \ \ \ public\ void\ run()\;\n\}\n\nimport\ java.rmi.*\;\n\npublic\ class\ producent\ implements\ producent2,Runnable\ \{\n\ \n\ \ \ \ private\ OdleglyBuforKlasa\ bufor\;\n\ \n\ \ \ \ public\ producent(OdleglyBuforKlasa\ bufor)\ \{\n\ \ \ \ \ \ \ \ this.bufor\ =\ bufor\;\n\ \ \ \ \}\n\ \n\ \ \ \ @Override\n\ \ \ \ public\ void\ run()\ \{\n\ \ \ \ \ \ \ \ for(int\ i=0\;i<100\;i++)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ try\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ bufor.WstawElement(i)\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ System.out.println(i)\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //usypiamy\ w±tek\ na\ 100\ milisekund\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //Thread.sleep(100)\;\n\ \ \ \ \ \ \ \ \ \ \ \ \}\ catch\ (RemoteException\ e)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ e.printStackTrace()\;\n\ \ \ \ \ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ \}\n\ \ \ \ \}\n\}\n\nZadanie\ 12\ --------------------------------------\n\nDo\ poprzedniego\ zadania\ dodaj\ metodê:\n\n\ \ \ \ OdleglyBufor\ nowyOdleg³yBuforZNazwa(String\ nazwa)\n\nktóra\ pozwala\ korzystaæ\ z\ bufora\ dwóm\ ró¿nym\ programom\ (dostaj±\ siê\ od\ tego\ samego\ buforu\ podaj±c\ tê\ sam±\ nazwê).\ \n\nWydruki\ eksperymentu\ znajduj±\ siê\ w\ plikach:\ Zad12A.png,\ Zad12B.png\nKody\ ¼ród³owe:\n\nimport\ java.rmi.*\;\n\npublic\ interface\ OdleglyBufor\ extends\ Remote\n\{\n\ \ public\ void\ WstawElement(int\ el)\ throws\ RemoteException\;\n\ \ public\ int\ PobierzElement()\ throws\ RemoteException\;\n\}\n\nimport\ java.rmi.*\;\nimport\ java.io.*\;\n\npublic\ class\ OdleglyBuforKlasa\ implements\ OdleglyBufor,\ Serializable\ \{\n\ \ int\[\]\ tablica\ =\ new\ int\[50\]\;\n\ \ \ \ int\ koniec=0\;\n\ \ \ \ int\ poczatek=0\;\n\ \ \ \ int\ rozmiar=0\;\n\ \ \ \ int\ licznikPobr\ =\ 0\;\n\ \ \ \ int\ licznikWstaw=0\;\n\ \ public\ synchronized\ void\ WstawElement(int\ el)\ throws\ RemoteException\n\ \ \{\n\ \ \ \ \ \ try\{\n\ \ \ \ \ \ while\ (rozmiar==tablica.length)\ \{wait()\;\}\n\ \ \ \ \ \ notifyAll()\;\n\ \ \ \ \ \ \}\n\ \ \ \ \ \ catch(InterruptedException\ e)\ \{e.printStackTrace()\;\}\n\ \ \ \ \ \ tablica\[koniec\ %\ tablica.length\]\ =\ el\;\n\ \ \ \ \ \ koniec++\;\ \n\ \ \ \ \ \ rozmiar++\;\n\ \ \ \ \ \ System.out.println(\"wstawilo\"+licznikWstaw)\;\n\ \ \ \ \ \ \ \ licznikWstaw=licznikWstaw+1\;\n\ \ \ \ \n\ \ \}\n\n\ \ public\ synchronized\ int\ PobierzElement()\ throws\ RemoteException\ \n\ \ \{\n\ \ \ \ \ \ try\{\n\ \ \ \ \ \ while\ (rozmiar==0)\ \{wait()\;\}\n\ \ \ \ \ \ notifyAll()\;\n\ \ \ \ \ \ \}\n\ \ \ \ \ \ catch(InterruptedException\ e)\{e.printStackTrace()\;\}\n\ \ \ \ \ \ int\ temp\ \ =\ tablica\[\ poczatek\ %\ tablica.length\]\;\n\ \ \ \ \ \ poczatek++\;\n\ \ \ \ \ \ rozmiar--\;\n\ \ \ \ \ \ System.out.println(\"pobralo\"+licznikPobr)\;\n\ \ \ \ \ \ \ \ licznikPobr=licznikPobr+1\;\n\ \ \ \ \ \ return\ temp\;\n\ \ \ \ \ \ \n\ \ \}\n\n\}\n\nimport\ java.rmi.*\;\n\npublic\ interface\ TworzOdlegleObiekty\ extends\ Remote\n\{\n\ \ public\ OdleglyBuforKlasa\ nowyOdleglyBufor()\ throws\ RemoteException\;\n\ \ public\ void\ nowyOdleglyBuforZNazwa(String\ nazwa)\ throws\ RemoteException\;\n\}\n\nimport\ java.rmi.*\;\nimport\ java.io.*\;\nimport\ java.rmi.registry.*\;\nimport\ java.rmi.server.*\;\n\npublic\ class\ TworzOdlegleObiektyimpl\ implements\ TworzOdlegleObiekty,\ Serializable\n\{\n\ \ public\ OdleglyBuforKlasa\ nowyOdleglyBufor()\ throws\ RemoteException\{\n\ \ \ \ OdleglyBuforKlasa\ bufor\ =\ new\ OdleglyBuforKlasa()\;\n\ \ \ \ \ \ return\ bufor\;\n\ \ \}\n\n\ \ public\ void\ nowyOdleglyBuforZNazwa(String\ nazwa)\ throws\ RemoteException\{\n\ \ \ \ OdleglyBuforKlasa\ bufor\ =\ new\ OdleglyBuforKlasa()\;\n\ \ \ \ try\{\n\ \ \ \ \ \ UnicastRemoteObject.exportObject(bufor)\;\n\ \ \ \ \ \ Naming.rebind(nazwa,bufor)\;\n\ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ catch(Exception\ e)\ \{\n\ \ \ \ \ \ System.err.println(\"sss:\ blad\ !!!\ \"+e.getMessage())\;\n\ \ \ \ \}\n\ \ \}\n\n\}\n\n/*\neksperymenty\ z\ RMI\ (serwer)\n*/\n\nimport\ java.rmi.*\;\nimport\ java.rmi.registry.*\;\nimport\ java.rmi.server.*\;\nimport\ java.io.*\;\n\n\npublic\ class\ sss\n\{\n\ \ public\ static\ void\ main(String\ args\[\])\n\ \ \{\n\ \ \ \ //System.setSecurityManager(new\ RMISecurityManager())\;\n\n\ \ \ \ try\ \{\n\ \ \ \ \ \ \ \ String\ nazwa\ =\ \"producent_konsument\"\;\n\ \ \ \ \ \ \ \ TworzOdlegleObiektyimpl\ obiekt\ =\ new\ TworzOdlegleObiektyimpl()\;\n\ \ \ \ \ \ \ \ UnicastRemoteObject.exportObject(obiekt)\;\n\ \ \ \ \ \ Naming.rebind(nazwa,obiekt)\;\n\ \ \ \ \}\ catch(Exception\ e)\ \{\n\ \ \ \ \ \ System.err.println(\"sss:\ blad\ !!!\ \"+e.getMessage())\;\n\ \ \ \ \}\n\ \ \}\n\}\n\n/*\neksperymenty\ z\ RMI\ (klient)\n*/\n\nimport\ java.rmi.*\;\nimport\ java.rmi.registry.*\;\n\npublic\ class\ kkk\ \n\{\n\ \ public\ static\ void\ main(String\ args\[\])\n\ \ \{\n\ \ \ \ //System.setSecurityManager(new\ RMISecurityManager())\;\n\n\ \ \ \ try\ \{\n\ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ TworzOdlegleObiekty\ obiekt\ =\ (TworzOdlegleObiekty)Naming.lookup(\"rmi://localhost/producent_konsument\")\;\n\ \ \ \ \ \ \ \ obiekt.nowyOdleglyBuforZNazwa(\"abc\")\;\n\n\ \ \ \ \}\ catch(Exception\ e)\ \{\n\ \ \ \ \ \ System.err.println(\"kkk:\ blad\ !!!\ \"+e.getMessage())\;\n\ \ \ \ \}\n\ \ \}\n\}\n\nimport\ java.rmi.*\;\nimport\ java.rmi.registry.*\;\n\npublic\ class\ konsument\{\n\ \n\ \ \ \ //private\ OdleglyBuforKlasa\ bufor\;\n\n\ \ \ \ \n\n\ \n\ \ \ \ public\ static\ void\ main(String\ args\[\])\ \{\n\ \ \ \ \ \ \ \ try\{\n\ \ \ \ \ \ \ \ \ \ \ \ try\{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ OdleglyBufor\ buforpomoc\ =\ (OdleglyBufor)Naming.lookup(\"rmi://localhost/abc\")\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //this.bufor\ =\ buforpomoc\;\ \}\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for(int\ i=0\;i<100\;i++)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ //try\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ System.out.println(\"pobralo:\ \"+buforpomoc.PobierzElement())\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //usypiamy\ w±tek\ na\ 100\ milisekund\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //Thread.sleep(100)\;\n\ \ \ \ \ \ \ \ \ \ \ \ //\}\ catch\ (RemoteException\ e)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ //\ \ \ \ e.printStackTrace()\;\n\ \ \ \ \ \ \ \ \ \ \ \ //\}\n\ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ \ \ \ \ catch(RemoteException\ e)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ e.printStackTrace()\;\n\ \ \ \ \ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ catch(Exception\ e)\ \{e.printStackTrace()\;\}\n\ \ \ \ \}\n\}\n\nimport\ java.rmi.*\;\n\npublic\ class\ producent\ \{\n\ \n\ \ \ \ //private\ OdleglyBuforKlasa\ bufor\;\n\n\ \n\ \ \ \ public\ static\ void\ main(String\ args\[\])\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ try\{\n\ \ \ \ \ \ \ \ \ \ \ \ try\{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ OdleglyBufor\ buforpomoc\ =\ (OdleglyBufor)Naming.lookup(\"rmi://localhost/abc\")\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //this.bufor\ =\ buforpomoc\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ for(int\ i=0\;i<100\;i++)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ //try\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ buforpomoc.WstawElement(i)\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ System.out.println(i)\;\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //usypiamy\ w±tek\ na\ 100\ milisekund\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ //Thread.sleep(100)\;\n\ \ \ \ \ \ \ \ \ \ \ \ //\}\ catch\ (RemoteException\ e)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ //\ \ \ \ e.printStackTrace()\;\n\ \ \ \ \ \ \ \ \ \ \ \ //\}\n\ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ \ \ \ \ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ \ \ \ \ catch(RemoteException\ e)\ \{\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ e.printStackTrace()\;\n\ \ \ \ \ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ \}\n\ \ \ \ \ \ \ \ catch(Exception\ e)\ \{e.printStackTrace()\;\}\n\ \ \ \ \}\n\}\n
