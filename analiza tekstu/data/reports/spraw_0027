przedmiot TAS temat A nr_indeksu 396459 liczba_pkt 4 

\n\n/////////////////////////////////\ Zadanie\ 1\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\nPo\ przej¶ciu\ przez\ rpcgen\ struktóra\ naszej\ macierzy\ znajduj±cej\ siê\ w\ plik.x\ na\ nastêpuj±c±:\n\n\\\\------------------------------------------------------------------------------\n\nstruct\ Macierz\ \{\n\tstruct\ \{\n\t\tu_int\ Elem_len\;\n\t\tfloat\ *Elem_val\;\n\t\}\ Elem\;\n\tint\ IleW\;\n\tint\ IleK\;\n\}\;\n\n//------------------------------------------------------------------------------\n\nNasz\ \"float\ Elem\ <>\;\"\ zosta³\ rozbity\ na\ struktórê\ sk³adaj±ca\ siê\ z\ warto¶ci\ liczny\ eleentów\ oraz\ wska¼ników\ do\ tych\ elementów.\n\n\n/////////////////////////////////\ Zadanie\ 2\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\nsum_client.c:\n\\\\------------------------------------------------------------------------------\n\n/*\n\ *\ This\ is\ sample\ code\ generated\ by\ rpcgen.\n\ *\ These\ are\ only\ templates\ and\ you\ can\ use\ them\n\ *\ as\ a\ guideline\ for\ developing\ your\ own\ functions.\n\ */\n\n#include\ \"sum.h\"\n#include\ \"stdlib.h\"\n#include\ \"stdio.h\"\n\n\nvoid\nprogservice_1(char\ *host,int\ x,\ int\ y)\n\{\n\tCLIENT\ *clnt\;\n\tint\ \ *result_1\;\n\tParaLi\ \ suma_1_arg\;\t\n\n\tsuma_1_arg.x1=x\;\n\ \ \ \ suma_1_arg.x2=y\;\n\tprintf(\"%d\\n\",*result_1)\;\n\n#ifndef\tDEBUG\n\tclnt\ =\ clnt_create\ (host,\ PROGSERVICE,\ VERSERVICE,\ \"udp\")\;\n\tif\ (clnt\ ==\ NULL)\ \{\n\t\tclnt_pcreateerror\ (host)\;\n\t\texit\ (1)\;\n\t\}\n#endif\t/*\ DEBUG\ */\n\n\tresult_1\ =\ suma_1(&suma_1_arg,\ clnt)\;\n\tif\ (result_1\ ==\ (int\ *)\ NULL)\ \{\n\t\tclnt_perror\ (clnt,\ \"call\ failed\")\;\n\t\}\n#ifndef\tDEBUG\n\tclnt_destroy\ (clnt)\;\n#endif\t\ /*\ DEBUG\ */\n\}\n\n\nint\nmain\ (int\ argc,\ char\ *argv\[\])\n\{\n\tchar\ *host\;\n\n\tif\ (argc\ <\ 2)\ \{\n\t\tprintf\ (\"usage:\ %s\ server_host\\n\",\ argv\[0\])\;\n\t\texit\ (1)\;\n\t\}\n\thost\ =\ argv\[1\]\;\n\tint\ firstArg\ =\ atoi(argv\[2\])\;\t\n\tint\ secondArg\ =\ atoi(argv\[3\])\;\t\n\n\tprogservice_1\ (host,\ firstArg,\ secondArg)\;\nexit\ (0)\;\n\}\n\n//------------------------------------------------------------------------------\n\n\nsum_server.c:\n\\\\------------------------------------------------------------------------------\n\n#include\ \"sum.h\"\n\nint\ *\nsuma_1_svc(ParaLi\ *argp,\ struct\ svc_req\ *rqstp)\n\{\n\tstatic\ int\ \ result\;\n\tresult=argp->x1+argp->x2\;\n\treturn\ &result\;\n\}\n\n//------------------------------------------------------------------------------\n\n\n\nBrak\ wydruku\ z\ konsoli\ z\ powodu\ braku\ uprawnieñ\ administratora\n\n/////////////////////////////////\ Zadanie\ 3\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\nmatrix.h:\n\n\\\\------------------------------------------------------------------------------\n\n/*\n\ *\ Please\ do\ not\ edit\ this\ file.\n\ *\ It\ was\ generated\ using\ rpcgen.\n\ */\n\n#ifndef\ _MATRIX_H_RPCGEN\n#define\ _MATRIX_H_RPCGEN\n\n#include\ <rpc/rpc.h>\n\n\n#ifdef\ __cplusplus\nextern\ \"C\"\ \{\n#endif\n\n\nstruct\ Macierz\ \{\n\tstruct\ \{\n\t\tu_int\ Elem_len\;\n\t\tfloat\ *Elem_val\;\n\t\}\ Elem\;\n\tint\ IleW\;\n\tint\ IleK\;\n\}\;\ntypedef\ struct\ Macierz\ Macierz\;\n\ntypedef\ Macierz\ Mac\;\n\n#define\ ProgMacierze\ 0x21001234\n#define\ VerMacierze\ 1\n\n#if\ defined(__STDC__)\ ||\ defined(__cplusplus)\n#define\ PokazMacierz\ 1\nextern\ \ void\ *\ pokazmacierz_1(Mac\ *,\ CLIENT\ *)\;\nextern\ \ void\ *\ pokazmacierz_1_svc(Mac\ *,\ struct\ svc_req\ *)\;\nextern\ int\ progmacierze_1_freeresult\ (SVCXPRT\ *,\ xdrproc_t,\ caddr_t)\;\n\n#else\ /*\ K&R\ C\ */\n#define\ PokazMacierz\ 1\nextern\ \ void\ *\ pokazmacierz_1()\;\nextern\ \ void\ *\ pokazmacierz_1_svc()\;\nextern\ int\ progmacierze_1_freeresult\ ()\;\n#endif\ /*\ K&R\ C\ */\n\n/*\ the\ xdr\ functions\ */\n\n#if\ defined(__STDC__)\ ||\ defined(__cplusplus)\nextern\ \ bool_t\ xdr_Macierz\ (XDR\ *,\ Macierz*)\;\nextern\ \ bool_t\ xdr_Mac\ (XDR\ *,\ Mac*)\;\n\n#else\ /*\ K&R\ C\ */\nextern\ bool_t\ xdr_Macierz\ ()\;\nextern\ bool_t\ xdr_Mac\ ()\;\n\n#endif\ /*\ K&R\ C\ */\n\n#ifdef\ __cplusplus\n\}\n#endif\n\n#endif\ /*\ !_MATRIX_H_RPCGEN\ */\n\n//------------------------------------------------------------------------------\n\n\nmatrix_client.c\n\\\\------------------------------------------------------------------------------\n\n#include\ \"matrix.h\"\n#include\ <stdio.h>\n\nvoid\nprogmacierze_1(char\ *host)\n\{\n\tfloat\ x\ =\ 0\;\n\tCLIENT\ *clnt\;\n\tvoid\ \ *result_1\;\n\tMac\ \ pokazmacierz_1_arg\;\n\n\t\n\tprintf(\"Rows:\ \\n\")\;\n\tscanf(\"%i\",\ &pokazmacierz_1_arg.IleW)\;\n\tprintf(\"Columns:\ \\n\")\;\n\tscanf(\"%i\",\ &pokazmacierz_1_arg.IleK)\;\n\t\n\tpokazmacierz_1_arg.Elem.Elem_len\ =\ pokazmacierz_1_arg.IleW\ *\ pokazmacierz_1_arg.IleK\;\n\tpokazmacierz_1_arg.Elem.Elem_val\ =\ calloc(pokazmacierz_1_arg.Elem.Elem_len,\ sizeof(float))\;\n\n\tint\ i\;\n\tfor\ (i\ =\ 0\;\ i\ <\ pokazmacierz_1_arg.Elem.Elem_len\;\ i++)\ \{\n\t\tprintf(\"Enter\ the\ value:\ %i\\n\",\ i)\;\n\t\tscanf(\"%f\",\ &x)\;\n\t\tpokazmacierz_1_arg.Elem.Elem_val\[i\]\ =\ x\;\n\t\}\n\tfree(pokazmacierz_1_arg.Elem.Elem_val)\;\n\n#ifndef\tDEBUG\n\tclnt\ =\ clnt_create\ (host,\ ProgMacierze,\ VerMacierze,\ \"udp\")\;\n\tif\ (clnt\ ==\ NULL)\ \{\n\t\tclnt_pcreateerror\ (host)\;\n\t\texit\ (1)\;\n\t\}\n#endif\t/*\ DEBUG\ */\n\n\tresult_1\ =\ pokazmacierz_1(&pokazmacierz_1_arg,\ clnt)\;\n\tif\ (result_1\ ==\ (void\ *)\ NULL)\ \{\n\t\tclnt_perror\ (clnt,\ \"call\ failed\")\;\n\t\}\n#ifndef\tDEBUG\n\tclnt_destroy\ (clnt)\;\n#endif\t\ /*\ DEBUG\ */\n\}\n\n\nint\nmain\ (int\ argc,\ char\ *argv\[\])\n\{\n\tchar\ *host\;\n\n\tif\ (argc\ <\ 2)\ \{\n\t\tprintf\ (\"usage:\ %s\ server_host\\n\",\ argv\[0\])\;\n\t\texit\ (1)\;\n\t\}\n\thost\ =\ argv\[1\]\;\n\tprogmacierze_1\ (host)\;\nexit\ (0)\;\n\}\n\n//------------------------------------------------------------------------------\n\n\nmatrix_server.c\n\\\\------------------------------------------------------------------------------\n\n#include\ \"matrix.h\"\n\nvoid\ *\npokazmacierz_1_svc(Mac\ *argp,\ struct\ svc_req\ *rqstp)\n\{\n\tstatic\ char\ *\ result\;\n\t\n\tint\ i\;\n\tfor\ (i\ =\ 0\;\ i\ <\ argp->IleW\ *\ argp->IleK\;\ i++)\ \{\n\t\tprintf(\"Element\[%i\]\ has\ value\ %f\\n\",\ i,\ argp->Elem.Elem_val\[i\])\;\n\t\}\n\n\treturn\ (void\ *)\ &result\;\n\}\n\n//------------------------------------------------------------------------------\n\nWysruk\ z\ konsoli\n\nKlient:\n\\\\------------------------------------------------------------------------------\n\ns396459@lts:~/TAS/Temat\ A/zadanie\ 3\$\ ./matrix_client\ localhost\nRows:\ \n2\nColumns:\ \n2\nEnter\ the\ value:\ 0\n1\nEnter\ the\ value:\ 1\n2\nEnter\ the\ value:\ 2\n3\nEnter\ the\ value:\ 3\n4\n\n//------------------------------------------------------------------------------\n\nSerwer:\n\\\\------------------------------------------------------------------------------\n\ns396459@lts:~/TAS/Temat\ A/zadanie\ 3\$\ ./matrix_server\nElement\[0\]\ has\ value\ 1.000000\nElement\[1\]\ has\ value\ 2.000000\nElement\[2\]\ has\ value\ 3.000000\nElement\[3\]\ has\ value\ 4.000000\n\n//------------------------------------------------------------------------------\n\n/////////////////////////////////\ Zadanie\ 4\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\nmatrix.x\n\\\\------------------------------------------------------------------------------\n\nstruct\ Macierz\ \{\n\ \ float\ Elem\ <>\;\n\ \ int\ IleW\;\ int\ IleK\;\n\}\;\ntypedef\ struct\ Macierz\ Mac\;\n\nstruct\ DwieMacierze\ \{\ Mac\ M1\;\ Mac\ M2\;\}\;\n\ntypedef\ struct\ DwieMacierze\ DwieMac\;\n\nprogram\ ProgMacierze\ \{\n\ \ version\ VerMacierze\ \{\n\ \ \ \ Mac\ dodaj(DwieMac)\ =\ 1\;\n\ \ \}\ =\ 1\;\n\}\ =\ 0x21001234\;\n\n//------------------------------------------------------------------------------\n\nProgram\ jest\ bardzo\ podobny\ do\ programu\ z\ zadania\ 3,\ zmiany\ zosta³y\ wprowadzone\ miêdzy\ innymi\ w\ funcji\ progmacie¿\ w\ matrix_client.c\n\n\\\\------------------------------------------------------------------------------\nvoid\nprogmacierze_1(char\ *host)\n\{\n\tCLIENT\ *clnt\;\n\tMac\ \ *result_1\;\n\tDwieMac\ \ dodaj_1_arg\;\n\n\t\n\tprintf(\"Rows:\ \\n\")\;\n\tscanf(\"%i\",\ &dodaj_1_arg.M1.IleW)\;\n\tdodaj_1_arg.M2.IleW\ =\ dodaj_1_arg.M1.IleW\;\n\n\tprintf(\"Columns:\ \\n\")\;\n\tscanf(\"%i\",\ &dodaj_1_arg.M1.IleK)\;\n\tdodaj_1_arg.M2.IleK\ =\ dodaj_1_arg.M1.IleK\;\n\t\n\tdodaj_1_arg.M1.Elem.Elem_len\ =\ dodaj_1_arg.M1.IleW\ *\ dodaj_1_arg.M1.IleK\;\n\tdodaj_1_arg.M1.Elem.Elem_val\ =\ calloc(dodaj_1_arg.M1.Elem.Elem_len,\ sizeof(float))\;\n\n\tint\ i\ =\ 0\;\n\tfor\ (i\ =\ 0\;\ i\ <\ dodaj_1_arg.M1.Elem.Elem_len\;\ i++)\ \{\n\t\tprintf(\"Enter\ the\ value(first\ matrix):\ %i\\n\",\ i)\;\n\t\tfloat\ x\ =\ 0\;\n\t\tscanf(\"%f\",\ &x)\;\n\t\tdodaj_1_arg.M1.Elem.Elem_val\[i\]\ =\ x\;\n\t\}\n\n\t\n\tdodaj_1_arg.M2.Elem.Elem_len\ =\ dodaj_1_arg.M2.IleW\ *\ dodaj_1_arg.M2.IleK\;\n\tdodaj_1_arg.M2.Elem.Elem_val\ =\ calloc(dodaj_1_arg.M2.Elem.Elem_len,\ sizeof(float))\;\n\n\ti\ =\ 0\;\n\tfor\ (i\ =\ 0\;\ i\ <\ dodaj_1_arg.M2.Elem.Elem_len\;\ i++)\ \{\n\t\tprintf(\"Enter\ the\ value(second\ matrix):\ %i\\n\",\ i)\;\n\t\tfloat\ x\ =\ 0\;\n\t\tscanf(\"%f\",\ &x)\;\n\t\tdodaj_1_arg.M2.Elem.Elem_val\[i\]\ =\ x\;\n\t\}\n\n//------------------------------------------------------------------------------\n\nNie\ zwalniamy\ pamiêci,\ macie¿\ czytamy\ 2x\ i\ ustalamy\ liczbê\ kolumn\ i\ wierszy\n\nDodatkowe\ zmiany\ w\ pliku\ matrix_serwer.c\n\\\\------------------------------------------------------------------------------\n\nMac\ *\ndodaj_1_svc(DwieMac\ *argp,\ struct\ svc_req\ *rqstp)\{\n\tstatic\ Mac\ \ result\;\n\tresult.IleW\ =\ argp->M1.IleW\;\n\tresult.IleK\ =\ argp->M1.IleK\;\n\n\tresult.Elem.Elem_len\ =\ result.IleW\ *\ result.IleK\;\n\tresult.Elem.Elem_val\ =\ calloc(result.Elem.Elem_len,\ sizeof(float))\;\n\n\t\n\tint\ i\ =\ 0\;\n\tfor\ (i\ =\ 0\;\ i\ <\ result.Elem.Elem_len\;\ i++)\ \{\n\t\tresult.Elem.Elem_val\[i\]\ =\ argp->M1.Elem.Elem_val\[i\]\ +\ argp->M2.Elem.Elem_val\[i\]\;\n\t\}\n\n\ti\ =\ 0\;\n\tfor\ (i\ =\ 0\;\ i\ <\ result.Elem.Elem_len\;\ i++)\ \{\n\t\tprintf(\"Element\ \[%i\]\ has\ value\ =\ %f\\n\",\ i,\ result.Elem.Elem_val\[i\])\;\n\t\}\n\tfree(result.Elem.Elem_val)\;\n\treturn\ &result\;\n\}\n\n//------------------------------------------------------------------------------\n\nWydruk\ z\ konsoli\n\nKlient:\n\\\\------------------------------------------------------------------------------\n\ns396459@lts:~/TAS/Temat\ A/Zadanie\ 4\$\ ./matrix_client\ localhost\nRows:\ \n2\nColumns:\ \n2\nEnter\ the\ value(first\ matrix):\ 0\n1\nEnter\ the\ value(first\ matrix):\ 1\n2\nEnter\ the\ value(first\ matrix):\ 2\n3\nEnter\ the\ value(first\ matrix):\ 3\n4\nEnter\ the\ value(second\ matrix):\ 0\n1\nEnter\ the\ value(second\ matrix):\ 1\n2\nEnter\ the\ value(second\ matrix):\ 2\n3\nEnter\ the\ value(second\ matrix):\ 3\n4\n\n//------------------------------------------------------------------------------\n\nSerwer:\n\\\\------------------------------------------------------------------------------\n\ns396459@lts:~/TAS/Temat\ A/Zadanie\ 4\$\ ./matrix_server\nElement\ \[0\]\ has\ value\ =\ 2.000000\nElement\ \[1\]\ has\ value\ =\ 4.000000\nElement\ \[2\]\ has\ value\ =\ 6.000000\nElement\ \[3\]\ has\ value\ =\ 8.000000\n\n//------------------------------------------------------------------------------\n
