przedmiot TAS temat A nr_indeksu 396363 liczba_pkt 4 

 

Zadanie 1  -------------------------------------

Struktura macierzy w pliku plik.x wygl±da nastêpuj±co:

struct Macierz {
	float Elem <>;
	int IleW;
	int IleK;};

Interpretaja macierzy wygl±da nastêpuj±co

struct Macierz {
	struct {
		u_int Elem_len ;
		float *Elem_val ;  
	} Elem ;
	int IleW ;
	int IleK ;
	};

£atwo wiêc zauwa¿yæ z powy¿szych warto¶ci, w jaki sposób s± t³umaczone tablice przez rpcgen

Zadanie 2  -------------------------------------

Do prawid³owego dzia³ania programu nale¿y dokonaæ kilku zmian. W progservice_1 nale¿y dodaæ
2 zmienne, które bêd± wykorzystywane przy sumowaniu, przypisaæ je, a nastêpnie dodaæ do wyj¶cia,
wy¶wietlane w result_1. W main nale¿y dodaæ 2 zmienne,przypisaæ je, a nastêpnie dodaaæ do wyj¶cia 
result_1.

Po zmianach plik sum.client.c wygl±da nastêpuj±co

void progservice_1(char *host, int zm1, int zm2)
{
	CLIENT *clnt;
	int  *result_1;
	ParaLi suma_1_arg;
	suma_1_arg.x1 = zm1;
	suma_1_arg.x2 = zm2;

	#ifndef	DEBUG
	clnt = clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
	#endif	/* DEBUG */

	result_1 = suma_1(&suma_1_arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

	printf("%d + %d = %d\n", zm1, zm2, *result_1);

	#ifndef	DEBUG
	clnt_destroy (clnt);
	#endif	 /* DEBUG */
}

int main (int argc, char *argv[])
{
	char *host;
	int zm1, zm2;

	if (argc < 4) 
	{
		printf ("usage: %s server_host zm1 zm2\n", argv[0]);
		exit (1);
	}

	host = argv[1];
	sscanf (argv[2], "%d", &zm1);
	sscanf (argv[3], "%d", &zm2);

	progservice_1 (host, zm1, zm2);
	exit (0);
}

Plik sum_server.c wygl±da nastêpuj±co
int *suma_1_svc(ParaLi *argp, struct svc_req *rqstp)
{
	static int  result;

	result = argp->x1 + argp->x2;

	return &result;
}

// Nie jestem w stanie dodaæ wydruku z konsoli, poniewa¿ nie posiadam praw do takich operacji.

Zadanie 3  -------------------------------------

Po wywo³aniu programów otrzymujemy nastêpuj±co
po wywo³aniu klienta
s396363@lts:~/Desktop/TAS/Temat A/ ./matrix_client localhost
Wiersz: 
3
Kolumna: 
3
Podaj wartosc: 0
1
Podaj wartosc: 1
2
Podaj wartosc: 2
3
Podaj wartosc: 3
4
Podaj wartosc: 4
5
Podaj wartosc: 5
6
Podaj wartosc: 6
7
Podaj wartosc: 7
8
Podaj wartosc: 8
9

w konsoli z serwerem otrzymujemy nastêpuj±cy wynik:
s396363@lts:~/Desktop/TAS/Temat A/ ./matrix_server
Element[0] ma wartosc 1.000000
Element[1] ma wartosc 2.000000
Element[2] ma wartosc 3.000000
Element[3] ma wartosc 4.000000
Element[4] ma wartosc 5.000000
Element[5] ma wartosc 6.000000
Element[6] ma wartosc 7.000000
Element[7] ma wartosc 8.000000
Element[8] ma wartosc 9.000000

Pliki do wykonania tego zadania wygl±daj± nastêpuj±co 
Plik matrix_server.c prezentuje siê nastêpuj±co

void *
pokazmacierz_1_svc(Mac *argp, struct svc_req *rqstp)
{
	static char * result;
	int i;
	for (i = 0; i < argp->IleW * argp->IleK; i++)
	{
		printf("Element[%i] ma wartosc %f\n", i, argp->Elem.Elem_val[i]);
	}

	return (void *) &result;
}

Plik matrix_client.c prezentuje siê nastêpuj±co:

void
progmacierze_1(char *host)
{
	float x = 0;
	CLIENT *clnt;
	void  *result_1;
	Mac  pokazmacierz_1_arg;
	printf("Wiersz: \n");
	scanf("%i", &pokazmacierz_1_arg.IleW);
	printf("Kolumna: \n");
	scanf("%i", &pokazmacierz_1_arg.IleK);
	pokazmacierz_1_arg.Elem.Elem_len = pokazmacierz_1_arg.IleW * pokazmacierz_1_arg.IleK;
	pokazmacierz_1_arg.Elem.Elem_val = calloc(pokazmacierz_1_arg.Elem.Elem_len, sizeof(float));
	int i;
	for (i = 0; i < pokazmacierz_1_arg.Elem.Elem_len; i++)
	{
		printf("Podaj wartosc: %i\n", i);
		scanf("%f", &x);
		pokazmacierz_1_arg.Elem.Elem_val[i] = x;
	}
	free(pokazmacierz_1_arg.Elem.Elem_val);
}

Plik matrix.x wygl±da tak:

struct Macierz {
  float Elem <>;
  int IleW; int IleK;
};
typedef struct Macierz Mac;

program ProgMacierze {
  version VerMacierze {
    void PokazMacierz(Mac) = 1;
  } = 1;
} = 0x21003663;

Zadanie 4  -------------------------------------

Zadanie 4 wykona³em analogicznie do zadania 3, zmieniaj±c kod w plikach matrix_client.c
oraz matrix_server.c

W konsolach clienta prezentuje siê nastêpuj±co
s396363@lts:~/Desktop/TAS/Temat A/ ./matrix_client localhost
Wiersz: 
2
Kolumna: 
2
Podaj wartosc(pierwsza macierz): 0
1
Podaj wartosc(pierwsza macierz): 1
2
Podaj wartosc(pierwsza macierz): 2
3
Podaj wartosc(druga macierz): 3
4
Podaj wartosc(druga macierz): 0
5
Podaj wartosc(druga macierz): 1
6
Podaj wartosc(druga macierz): 2
7
Podaj wartosc(druga macierz): 3
8

W konsoli servera otrzymuje nastêpuj±ce warto¶ci

s396363@lts:~/Desktop/TAS/Temat A/ ./matrix_server
Element[0] ma wartosc 6.000000
Element[1] ma wartosc 8.000000
Element[2] ma wartosc 10.000000
Element[3] ma wartosc 12.000000

Po modyfikacjach pliki wygl±daj± nastêpuj±co
Plik servera wygl±da tak:

Mac *
dodaj_1_svc(DwieMac *argp, struct svc_req *rqstp){
	static Mac  result;
	result.IleW = argp->M1.IleW;
	result.IleK = argp->M1.IleK;
	result.Elem.Elem_len = result.IleW * result.IleK;
	result.Elem.Elem_val = calloc(result.Elem.Elem_len, sizeof(float));
	int i = 0;
	for (i = 0; i < result.Elem.Elem_len; i++) 
	{
		result.Elem.Elem_val[i] = argp->M1.Elem.Elem_val[i] + argp->M2.Elem.Elem_val[i];
	}
	i = 0;
	for (i = 0; i < result.Elem.Elem_len; i++)
	{
		printf("Element [%i] ma wartosc = %f\n", i, result.Elem.Elem_val[i]);
	}
	free(result.Elem.Elem_val);
	return &result;
}

Kod z pliku clienta prezentuje siê nastêpuj±co:

void
progmacierze_1(char *host)
{
	CLIENT *clnt;
	Mac  *result_1;
	DwieMac  dodaj_1_arg ;
	printf("Rows: \n");
	scanf("%i", &dodaj_1_arg.M1.IleW);
	dodaj_1_arg.M2.IleW = dodaj_1_arg.M1.IleW;
	printf("Columns: \n");
	scanf("%i", &dodaj_1_arg.M1.IleK);
	dodaj_1_arg.M2.IleK = dodaj_1_arg.M1.IleK;
	dodaj_1_arg.M1.Elem.Elem_len = dodaj_1_arg.M1.IleW * dodaj_1_arg.M1.IleK;
	dodaj_1_arg.M1.Elem.Elem_val = calloc(dodaj_1_arg.M1.Elem.Elem_len, sizeof(float));
	int i = 0;
	for (i = 0; i < dodaj_1_arg.M1.Elem.Elem_len; i++) 
	{
		printf("Enter the value(first matrix): %i\n", i);
		float x = 0;
		scanf("%f", &x);
		dodaj_1_arg.M1.Elem.Elem_val[i] = x;
	}
	dodaj_1_arg.M2.Elem.Elem_len = dodaj_1_arg.M2.IleW * dodaj_1_arg.M2.IleK;
	dodaj_1_arg.M2.Elem.Elem_val = calloc(dodaj_1_arg.M2.Elem.Elem_len, sizeof(float));
	i = 0  ;
	for (i = 0; i < dodaj_1_arg.M2.Elem.Elem_len; i++) 
	{
		printf("Enter the value(second matrix): %i\n", i);
		float x = 0;
		scanf("%f", &x);
		dodaj_1_arg.M2.Elem.Elem_val[i] = x;
	}
}

Nale¿a³o w nim powtórzyæ jeszcze raz pêtle for itp. aby powsta³a dwóga macierz, z któr± zostaje 
dodana pierwsza macierz. 
Plik matrix.x wygl±da nastêpuj±co: 

struct Macierz 
{
  float Elem <>;
  int IleW; int IleK;
};
typedef struct Macierz Mac;

struct DwieMacierze { Mac M1; Mac M2;};

typedef struct DwieMacierze DwieMac;

program ProgMacierze 
{
    version VerMacierze 
	{
       Mac dodaj(DwieMac) = 1;
    } = 1;
} = 0x21003663;


}
