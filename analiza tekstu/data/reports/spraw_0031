przedmiot TAS temat B nr_indeksu 396413 liczba_pkt 5 



Zadanie 10.1 -----------------------------------------------------------------------------------
Zmodyfikowa³em sss.java (powolnaMetoda()) w nastêpuj±cy sposób:

 public int powolnaMetoda() throws RemoteException
  {
	for (licznik = 0; licznik<10 ; licznik++)
	{
	    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
		Thread aktualnywatek = Thread.currentThread();
		String nazwa = aktualnywatek.getName();
		System.out.println("Nazwa " + nazwa);
	}
    try {Thread.sleep(200);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }

Nastêpnie postêpowa³em zgodnie wed³ug instrukcji:


    w katalogu serwera:
        kompilujemy sss.java poleceniem:
            javac sss.java
        powstan± pliki:
            OdleglaKlasa.class - klasa OdleglaKlasa implementuj±ca interfejs OdleglyObiekt
            OdleglyObiekt.class - interfejs OdleglyObiekt
            sss.class
        uruchamiamy kompilator rmic:
            rmic Odleg³aKlasa
        powstan± pliki:
            OdleglaKlasa_Skel.class
            OdleglaKlasa_Stub.class
        kopiujemy kody klas: Odleg³yObiekt.class oraz Odleg³aKlasa_Stub.class do katalogu klienta
        uruchamiamy rmiregistry; rmiregistry MUSI mieæ dostêp do klas serwera poprzez zmienn± ¶rodowiska CLASSPATH (zazwyczaj wystarczy uruchomiæ rmiregistry z katalogu serwera!)
        uruchamiamy serwer poleceniem:
            java sss
    w katalogu klienta:
        kompilujemy kod klienta
        uruchamiamy klienta poleceniem:
            java kkk

Uruchomienie rmiregistry:

s396413@pc23m:~/My Documents/TAS/Temat B/Zad10/SERWER$ rmiregistry

Uruchomienie serwera:

s396413@pc23m:~/My Documents/TAS/Temat B/Zad10/SERWER$ java sss

Uruchomienie dwóch klientów w osobnych terminalach:

s396413@pc23m:~/My Documents/TAS/Temat B/Zad10/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=10
kkk: oo2.powolnaMetoda()=10
kkk: oo2.powolnaMetoda()=10

s396413@pc23m:~/My Documents/TAS/Temat B/Zad10/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=10
kkk: oo2.powolnaMetoda()=10
kkk: oo2.powolnaMetoda()=10

W terminalu serwera pokazuje siê takie co¶:

Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !

Zadanie 10.2 -------------------------------------------------------------------------------------------------------

Najpierw poka¿e jak dzia³a program gdy drugi obiekt jest eksportowany. Muszê uruchomiæ dwóch klientów. Nie edytujê nic w kodzie.
Wydruki z serwera:

sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=2
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=2
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=3
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=4
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=3
sss: powolnaMetoda(); licznik=4
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=5
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=6
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=7
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=8
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); koniec dzialania !


Wydruk z pierwszego klienta:

kkk: oo.powolnaMetoda()=4
kkk: oo2.powolnaMetoda()=6
kkk: oo2.powolnaMetoda()=8

Wydruk z drugiego klienta:

kkk: oo.powolnaMetoda()=4
kkk: oo2.powolnaMetoda()=7
kkk: oo2.powolnaMetoda()=8

Widaæ tutaj ¿e metoda jest wywo³ywana na rzecz jednego obiektu na serwerze. Dlatego koñcowy stan licznika jest taki sam (8).

Teraz poka¿e co siê stanie jak dzia³a program gdy drugiObiekt nie bêdzie eksportowany.
Tak wygl±da kod OdleglaKlasa:

OdleglaKlasa(String s) throws RemoteException
  {
   super();
    try {
      UnicastRemoteObject.exportObject(this);
        // tu decydujemy ze obiekt bedzie "zdalny"
        // exportObject() musi byc PRZED rebind() !!!
      Naming.rebind(s,this);
        // rejestruje sie w Naming Service (= rmiregistry)
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }

    // tworzymy drugi obiekty ...
    drugiObiekt= new OdleglaKlasa();
    //UnicastRemoteObject.exportObject(drugiObiekt);
      // tu decydujemy ze drugi obiekt bedzie "odlegly"

    System.out.println("sss: OdleglaKlasa(String); ok");
  }

Ja widzimy zakomentowa³em tylko linijkê //UnicastRemoteObject.exportObject(drugiObiekt);

Pierwszy klient:
sss: powolnaMetoda(); licznik=1
current thread = Thread[main,5,main]
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=1
sss: powolnaMetoda(); licznik=2
current thread = Thread[main,5,main]
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=2

Drugi klient:
sss: powolnaMetoda(); licznik=1
current thread = Thread[main,5,main]
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=1
sss: powolnaMetoda(); licznik=2
current thread = Thread[main,5,main]
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=2

Gdy drugi obiekt nie jest eksportowany czê¶æ wydruków z serwera pojawia siê w terminalach klientów.

Zadanie 10.3 ----------------------------------------------------------------------------------------------

Wrzucam wyj±tek do powolnametoda()

public int powolnaMetoda() throws RemoteException
  {
	for (licznik = 0; licznik<10 ; licznik++)
	{
	    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
		Thread aktualnywatek = Thread.currentThread();
		String nazwa = aktualnywatek.getName();
		System.out.println("Nazwa " + nazwa);
	}
    try {Thread.sleep(200);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
	throw new RemoteException("sztucznie wygenerowany blad ...");
    //return licznik;
  }

Odpalam rmiregistry:

s396413@pc23m:~/My Documents/TAS/Temat B/Zad10/SERWER$ rmiregistry

Odpalam serwer:

s396413@pc23m:~/My Documents/TAS/Temat B/Zad10/SERWER$ java sss

Odpalam klienta:

s396413@pc23m:~/My Documents/TAS/Temat B/Zad10/KLIENT$ java kkk
kkk: blad !!! RemoteException occurred in server thread; nested exception is: 
	java.rmi.RemoteException: sztucznie wygenerowany blad ...

Widzimy ¿e wyj±tek nam wypisuje na kliencie a nie na serwerze

Zadanie 11 --------------------------------------------------------------------------------

Tworzymy interfejs OdleglyBufor. Oto jego kod:

import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public int pobierz() throws RemoteException, InterruptedException;
    public void wstaw(int element) throws RemoteException, InterruptedException;
}

Nastêpnie interface FabrukaBuforow. Kod:

import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
}

I do tego ServerLogic.java. Kod:

import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Integer> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Integer>();
    }
    
    public synchronized int pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(int element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("sss: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }
    
}

public class ServerLogic{
    public static void main(String[] argv){
       	try {
	    System.out.println("sss: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("sss: blad !!! "+e.getMessage());
	}
    }
}

W tym pliku mamy nastêpuj±ce klasy:
OBuforImpl - klasa implementuj±ca zdalny interfejs OdleglyBufor
TworzOdlegleBufory - klasa implementuj±ca zdalny interfejs fabryki odleglych buforow (interfejs FabrykaBuforow)
Publiczna klasa ServerLogic - klasa zawieraj±ca metodê main - logikê wywo³añ na serwerze

Teraz pliki ze strony klienta.

Klasa Client.java. Kod:

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Client{
  public static void main(String args[]){
      //System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBufor(10);



	  Runnable producent = new Runnable(){
		  public void run(){
		      try{
			  int x;
			  Random random = new Random(System.currentTimeMillis());
			  while(true){
			      x = random.nextInt(100);
			      bufor.wstaw(x);
			      Thread.sleep(random.nextInt(1000));
			  }
		      }catch(RemoteException ex){
			  System.out.println("Blad Remote: " + ex.getMessage());
		      }catch(InterruptedException ex){
			  System.out.println("Zakonczono produkcje");
			  return;
		      }
		  }
	  };
	  
	  Runnable konsument = new Runnable(){
		  public void run(){
		      try{
			  Random random = new Random(System.currentTimeMillis());
			  while(true){
			      System.out.println("pobrano " + bufor.pobierz());
			      Thread.sleep(random.nextInt(1000));
			  }
		      }catch(RemoteException ex){
			  System.out.println("Blad Remote: " + ex.getMessage());
		      }catch(InterruptedException ex){
			  System.out.println("Zakonczono konsumpcje");
			  return;
		      }
		  }
	  };

      	  final Thread produkuj = new Thread(producent);
	  final Thread konsumuj = new Thread(konsument);
	  
	  Runnable zakoncz = new Runnable(){
		  public void run(){
		      produkuj.interrupt();
		      konsumuj.interrupt();
		  }
	  };

          Runtime.getRuntime().addShutdownHook(new Thread(zakoncz));

		
	  produkuj.start();
	  konsumuj.start();
	  
     
    } catch(Exception e) {
      System.err.println("Client: blad !!! "+e.getMessage());
    }
  }
}

Kompiluje client i serwer:

s396413@pc23l:~/My Documents/TAS/Temat B/Zad11/SERWER$ javac ServerLogic.java 
Note: ServerLogic.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.

s396413@pc23l:~/My Documents/TAS/Temat B/Zad11/KLIENT$ javac Client.java 

Tak wygl±daj± wydruki ze strony serwera:

s396413@pc23l:~/My Documents/TAS/Temat B/Zad11/SERWER$ java ServerLogic 
sss: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono nowy bufor o rozmiarze: 10
wstawiono 62, #elementow w buforze: 1
wstawiono 71, #elementow w buforze: 1
wstawiono 22, #elementow w buforze: 1
wstawiono 76, #elementow w buforze: 1
wstawiono 57, #elementow w buforze: 1
wstawiono 62, #elementow w buforze: 2
wstawiono 30, #elementow w buforze: 1
wstawiono 92, #elementow w buforze: 2
wstawiono 1, #elementow w buforze: 3
wstawiono 19, #elementow w buforze: 3
wstawiono 64, #elementow w buforze: 4
wstawiono 74, #elementow w buforze: 3
wstawiono 61, #elementow w buforze: 3
wstawiono 58, #elementow w buforze: 4
wstawiono 45, #elementow w buforze: 3
wstawiono 20, #elementow w buforze: 3
wstawiono 64, #elementow w buforze: 4
wstawiono 66, #elementow w buforze: 3
wstawiono 89, #elementow w buforze: 4
wstawiono 12, #elementow w buforze: 2
wstawiono 37, #elementow w buforze: 2
wstawiono 29, #elementow w buforze: 3
wstawiono 21, #elementow w buforze: 1
wstawiono 71, #elementow w buforze: 2
wstawiono 5, #elementow w buforze: 1
wstawiono 20, #elementow w buforze: 2
wstawiono 68, #elementow w buforze: 2
wstawiono 5, #elementow w buforze: 1
wstawiono 49, #elementow w buforze: 1
wstawiono 65, #elementow w buforze: 2
wstawiono 27, #elementow w buforze: 3
wstawiono 0, #elementow w buforze: 4
wstawiono 26, #elementow w buforze: 5
wstawiono 14, #elementow w buforze: 5
wstawiono 59, #elementow w buforze: 6
wstawiono 56, #elementow w buforze: 7
wstawiono 90, #elementow w buforze: 7
wstawiono 6, #elementow w buforze: 7
wstawiono 22, #elementow w buforze: 8
wstawiono 26, #elementow w buforze: 8
wstawiono 34, #elementow w buforze: 8
wstawiono 29, #elementow w buforze: 9
wstawiono 0, #elementow w buforze: 10
wstawiono 71, #elementow w buforze: 10
wstawiono 43, #elementow w buforze: 7
wstawiono 1, #elementow w buforze: 7
wstawiono 30, #elementow w buforze: 8
wstawiono 56, #elementow w buforze: 8
wstawiono 99, #elementow w buforze: 8
wstawiono 9, #elementow w buforze: 9
wstawiono 58, #elementow w buforze: 8
wstawiono 13, #elementow w buforze: 8
wstawiono 91, #elementow w buforze: 9
wstawiono 74, #elementow w buforze: 9
wstawiono 11, #elementow w buforze: 8
wstawiono 67, #elementow w buforze: 8
wstawiono 76, #elementow w buforze: 7
wstawiono 45, #elementow w buforze: 8
wstawiono 59, #elementow w buforze: 7

A tak wygl±daj± wydruki ze storny klienta:

s396413@pc23l:~/My Documents/TAS/Temat B/Zad11/KLIENT$ java Client 
pobrano 62
pobrano 71
pobrano 22
pobrano 76
pobrano 57
pobrano 62
pobrano 30
pobrano 92
pobrano 1
pobrano 19
pobrano 64
pobrano 74
pobrano 61
pobrano 58
pobrano 45
pobrano 20
pobrano 64
pobrano 66
pobrano 89
pobrano 12
pobrano 37
pobrano 29
pobrano 21
pobrano 71
pobrano 5
pobrano 20
pobrano 68
pobrano 5
pobrano 49
pobrano 65
pobrano 27
pobrano 0
pobrano 26
pobrano 14
pobrano 59
pobrano 56
pobrano 90
pobrano 6
pobrano 22
pobrano 26
pobrano 34
pobrano 29
pobrano 0
pobrano 71
pobrano 43
pobrano 1
pobrano 30
pobrano 56
pobrano 99
pobrano 9
pobrano 58
pobrano 13
^CZakonczono konsumpcje

Zadanie 12 ------------------------------------------------------------------------------------------------

Zmieniamy trochê kod programów:

Interface FabrykaBuforow:

import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
    OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException;
}

Interface OdleglyBufor:

import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public int pobierz() throws RemoteException, InterruptedException;
    public void wstaw(int element) throws RemoteException, InterruptedException;
}

Plik ServerLogic.java:

import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Integer> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Integer>();
    }
    
    public synchronized int pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(int element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    private final Map<String, OdleglyBufor> memory;
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	memory = new HashMap<String, OdleglyBufor>();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("ServerLogic: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }

    public OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa){
	if(memory.containsKey(nazwa)){
	    System.out.println("wys³ano do klienta bufor o nazwie: " + nazwa);
	    return memory.get(nazwa);
	}else{
	    OdleglyBufor odleglyBufor =  new OBuforImpl(10);
	    try {
		UnicastRemoteObject.exportObject(odleglyBufor);
	    } catch(Exception e) {
		System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
	    }
	    memory.put(nazwa, odleglyBufor);
	    System.out.println("Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: " + nazwa);
	    return odleglyBufor;
	}
    }
}

public class ServerLogic{
    public static void main(String[] argv){
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}

Od strony klienta teraz kod:

Producent.java:

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Producent{
  public static void main(String args[]){
      //System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons1");
	  int x;
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      x = random.nextInt(100);
	      bufor.wstaw(x);
	      System.out.println("Wstawiono: " + x);
	      Thread.sleep(random.nextInt(1000));
	  }
      } catch(Exception e) {
	  System.err.println("Producent: blad !!! "+e.getMessage());
      }
  }
}

Konsument.java:

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Konsument{
  public static void main(String args[]){
      //System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons1");
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      System.out.println("Pobrano: " + bufor.pobierz());
	      Thread.sleep(random.nextInt(1000));
	  }
      } catch(Exception e) {
	  System.err.println("Konsument: blad !!! "+e.getMessage());
      }
  }
}

Client.java pozostaje taki sam jak w zadaniu 11.

Teraz popatrzmy na wydruki serwera oraz klienta. 
Najpierw serwer:

s396413@lts:~/My Documents/TAS/Temat B/Zad12/SERWER$ java ServerLogic 
ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: prodKons1      //¯±danie przez producenta
wstawiono 49, #elementow w buforze: 1
wstawiono 97, #elementow w buforze: 2
wstawiono 23, #elementow w buforze: 3
wstawiono 79, #elementow w buforze: 4
wstawiono 16, #elementow w buforze: 5
wstawiono 60, #elementow w buforze: 6
wstawiono 13, #elementow w buforze: 7
wstawiono 20, #elementow w buforze: 8
wstawiono 66, #elementow w buforze: 9
wstawiono 69, #elementow w buforze: 10
wys³ano do klienta bufor o nazwie: prodKons1								//¯±danie przez konsumenta
wstawiono 45, #elementow w buforze: 10
wstawiono 34, #elementow w buforze: 9
wstawiono 87, #elementow w buforze: 10
wstawiono 51, #elementow w buforze: 9
wstawiono 12, #elementow w buforze: 10
wstawiono 81, #elementow w buforze: 7
wstawiono 6, #elementow w buforze: 7
wstawiono 23, #elementow w buforze: 7
wstawiono 49, #elementow w buforze: 8
wstawiono 48, #elementow w buforze: 9
wstawiono 67, #elementow w buforze: 9
wstawiono 35, #elementow w buforze: 10
wstawiono 79, #elementow w buforze: 9
wstawiono 45, #elementow w buforze: 10
wstawiono 16, #elementow w buforze: 10
wstawiono 1, #elementow w buforze: 10


Klient producent:

s396413@lts:~/My Documents/TAS/Temat B/Zad12/KLIENT$ java Producent 
Wstawiono: 49
Wstawiono: 97
Wstawiono: 23
Wstawiono: 79
Wstawiono: 16
Wstawiono: 60
Wstawiono: 13
Wstawiono: 20
Wstawiono: 66
Wstawiono: 69
Wstawiono: 45
Wstawiono: 34
Wstawiono: 87
Wstawiono: 51
Wstawiono: 12
Wstawiono: 81
Wstawiono: 6
Wstawiono: 23
Wstawiono: 49
Wstawiono: 48
Wstawiono: 67
Wstawiono: 35
Wstawiono: 79
Wstawiono: 45
Wstawiono: 16
Wstawiono: 1

Klient konsument:

s396413@lts:~/My Documents/TAS/Temat B/Zad12/KLIENT$ java Konsument 
Pobrano: 49
Pobrano: 97
Pobrano: 23
Pobrano: 79
Pobrano: 16
Pobrano: 60
Pobrano: 13
Pobrano: 20
Pobrano: 66
Pobrano: 69
Pobrano: 45
Pobrano: 34
Pobrano: 87
Pobrano: 51
Pobrano: 12
Pobrano: 81


Zadanie 13 -------------------------------------------------------------------------------------------

Zacznijmy od pokazania kodu programów:

Tak wygl±da OdleglyObiekt.java:

/*
eksperymenty z RMI (def zdalnego interfejsu)
*/

import java.rmi.*;

public interface OdleglyObiekt extends Remote{
    OdleglyObiekt drugiObiekt() throws RemoteException;
    int powolnaMetoda() throws RemoteException;
    PrzykladowaKlasa eksperyment1(PrzykladowaKlasa pk1, PrzykladowaKlasa pk2) throws RemoteException;
}

Nastêpnie plik PrzykladowaKlasa.java:

import java.util.Random;
import java.io.Serializable;

public class PrzykladowaKlasa implements Serializable{
    private final String nazwa;
    private final int numer;

    public PrzykladowaKlasa(){
	nazwa = "Instancja klasy PrzykladowaKlasa";
	numer = new Random(System.currentTimeMillis()).nextInt();
	
	System.out.println("Utworzono instancje klasy PrzykladowaKlasa");
    }

    public String pokaz(){
	return "moja nazwa to " + nazwa + ", a moj numer to " + numer;
    }
}

G³ówny plik sss.java:

/*
eksperymenty z RMI (serwer)
*/

import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*;
import java.io.*;
import java.util.Random;


class OdleglaKlasa
implements OdleglyObiekt, Serializable
{
  OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
        // tu decydujemy ze obiekt bedzie "zdalny"
        // exportObject() musi byc PRZED rebind() !!!
      Naming.rebind(s,this);
        // rejestruje sie w Naming Service (= rmiregistry)
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }

    // tworzymy drugi obiekty ...
    drugiObiekt= new OdleglaKlasa();
    UnicastRemoteObject.exportObject(drugiObiekt);
      // tu decydujemy ze drugi obiekt bedzie "odlegly"

    System.out.println("sss: OdleglaKlasa(String); ok");
  }
  OdleglaKlasa() throws RemoteException
  {
    super();
    System.out.println("sss: OdleglaKlasa(); ok");
  }

  // -------- implementacja interf OdleglyObiekt ----------

  private OdleglyObiekt drugiObiekt;
  public OdleglyObiekt drugiObiekt() throws RemoteException
  {
    return drugiObiekt;
  }

  int licznik=0;
  public int powolnaMetoda() throws RemoteException
  {
    licznik++;
    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
    try {Thread.sleep(200);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }

    public PrzykladowaKlasa eksperyment1(PrzykladowaKlasa pk1, PrzykladowaKlasa pk2){
	System.out.println(pk1.pokaz());
	System.out.println(pk2.pokaz());
	return (new Random(System.currentTimeMillis()).nextInt() % 2 == 0) ? pk1 : pk2;
    }
  // ------------------------------------------------------
}

public class sss
{
  public static void main(String args[])
  {
    System.setSecurityManager(new RMISecurityManager());

    try {
      System.out.println("sss: zaczynam tworzyc obiekty ...");
      OdleglyObiekt oo= new OdleglaKlasa("przyklad_rmi4");
      System.out.println("sss: obiekty utworzone !!!");
    } catch(Exception e) {
      System.err.println("sss: blad !!! "+e.getMessage());
    }
  }
}

To tyle po stronie serwera. Teraz strona klienta.

Zacznijmy od klasy dziedzicz±cej z PrzykladowaKlasa.java czyli u nas PrzykladowaKlasa2:

import java.util.Date;

public class PrzykladowaKlasa2 extends PrzykladowaKlasa{
    private final Date data;
   
    public PrzykladowaKlasa2(){
	super();
	data = new Date();
	System.out.println("Utworzono instancje PrzykladowaKlasa2");
    }

    @Override
    public String pokaz(){
	return super.pokaz() + ", moja data utworzenia to " + data;
    }
}

I g³ówny plik kkk.java:

/*
eksperymenty z RMI (klient)
*/

import java.rmi.*;
import java.rmi.registry.*;

public class kkk
{
  public static void main(String args[])
  {
    System.setSecurityManager(new RMISecurityManager());

    try {
      OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
        "rmi://localhost/przyklad_rmi4");
      PrzykladowaKlasa2 pk2 = new PrzykladowaKlasa2();
      PrzykladowaKlasa pk1 = new PrzykladowaKlasa();
      PrzykladowaKlasa result = oo.eksperyment1(pk1, pk2);

      System.out.println(result.pokaz());
      
    } catch(Exception e) {
      System.err.println("kkk: blad !!! "+e.getMessage());
    }
  }
}

I jeszcze do tego mamy plik.polityka. Po stronie klienta oraz serwera jest to samo:

grant { permission java.security.AllPermission; }; 

Pliki class umie¶ci³em na stronie https://s396413.students.wmi.amu.edu.pl/Zad13/. Nie umieszczam pliku PrzykladowaKlasa2 po stronie serwera. 

Przedstawiam po kolei jak wygl±da odpalanie programu:

1:

s396413@lts:~/My Documents/TAS/Temat B/Zad13/SERVER$ rmiregistry

2:

s396413@lts:~/My Documents/TAS/Temat B/Zad13/SERVER$ java -Djava.security.policy=./plik.polityka -Djava.rmi.server.codebase=https://s396413.students.wmi.amu.edu.pl/Zad13/ sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!

3:

s396413@lts:~/My Documents/TAS/Temat B/Zad13/KLIENT$ java -Djava.security.policy=./plik.polityka -Djava.rmi.server.codebase=https://s396413.students.wmi.amu.edu.pl/Zad13/ kkk
Utworzono instancje klasy PrzykladowaKlasa
Utworzono instancje PrzykladowaKlasa2
Utworzono instancje klasy PrzykladowaKlasa
moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -618781056, moja data utworzenia to Sat Nov 21 14:11:17 CET 2015

Po stronie serwera pojawiaj± siê takie wydruki:

moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -619165805
moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -618781056, moja data utworzenia to Sat Nov 21 14:11:17 CET 2015

Zadanie 14.

Tworzê sobie trzy obiekty trzech klas nie maj±cych nic wspólnego. Ich wspóln± nadklas± jest Object.

Dodajemy plik.polityka po stronie klienta i serwera. Po obu stronach takie samo jak w zadaniu 13:

grant { permission java.security.AllPermission; }; 

Potem kod po stronie klienta.
Ksiazka.java:

import java.io.Serializable;

public class Ksiazka implements Serializable{
    private final int liczbaStron;
    private final String tytul;
    private final String autor;
    private final String tematyka;

    public Ksiazka(int l, String tyt, String a, String tem){
	liczbaStron = l;
	tytul = tyt;
	autor = a;
	tematyka = tem;
    }

    @Override
    public String toString(){
	return "(Ksiazka: " + autor + ", " + tytul + ", " + tematyka + ", " + liczbaStron + "str)";
    }
}

Samochod.java:

import java.io.Serializable;

public class Samochod implements Serializable{
    private final int moc;
    private final int vMax;
    private final String model;

    public Samochod(int m, int v, String mod){
	moc = m;
	vMax = v;
	model = mod;
    }

    @Override
    public String toString(){
	return "(Samochod: " + model +", moc = " + moc + ", vMax = " + vMax + ")";
    }
}

Rower.java:

import java.io.Serializable;

public class Rower implements Serializable{
    private final int rozmiarRamy;
    private final String klasa;
    private final boolean meski;

    public Rower(int r, String k, boolean m){
	rozmiarRamy = r;
	klasa = k;
	meski = m;
    }

    @Override
    public String toString(){
	String plec = meski ? "meski" : "damski";
	return "("+ plec +  " Rower " + klasa +", o rozmiarze ramy " + rozmiarRamy + ")";
    }

}


Definicje tych klas s± zawarte w producent i konsument z zadania 12.

Producent.java:

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Producent{
  public static void main(String args[]){
      System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons2");
	  String[] tytuly = {
	      "Dziady", 
	      "Potop", 
	      "Granica", 
	      "Ferdydurke"  
	  };

	  String[] autorzy = {
	      "Adam Mickiewicz", 
	      "Henryk Sienkiewicz", 
	      "Zofia Nalkowska", 
	      "Witold Gombrowicz"  
	  };

	  String[] samochody = {
	      "Honda Accord",
	      "Toyota Yaris",
	      "VW Golf",
	      "Renault Megane"
	  };

	  String[] rowery = {
	      "gorski",
	      "szosowy",
	      "BMX",
	      "Trialowy",
	      "Zjazdowy"
	  };


	  Object x = new Integer(4); // tylko dla formalnosci robie tu symboliczna inicjalizacje - kompilator tego wymaga
	  Random random = new Random(System.currentTimeMillis());
	  int los;
	  while(true){
	      random.setSeed(System.currentTimeMillis());
	      switch(random.nextInt(3)){
	         case 0:
		     los = random.nextInt(250);
		     x = new Ksiazka(los, tytuly[los % 4], autorzy[los % 4], "literatura piekna");
		     break;
	         case 1:
		     los = random.nextInt(50);
		     x = new Samochod(los * 5, los * 7, samochody[los%4]);
		     break;
	         case 2:
		     los = random.nextInt(7);
		     x = new Rower(los + 15, rowery[los % 5], (los % 2 == 0));
		     break;
	      }
	      
	      bufor.wstaw(x);
	      System.out.println("Wstawiono: " + x);
	      Thread.sleep(random.nextInt(2500));
	  }
      } catch(Exception e) {
	  System.err.println("Producent: blad !!! "+e.getMessage());
      }
  }
}


Konsument.java

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Konsument{
  public static void main(String args[]){
      System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons2");
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      System.out.println("Pobrano: \n" + bufor.pobierz() + "\n---------------------------------------------");
	      Thread.sleep(random.nextInt(2500));
	  }
      } catch(Exception e) {
	  System.err.println("Konsument: blad !!! "+e.getMessage());
      }
  }
}

Kod strony serwera:

OdleglyBufor.java:

import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public Object pobierz() throws RemoteException, InterruptedException;
    public void wstaw(Object element) throws RemoteException, InterruptedException;
}

FabrykaBuforow.java:

import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
    OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException;
}

ServerLogic.java:

import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Object> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Object>();
    }
    
    public synchronized Object pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(Object element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println();
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    private final Map<String, OdleglyBufor> memory;
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	memory = new HashMap<String, OdleglyBufor>();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("ServerLogic: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }

    public OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa){
	if(memory.containsKey(nazwa)){
	    System.out.println("wys³ano do klienta bufor o nazwie: " + nazwa);
	    return memory.get(nazwa);
	}else{
	    OdleglyBufor odleglyBufor =  new OBuforImpl(5);
	    try {
		UnicastRemoteObject.exportObject(odleglyBufor);
	    } catch(Exception e) {
		System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
	    }
	    memory.put(nazwa, odleglyBufor);
	    System.out.println("Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: " + nazwa);
	    return odleglyBufor;
	}
    }
}

public class ServerLogic{
    public static void main(String[] argv){
	System.setSecurityManager(new RMISecurityManager());
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}

Kompiluje plik w kliencie:

s396413@pc23l:~/My Documents/TAS/Temat B/Zad14/Klient$ javac Client.java

Na strone https://s396413.students.wmi.amu.edu.pl/Zad14/ umiesczam klasy:

Ksiazka.class
ObuforImpl.class
OBuforImpl_Stub.class
Rower.class
Samochod.class
TworzOdlegleBufory.class
TworzOdlegleBufory_Stub.class
Client.class
Client$1.class
Client$2.class
Client$3.class


Proces uruchamiania:

Po stronie serwera uruchamiamy rmiregistry:

s396413@lts:~/My Documents/TAS/Temat B/Zad14/Serwer$ rmiregistry

Nastêpnie uruchamiamy serwer:

s396413@lts:~/My Documents/TAS/Temat B/Zad14/Serwer$ java -Djava.security.manager -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s396413.students.wmi.amu.edu.pl/Zad14/ ServerLogic
ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!

Potem po stronie klienta odpalamy producenta:

s396413@pc23l:~/My Documents/TAS/Temat B/Zad14/Klient$ java -Djava.security.manager -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s396413.students.wmi.amu.edu.pl/Zad14/ Producent
Wstawiono: (Samochod: VW Golf, moc = 110, vMax = 154)
Wstawiono: (damski Rower gorski, o rozmiarze ramy 20)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 106str)
Wstawiono: (Samochod: Honda Accord, moc = 180, vMax = 252)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str)
Wstawiono: (damski Rower szosowy, o rozmiarze ramy 16)
Wstawiono: (damski Rower gorski, o rozmiarze ramy 20)
Wstawiono: (meski Rower BMX, o rozmiarze ramy 17)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 145str)
Wstawiono: (meski Rower BMX, o rozmiarze ramy 17)
Wstawiono: (meski Rower szosowy, o rozmiarze ramy 21)
Wstawiono: (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 119str)
Wstawiono: (damski Rower gorski, o rozmiarze ramy 20)
Wstawiono: (Samochod: VW Golf, moc = 230, vMax = 322)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 181str)
Wstawiono: (meski Rower BMX, o rozmiarze ramy 17)
Wstawiono: (damski Rower Trialowy, o rozmiarze ramy 18)

Nastêpnie Konsumenta:

s396413@pc23l:~/My Documents/TAS/Temat B/Zad14/Klient$ java -Djava.security.manager -Djava.security.policy=plik.polityka -Djava.rmi.server.codebase=https://s396413.students.wmi.amu.edu.pl/Zad14/ Konsument
Pobrano: 
(Samochod: VW Golf, moc = 110, vMax = 154)
---------------------------------------------
Pobrano: 
(damski Rower gorski, o rozmiarze ramy 20)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 106str)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 180, vMax = 252)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str)
---------------------------------------------
Pobrano: 
(damski Rower szosowy, o rozmiarze ramy 16)
---------------------------------------------
Pobrano: 
(damski Rower gorski, o rozmiarze ramy 20)
---------------------------------------------
Pobrano: 
(meski Rower BMX, o rozmiarze ramy 17)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 145str)
---------------------------------------------
Pobrano: 
(meski Rower BMX, o rozmiarze ramy 17)
---------------------------------------------
Pobrano: 
(meski Rower szosowy, o rozmiarze ramy 21)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 119str)
---------------------------------------------
Pobrano: 
(damski Rower gorski, o rozmiarze ramy 20)
---------------------------------------------
Pobrano: 
(Samochod: VW Golf, moc = 230, vMax = 322)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 181str)
---------------------------------------------
Pobrano: 
(meski Rower BMX, o rozmiarze ramy 17)
---------------------------------------------
Pobrano: 
(damski Rower Trialowy, o rozmiarze ramy 18)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 180, vMax = 252)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 67str)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 245, vMax = 343)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 215str)
---------------------------------------------
Pobrano: 
(meski Rower BMX, o rozmiarze ramy 17)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 70str)
---------------------------------------------
Pobrano: 
(Samochod: VW Golf, moc = 190, vMax = 266)
---------------------------------------------

I wydruk z serwera:

Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: prodKons2

wstawiono (Samochod: VW Golf, moc = 110, vMax = 154), #elementow w buforze: 1

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 2

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 106str), #elementow w buforze: 3

wstawiono (Samochod: Honda Accord, moc = 180, vMax = 252), #elementow w buforze: 4

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str), #elementow w buforze: 5
wys³ano do klienta bufor o nazwie: prodKons2

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 5

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 5

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 5

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 145str), #elementow w buforze: 5

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 3

wstawiono (meski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 3

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 119str), #elementow w buforze: 3

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 3

wstawiono (Samochod: VW Golf, moc = 230, vMax = 322), #elementow w buforze: 4

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 181str), #elementow w buforze: 5

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 4

wstawiono (damski Rower Trialowy, o rozmiarze ramy 18), #elementow w buforze: 5

wstawiono (Samochod: Honda Accord, moc = 180, vMax = 252), #elementow w buforze: 5

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 67str), #elementow w buforze: 5

wstawiono (Samochod: Toyota Yaris, moc = 245, vMax = 343), #elementow w buforze: 5

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 215str), #elementow w buforze: 5

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 5

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 70str), #elementow w buforze: 5

wstawiono (Samochod: VW Golf, moc = 190, vMax = 266), #elementow w buforze: 5

wstawiono (meski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 2

wstawiono (Samochod: Honda Accord, moc = 120, vMax = 168), #elementow w buforze: 2

wstawiono (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 16str), #elementow w buforze: 2

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 2

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 191str), #elementow w buforze: 3

(Wydruków by³o wiêcej gdy¿ nie zatrzyma³em serwera. By³o ich o wiele wiêcej ale wszsytkich nie skopiowa³em).


}
