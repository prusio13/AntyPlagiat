przedmiot TAS temat C nr_indeksu 396295 liczba_pkt 6 



=========================================== Zadanie 20. ===========================================

1. Wydruk java java-----------------------------------
klient -------------------------------------------

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=0
sayHello=Hello world !!!

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=1
sayHello=Hello world !!!

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=2
sayHello=Hello world !!!

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=3
sayHello=Hello world !!!

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=4
sayHello=Hello world !!!

serwer -------------------------------------------

J:\Desktop\TAS\C\Hello_Java>java HelloServer2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
HelloServant2()
IOR=IOR:000000000000001849444c3a48656c6c6f417070322f48656c6c6f3a312e30000000000100000000000000860001
02000000000e3136392e3235342e322e32323900b0f100000031afabcb000000002058889dc4000000010000000000000001
00000008526f6f74504f41000000000800000001000000001400000000000002000000010000002000000000000100010000
0002050100010001002000010109000000010001010000000026000000020002
orb.run();
podajLiczbe(), 0
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0,
podajLiczbe(), 1
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0,
podajLiczbe(), 2
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0,
podajLiczbe(), 3
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0,
podajLiczbe(), 4
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0,

2. ------------------------------------------------------

Wydruk tcl tcl

klient tcl:

#kons_font 16
lappend auto_path ./combat-tcl-0.7.4; package re combat
  #% 0.7

source Hello3.tcl
combat::ir add $_ir_Hello3
  # dodajemy wpis do (local) Interface Repository

set f [open {Hello.IOR} "r"]; set ior [read $f]; close $f
  # tu powinna byc sciezka do pliku ior utworzonego przez serwer !!

set m [corba::string_to_object $ior]
  # mozna wywolywac metody na rzecz ob. Corby $m ...

$m podajLiczbe
  #% 4
  #% 3
  #% 2
  #% 1
  #% 0
  #% 12
  #% 11
  #% 10
  #% 9
  #% 8
  #% 7
  #% 6
  #% 5
  
 
3. ------------------------------------------------------

Wydruk java tcl

klient java:
J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=0
sayHello=Jak sie masz ???

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=1
sayHello=Jak sie masz ???

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=2
sayHello=Jak sie masz ???

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=3
sayHello=Jak sie masz ???

J:\Desktop\TAS\C\Hello_Java>java HelloClient2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
podajLiczbe=4
sayHello=Jak sie masz ???

J:\Desktop\TAS\C\Hello_Java>


4. Wydruk tcl java -----------------------------

klient ------------------------------------------

lappend auto_path ./combat-tcl-0.7.4; package re combat
  #% 0.7
  #% 0.7

cd Hello_Tcl
  #% 

source Hello3.tcl
  #% 1
combat::ir add $_ir_Hello3
  #% 
  # dodajemy wpis do (local) Interface Repository

set f [open {Hello.IOR} "r"]; set ior [read $f]; close $f
  #% 
  # tu powinna byc sciezka do pliku ior utworzonego przez serwer !!

set m [corba::string_to_object $ior]
  #% _combat_obj_1
  # mozna wywolywac metody na rzecz ob. Corby $m ...

$m podajLiczbe
  #% 16
  #% 15
  #% 14
  #% 13
  #% 12
  #% 11
  #% 10
  #% 9
  #% 8
  #% 7
  #% 6
  #% 5
  #% 4
  #% 3
  #% 2
  #% 1
  #% 0

serwer ---------------------------------------------

J:\Desktop\TAS\C\Hello_Java>java HelloServer2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
HelloServant2()
IOR=IOR:000000000000001849444c3a48656c6c6f417070322f48656c6c6f3a312e30000000000100000000000000860001
02000000000e3136392e3235342e322e32323900b18000000031afabcb00000000205895170f000000010000000000000001
00000008526f6f74504f41000000000800000001000000001400000000000002000000010000002000000000000100010000
0002050100010001002000010109000000010001010000000026000000020002
orb.run();
podajLiczbe(), 0
podajLiczbe(), 1
podajLiczbe(), 2
podajLiczbe(), 3
podajLiczbe(), 4
podajLiczbe(), 5
podajLiczbe(), 6
podajLiczbe(), 7
podajLiczbe(), 8
podajLiczbe(), 9
podajLiczbe(), 10
podajLiczbe(), 11
podajLiczbe(), 12
podajLiczbe(), 13
podajLiczbe(), 14
podajLiczbe(), 15
podajLiczbe(), 16


=========================================== Zadanie 25. ========================================================================================
kli1 ------------------------

lappend auto_path ./combat-tcl-0.7.4
package re combat
  #% 0.7
## kli uzywajacy CosNaming czyli NamingService ................................................
# + NamigService tworzy "drzewo kontekstow"
#  (kontekst to cos w rodzaju katalogu)
# + w kontekstach umieszcza sie obiekty i/lub pod-konteksty
# + CosNaming zawiera 2 wazne interfejsy:
#    NamingContext - glowne operacje
#    NamingContextExt - pewne ulatwienia, np. resolve_str dla resolve
# + pod-konteksty moga pochodzic z innego serwera!
#  (rozproszony NamingService???)
# + opisy CosNaming ???
#    spec, java docs, plik idl (COS_ns.idl)
  #% 
  #% 

source COS_ns.tcl
  #% 1
  # + COS_ns.tcl to skompilowany przez idl2tcl plik IDL NameService...
combat::ir add $_ir_COS_ns
  #% 
set ns [corba::string_to_object http://faculty.wmi.amu.edu.pl:20002/nsd.ior]
  #% _combat_obj_1
  # + podlaczamy sie do serwera z NamingService poprzez plik nsd.ior

# listujemy zawartosc kontekstu korzenia ...
$ns list 10 x y; join $x \n
  #% binding_name {{id ABC kind {}}} binding_type nobject
binding_name {{id EventChannelFactory kind {}}} binding_type nobject
binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
binding_name {{id PropertySetFactory kind {}}} binding_type nobject
binding_name {{id ScriptCommander kind {}}} binding_type nobject
binding_name {{id abcc kind {}}} binding_type nobject
binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
binding_name {{id propset1 kind {}}} binding_type nobject
binding_name {{id qqq1 kind {}}} binding_type nobject
  #% binding_name {{id ABC kind {}}} binding_type nobject
binding_name {{id EventChannelFactory kind {}}} binding_type nobject
binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
binding_name {{id PropertySetFactory kind {}}} binding_type nobject
binding_name {{id ScriptCommander kind {}}} binding_type nobject
binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
binding_name {{id propset1 kind {}}} binding_type nobject
binding_name {{id qqq1 kind {}}} binding_type nobject


$ns rebind {{id "abcc" kind ""}} $ns
  #% 
  
 kli2 -------------------------------------------
 
 lappend auto_path ./combat-tcl-0.7.4
package re combat
  #% 0.7
## kli uzywajacy CosNaming czyli NamingService ................................................
# + NamigService tworzy "drzewo kontekstow"
#  (kontekst to cos w rodzaju katalogu)
# + w kontekstach umieszcza sie obiekty i/lub pod-konteksty
# + CosNaming zawiera 2 wazne interfejsy:
#    NamingContext - glowne operacje
#    NamingContextExt - pewne ulatwienia, np. resolve_str dla resolve
# + pod-konteksty moga pochodzic z innego serwera!
#  (rozproszony NamingService???)
# + opisy CosNaming ???
#    spec, java docs, plik idl (COS_ns.idl)

source COS_ns.tcl
  #% 1
  # + COS_ns.tcl to skompilowany przez idl2tcl plik IDL NameService...
combat::ir add $_ir_COS_ns
  #% 
set ns [corba::string_to_object http://faculty.wmi.amu.edu.pl:20002/nsd.ior]
  #% _combat_obj_1
  # + podlaczamy sie do serwera z NamingService poprzez plik nsd.ior

# listujemy zawartosc kontekstu korzenia ...
$ns list 10 x y; join $x \n
  #% binding_name {{id ABC kind {}}} binding_type nobject
binding_name {{id EventChannelFactory kind {}}} binding_type nobject
binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
binding_name {{id PropertySetFactory kind {}}} binding_type nobject
binding_name {{id ScriptCommander kind {}}} binding_type nobject
binding_name {{id abcc kind {}}} binding_type nobject
binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
binding_name {{id propset1 kind {}}} binding_type nobject
binding_name {{id qqq1 kind {}}} binding_type nobject
  #% binding_name {{id ABC kind {}}} binding_type nobject
binding_name {{id EventChannelFactory kind {}}} binding_type nobject
binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
binding_name {{id PropertySetFactory kind {}}} binding_type nobject
binding_name {{id ScriptCommander kind {}}} binding_type nobject
binding_name {{id abcc kind {}}} binding_type nobject
binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
binding_name {{id propset1 kind {}}} binding_type nobject
binding_name {{id qqq1 kind {}}} binding_type nobject


set q [$ns resolve_str "abcc"]

$q list 10 x y; join $x \n
  #% binding_name {{id ABC kind {}}} binding_type nobject
binding_name {{id EventChannelFactory kind {}}} binding_type nobject
binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
binding_name {{id PropertySetFactory kind {}}} binding_type nobject
binding_name {{id ScriptCommander kind {}}} binding_type nobject
binding_name {{id abcc kind {}}} binding_type nobject
binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
binding_name {{id propset1 kind {}}} binding_type nobject
binding_name {{id qqq1 kind {}}} binding_type nobject

  #% _combat_obj_2

  
=========================================== Zadanie 27. ==================================================================================================================================================================

#Nie laduje pliku idl tylko laczy sie bezposrednio z repozytorium interfejsow

corba::init -ORBInitRef InterfaceRepository=IOR:010000002100000049444c3a6f6d672e6f72672f434f5242412f5265706f7369746f72793a312e300000000002000000000000003700000001010000150000007368656c6c2e776d692e616d752e6564752e706c000043bc13000000496e746572666163655265706f7369746f7279000100000024000000010000000100000001000000140000000100000001000100000000000901010000000000
  #% 
set ns [corba::string_to_object http://faculty.wmi.amu.edu.pl:20002/nsd.ior]
  #% _combat_obj_1
  # + podlaczamy sie do serwera z NamingService poprzez plik nsd.ior

# listujemy zawartosc kontekstu korzenia ...
$ns list 10 x y; join $x \n
  #% binding_name {{id ABC kind {}}} binding_type nobject
binding_name {{id EventChannelFactory kind {}}} binding_type nobject
binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
binding_name {{id PropertySetFactory kind {}}} binding_type nobject
binding_name {{id ScriptCommander kind {}}} binding_type nobject
binding_name {{id abcc kind {}}} binding_type nobject
binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
binding_name {{id propset1 kind {}}} binding_type nobject
binding_name {{id qqq1 kind {}}} binding_type nobject

=========================================== Zadanie 29.==============================================================================================

-----------------Wlaczamy serwer: ---------------------------------------------------

lappend auto_path ./combat-tcl-0.7.4
package require combat

class HelloWorld {
  inherit PortableServer::ServantBase
  public method _Interface {} {
    return "IDL:HelloApp2/Hello:1.0"
      # tzw "RepoID"; mozna to wyciagnac z pliku Hello3.tcl
  }

  # w pliku IDL mamy:
  #   string sayHello();
  #   string sayHello2(in string we);
  #   long podajLiczbe();
  #   Hello sayHello_nowyObiekt();
  #   typedef long tab[10];
  #   void wektorRazy2(in tab tab1, out tab tab2);
  #   void uruchomZwrotnaMet(in WywZwrotne ref);
  #
  public method sayHello {} {
    return "Jak sie masz ???"
  }

  public method sayHello2 {_str} {
    set str "$str $_str"
    return "sayHello2: str=$str"
  }

  public method podajLiczbe {} {
    set x $liczba; incr liczba
    return $x
  }

  # ta metoda tworzy nowy obiekt HelloWorld i zwraca ref do tego obiektu
  public method sayHello_nowyObiekt {} {
    global poa
    puts "poczatek sayHello_nowyObiekt"
    puts "poa=$poa"

    set obj [HelloWorld ::#auto]
      # nowy obiekt (servant) jest tworzony w namespace globalnym
      # "#auto" to automatyczne nadawanie nazwy obiektowi
    puts "obj=$obj"

    set ref [$poa servant_to_reference $obj]
    puts "ref=$ref"

    puts "koniec sayHello_nowyObiekt"
    return $ref
  }

  public method wektorRazy2 {tab1 tab2} {
    puts "wektorRazy2 poczatek"
    upvar $tab2 tab2_value
      # obsluga arg. typu "out" (zwracanie "przez zmienna" w Pascalu)

    set tab2_value {}
    foreach x $tab1 {lappend tab2_value [expr $x*2]}

    puts "wektorRazy2 koniec"
  }

  public method uruchomZwrotnaMet ref {
    for {set i 0} {$i<5} {incr i} {
      $ref metoda
    }
  }

  private variable str ""
  private variable liczba 0
}

corba::init -ORBServerPort 10000
source Hello3.tcl
combat::ir add $_ir_Hello3

set obj [HelloWorld #auto]
puts "obj=$obj"

### POA -------------------------------------------------------

set poa [corba::resolve_initial_references "RootPOA"]
set mgr [$poa the_POAManager]
puts "poa=$poa"


set mypoa [$poa create_POA "MyPOA" $mgr {PERSISTENT USER_ID}]
$mypoa activate_object_with_id "HelloWorld_A" $obj
set ref_A [$mypoa id_to_reference "HelloWorld_A"]


#set mypoa [$poa create_POA MyPOA $mgr {RETAIN USER_ID}]
#set oid [$poa activate_object $obj]
#set ref [$poa id_to_reference $oid]

#set ref [$poa servant_to_reference $obj]
#puts "ref=$ref"

set ior [corba::object_to_string $ref_A]
set f [open {Hello.IOR} "w"]; puts $f $ior; close $f
puts "HelloWorld IOR = $ior"

$mgr activate
  # od tego momentu serwer zaczyna obslugiwac zadania IIOP

### -----------------------------------------------------------

vwait nieskonczenie
  # na uzytek uruchamiania przez "tclkit ser.tcl &"
  
 ----------------------------------------------------------------------------
 
 -----------------Potem klienta:-----------------
 
 #kons_font 16
lappend auto_path ./combat-tcl-0.7.4; package re combat
  #% 0.7
  #% 0.7

source Hello3.tcl
combat::ir add $_ir_Hello3
  # dodajemy wpis do (local) Interface Repository

  #% 
set f [open {Hello.IOR} "r"]; set ior [read $f]; close $f
  # tu powinna byc sciezka do pliku ior utworzonego przez serwer !!
  #% 

set m [corba::string_to_object $ior]
  # mozna wywolywac metody na rzecz ob. Corby $m ...

  #% _combat_obj_1
$m podajLiczbe
  #% 1
  #% 0
  
  
 -----------------Wylaczamy serwer:-----------------
 
 exit
 
 
 -----------------Wlaczamy ponownie i testujemy czy klient dziala-----------------
  
 $m podajLiczbe
  #% 3
  #% 2
  #% 1
  #% 0
  
 ----------------- Dziala ale licznik sie wyzerowal-----------------
 
 
 =================================== ZADANIE 30. ==========================================================================
 komendy 
 rmic -iiop OdleglaKlasa
 rmic -idl OdleglyObiekt
 
 ------------------Serwer w javie sss.java --------------------------------------
 
 /*
eksperymenty z RMI (serwer)
*/

import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*;
import java.io.*;
import javax.rmi.*;
import org.omg.CORBA.*;

class OdleglaKlasa
implements OdleglyObiekt, Serializable
{
  OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      PortableRemoteObject.exportObject(this);
        // tu decydujemy ze obiekt bedzie "zdalny"
        // exportObject() musi byc PRZED rebind() !!!
      Naming.rebind(s,this);
        // rejestruje sie w Naming Service (= rmiregistry)
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }

    // tworzymy drugi obiekty ...
    drugiObiekt= new OdleglaKlasa();
    PortableRemoteObject.exportObject(drugiObiekt);
      // tu decydujemy ze drugi obiekt bedzie "odlegly"

    System.out.println("sss: OdleglaKlasa(String); ok");
  }
  OdleglaKlasa() throws RemoteException
  {
    super();
    System.out.println("sss: OdleglaKlasa(); ok");
  }

  // -------- implementacja interf OdleglyObiekt ----------

  private OdleglyObiekt drugiObiekt;
  public OdleglyObiekt drugiObiekt() throws RemoteException
  {
    return drugiObiekt;
  }

  int licznik=0;
  public int powolnaMetoda() throws RemoteException
  {
    licznik++;
    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
    try {Thread.sleep(200);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }

  // ------------------------------------------------------
}

public class sss
{
  public static void main(String args[])
  {
    //System.setSecurityManager(new RMISecurityManager());

    try {
      System.out.println("sss: zaczynam tworzyc obiekty ...");
      OdleglyObiekt oo= new OdleglaKlasa("przyklad_rmi4");
      System.out.println("sss: obiekty utworzone !!!");
	  
	  Remote q1 = javax.rmi.PortableRemoteObject.toStub(oo);
	  _OdleglyObiekt_Stub q2 = (_OdleglyObiekt_Stub)q1;
	  ORB orb = ORB.init(args, null);
	  System.out.println(orb.object_to_string(q2));
	  
    } catch(Exception e) {
      System.err.println("sss: blad !!! "+e.getMessage());
    }
  }
}

---------------------------------------------- WYGENEROWANY IDL: OdleglyObiekt.idl ----------------------------------------------
/**
 * OdleglyObiekt.idl
 * Generated by rmic -idl. Do not edit
 * Monday, 14 December 2015 14:22:23  CET
 */


#ifndef __OdleglyObiekt__


    interface OdleglyObiekt;


#endif

//#include "orb.idl"

#ifndef __OdleglyObiekt__
#define __OdleglyObiekt__



    interface OdleglyObiekt {
    
        OdleglyObiekt drugiObiekt( );
        long powolnaMetoda( );
    
    };

#pragma ID OdleglyObiekt "RMI:OdleglyObiekt:0000000000000000"


#include "OdleglyObiekt.idl"
#endif


--------------------------------------------- IOR: aa.ior ----------------------------------------------

IOR:0000000000000023524d493a4f646c65676c794f6269656b743a30303030303030303030303030303030000000000001000000000000006e000102000000000e3136392e3235342e312e31393300174d00000019afabcb0000000002a0bab34c00000008000000000000000014000000000000020000000100000020000000000001000100000002050100010001002000010109000000010001010000000026000000020002


---------------------------------------------- WYGENEROWANY .TCL: x.tcl --------------------------------
#
# This file was automatically generated from /tmp/pzr_idl2tcl_23797.idl
# by idl2tcl. Do not edit.
#

set _ir_x \
{{module {IDL:omg.org/CORBA:1.0 CORBA 1.0} {{valuebox\
{IDL:omg.org/CORBA/StringValue:1.0 StringValue 1.0} string} {valuebox\
{IDL:omg.org/CORBA/WStringValue:1.0 WStringValue 1.0} wstring}}} {interface\
{RMI:OdleglyObiekt:0000000000000000 OdleglyObiekt 1.0} {} {{operation\
{IDL:OdleglyObiekt/drugiObiekt:1.0 drugiObiekt 1.0}\
RMI:OdleglyObiekt:0000000000000000 {} {}} {operation\
{IDL:OdleglyObiekt/powolnaMetoda:1.0 powolnaMetoda 1.0} long {} {}}}}}

#
# This is just to clear the interp from the ridiculously long string above
#

expr 1

---------------------------------------------- KLIENT TCL: cli2.tcl  ---------------------------------------

lappend auto_path ./combat-tcl-0.7.4
package require combat
  #% 0.7
source x.tcl
combat::ir add $_ir_x
  #% 


set f [open "aa.ior" "r"]; set ior [read $f]; close $f
  #% 

set m [corba::string_to_object $ior]
  #% _combat_obj_2


$m powolnaMetoda
  #% 7
  #% 6
  #% 5
  #% 4
  #% 3
  #% 2
  #% 1



$m drugiObiekt
  #% _combat_obj_4
  #% _combat_obj_3


set m2 [$m drugiObiekt]
  #% _combat_obj_5

$m2 powolnaMetoda
  #% 3
  #% 2
  #% 1
 =================================== ZADANIE 32. ==========================================================================
 -----------------------------------KLIENT TCL -------------------------------------------------
 lappend auto_path ./combat-tcl-0.7.4; package re combat
  #% 0.7
  #% 0.7
source 32.tcl
  #% 1
  #% 1
  #% 1
combat::ir add $_ir_32
  #% 
  #% 
set f [open Hello.IOR "r"]; set ior [read $f]; close $f
  #% 
  #% 
set m [corba::string_to_object $ior]
  #% _combat_obj_1
  #% _combat_obj_1

# testujemy odbieranie vt ...

set x2 [$m utworz2]
  #% wartosc {a ku ku !!!} 
     wartosc2 {a ku ku2 !!!} 
     _tc_ {valuetype IDL:xxx1/Pojemnik2:1.0 {public wartosc wstring private wartosc2 wstring} 0 {}}
	 
------------------------------------HelloServer2.java ----------------------------------------------
/* 
Server CORBA uzywajacy POA
--------------------------
  
--> tu jest minimalne POA
  
--> list_initial_services nie dziala ???
  
--> tu jest tez b wyrafinowany eksperyment z POA:
    "1 servant i 2 obiekty CORBA"
    (niedokonczone!!!)
  
*/
import xxx1.*;
import org.omg.CORBA.*;
import org.omg.PortableServer.*;
import org.omg.CosNaming.*;
import org.omg.CosNaming.NamingContextPackage.*;

import java.io.*;

class HelloServant2 extends FabrykaPojemnikowPOA
{	
	public xxx1.Pojemnik2 utworz2 () {
		return new Pojemnik2Impl();
	}
    public String odbierz (xxx1.Pojemnik2 par){
		return null;
	}
	 
}

public class HelloServer2 {

    public static void main(String args[])
    {
        try{
            // create and initialize the ORB
            ORB orb = ORB.init(args, null);

            // create servant and register it with the ORB
            HelloServant2 serv= new HelloServant2();
	    
	    POA rootpoa= POAHelper.narrow(
	      orb.resolve_initial_references("RootPOA"));
            rootpoa.the_POAManager().activate();	      
	    
	    org.omg.CORBA.Object ref= rootpoa.servant_to_reference(serv);

            String IOR= orb.object_to_string(ref);
            System.out.println("IOR="+IOR);
            PrintWriter out= new PrintWriter(new BufferedWriter(new FileWriter("Hello.IOR")));
            out.println(IOR); out.close();

	    /*
	    // get the root naming context
            org.omg.CORBA.Object objRef =
                orb.resolve_initial_references("NameService");
            NamingContext ncRef = NamingContextHelper.narrow(objRef);

            // bind the Object Reference in Naming
            NameComponent nc = new NameComponent("Hello2", "");
            NameComponent path[] = {nc};
            ncRef.rebind(path, serv);
            */

            /* // dlaczego to nie dziala ???
	    String s[]= orb.list_initial_services();
	    for(int i=0; i<s.length; i++) {
	      System.out.println(""+i+"- "+s[i]);
	    }*/

            System.out.println("orb.run();");
            orb.run();
	    System.out.println("orb.run(); - koniec");

        } catch (Exception e) {
            System.err.println("ERROR: " + e);
            e.printStackTrace(System.out);
        }
    }
}
--------------------------------------------------Pojemnik2Impl.java ---------------------------------------------
package xxx1;


/**
* xxx1/Pojemnik2.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from 32.idl
* Monday, 21 December 2015 14:30:04 o'clock CET
*/

public class Pojemnik2Impl extends Pojemnik2
{
	public void nic (){}
	public void Pojemnik2Impl(){
		wartosc = "asd";
		wartosc2 = "asd2";
	}
	} // class Pojemnik2

----------------------------------------------WYDRUK Z SERWERA ------------------------------------------------
J:\Desktop\TAS\C>java HelloServer2
Picked up _JAVA_OPTIONS: -Duser.home=J:\
IOR=IOR:000000000000001f49444c3a787878312f46616272796b61506f6a656d6e696b6f773a312e300000000000010000
000000000086000102000000000e3136392e3235342e322e3232390008ae00000031afabcb0000000020c4d94cb400000001
000000000000000100000008526f6f74504f4100000000080000000100000000140000000000000200000001000000200000
00000001000100000002050100010001002000010109000000010001010000000026000000020002
orb.run();
gru 21, 2015 3:03:47 PM com.sun.corba.se.impl.encoding.CDROutputStream_1_0 writeString
WARNING: "IOP00110201: (BAD_PARAM) Null parameter"
org.omg.CORBA.BAD_PARAM:   vmcid: SUN  minor code: 201 completed: Maybe
        at com.sun.corba.se.impl.logging.ORBUtilSystemException.nullParam(Unknown Source)
        at com.sun.corba.se.impl.logging.ORBUtilSystemException.nullParam(Unknown Source)
        at com.sun.corba.se.impl.encoding.CDROutputStream_1_0.writeString(Unknown Source)
        at com.sun.corba.se.impl.encoding.CDROutputStream_1_0.write_string(Unknown Source)
        at com.sun.corba.se.impl.encoding.CDROutputStream.write_string(Unknown Source)
        at xxx1.Pojemnik2._write(Pojemnik2.java:34)
        at com.sun.corba.se.impl.encoding.CDROutputStream_1_0.writeIDLValue(Unknown Source)
        at com.sun.corba.se.impl.encoding.CDROutputStream_1_0.writeValueBase(Unknown Source)
        at com.sun.corba.se.impl.encoding.CDROutputStream_1_0.write_value(Unknown Source)
        at com.sun.corba.se.impl.encoding.CDROutputStream.write_value(Unknown Source)
        at xxx1.Pojemnik2Helper.write(Pojemnik2Helper.java:84)
        at xxx1.FabrykaPojemnikowPOA._invoke(FabrykaPojemnikowPOA.java:40)
        at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatchToServant(Unknown
 Source)
        at com.sun.corba.se.impl.protocol.CorbaServerRequestDispatcherImpl.dispatch(Unknown Source)
        at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequestRequest(Unknown Sour
ce)
        at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(Unknown Source)
        at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleInput(Unknown Source)
        at com.sun.corba.se.impl.protocol.giopmsgheaders.RequestMessage_1_2.callback(Unknown Source)

        at com.sun.corba.se.impl.protocol.CorbaMessageMediatorImpl.handleRequest(Unknown Source)
        at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.dispatch(Unknown Source)
        at com.sun.corba.se.impl.transport.SocketOrChannelConnectionImpl.doWork(Unknown Source)
        at com.sun.corba.se.impl.orbutil.threadpool.ThreadPoolImpl$WorkerThread.performWork(Unknown
Source)
        at com.sun.corba.se.impl.orbutil.threadpool.ThreadPoolImpl$WorkerThread.run(Unknown Source)}
