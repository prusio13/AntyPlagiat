przedmiot TAS temat C nr_indeksu 396377 liczba_pkt 4 



########## Zadanie 20
Format opisu podpunktu: Klient/Serwer
a) Java/Java

output_serwer: #po wywo³aniu klienta 2x
lupus@artemis:[~/corba/Java]$ java HelloServer2 
HelloServant2()
IOR=IOR:000000000000001849444c3a48656c6c6f417070322f48656c6c6f3a312e3000000000010000000000000082000102000000000a3132372e302e312e3100b10c00000031afabcb00000000203de751cf00000001000000000000000100000008526f6f74504f410000000008000000010000000014000000000000020000000100000020000000000001000100000002050100010001002000010109000000010001010000000026000000020002
orb.run();
podajLiczbe(), 0
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0,
podajLiczbe(), 1
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0, 


output_klient: #uruchomiony 2 razy
lupus@artemis:[~/corba/Java]$ java HelloClient2 
podajLiczbe=0
sayHello=Hello world !!!
lupus@artemis:[~/corba/Java]$ java HelloClient2 
podajLiczbe=1
sayHello=Hello world !!!

b) tcl/tcl

serwer:
lupus@artemis:[~/corba/Tcl]$ ./tclkit ser.tcl
obj=helloWorld0
poa=::Combat::PortableServer::rootPOA0
ref=_combat_obj_1
HelloWorld IOR = IOR:01666f6f1800000049444c3a48656c6c6f417070322f48656c6c6f3a312e30000200000000000000300000000101026608000000617274656d6973008b9a666f120000002f313434383434333033322f323836362a31666f00000000010000002400000001666f6f01000000010000001400000001666f6f01000105000000000901010000000000

klient:
lupus@artemis:[~/corba/Tcl]$ ./tclkit konsola2c.tcl cli.tcl
(wiersze konsoli, które s± pod¶wietlone zaznaczam ">". Wiersze wywo³ywane "<".

<lappend auto_path ./combat-tcl-0.7.4; package re combat
<  #% 0.7
>  #% 0.7

<source Hello3.tcl
>  #% 1
<combat::ir add $_ir_Hello3
>  #% 
  # dodajemy wpis do (local) Interface Repository

<set f [open {Hello.IOR} "r"]; set ior [read $f]; close $f
>  #% 
  # tu powinna byc sciezka do pliku ior utworzonego przez serwer !!

<set m [corba::string_to_object $ior]
>  #% _combat_obj_1
  # mozna wywolywac metody na rzecz ob. Corby $m ...

<$m podajLiczbe
>  #% 3
>  #% 2
>  #% 1
>  #% 0
### to zosta³o wywo³ane 4 razy ^^

c) Java/Tcl

Serwer:
lupus@artemis:[~/corba/Tcl]$ ./tclkit ser.tcl
obj=helloWorld0
poa=::Combat::PortableServer::rootPOA0
ref=_combat_obj_1
HelloWorld IOR = IOR:01666f6f1800000049444c3a48656c6c6f417070322f48656c6c6f3a312e30000200000000000000300000000101026608000000617274656d69730046aa666f120000002f313434383434333437342f323932302a31666f00000000010000002400000001666f6f01000000010000001400000001666f6f01000105000000000901010000000000

Klient:
lupus@artemis:[~/corba/Java]$ java HelloClient2 
podajLiczbe=0
sayHello=Jak sie masz ???
lupus@artemis:[~/corba/Java]$ java HelloClient2 
podajLiczbe=1
sayHello=Jak sie masz ???
lupus@artemis:[~/corba/Java]$ java HelloClient2 
podajLiczbe=2
sayHello=Jak sie masz ???

d) Tcl/Java

Serwer:
lupus@artemis:[~/corba/Java]$ java HelloServer2 
HelloServant2()
IOR=IOR:000000000000001849444c3a48656c6c6f417070322f48656c6c6f3a312e3000000000010000000000000082000102000000000a3132372e302e312e3100951900000031afabcb00000000203df7a91c00000001000000000000000100000008526f6f74504f410000000008000000010000000014000000000000020000000100000020000000000001000100000002050100010001002000010109000000010001010000000026000000020002
orb.run();
podajLiczbe(), 0
podajLiczbe(), 1
podajLiczbe(), 2
podajLiczbe(), 3
podajLiczbe(), 4


Klient: (oznaczenia jak w przyk³adzie b)
#kons_font 16
<lappend auto_path ./combat-tcl-0.7.4; package re combat
  #% 0.7
>  #% 0.7

<source Hello3.tcl
>  #% 1
<combat::ir add $_ir_Hello3
>  #% 
  # dodajemy wpis do (local) Interface Repository

<set f [open {Hello.IOR} "r"]; set ior [read $f]; close $f
>  #% 
  # tu powinna byc sciezka do pliku ior utworzonego przez serwer !!

<set m [corba::string_to_object $ior]
>  #% _combat_obj_1
  # mozna wywolywac metody na rzecz ob. Corby $m ...

<$m podajLiczbe
>  #% 4
>  #% 3
>  #% 2
>  #% 1
>  #% 0
##wywo³ane pinæ razy ^

Podsumowanie:
Jak widzimy, CORBA jest niezale¿na od platformy programistycznej, w przeciwieñstwie do RMI.

#### KONIEC ZADANIA 20

#### ZADANIE 25
Tworzymy sobie dwa pliki tcl - kli1.tcl i kli2.tcl
Poni¿ej bêd± podane od razu wiersze wyj¶cia (>) i wiersze uruchamiane w konsoli tcl (<)
-- kli1.tcl -- 
<lappend auto_path ./combat-tcl-0.7.4; package re combatx
>  #% 0.7
<source COS_ns.tcl
<combat::ir add $_ir_COS_ns
<set ns [corba::string_to_object http://students.wmi.amu.edu.pl:20002/nsd.ior]
>  #% _combat_obj_1
<$ns list 10 x y; join $x \n
>  #% binding_name {{id ABC kind {}}} binding_type nobject
>binding_name {{id EventChannelFactory kind {}}} binding_type nobject
>binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
>binding_name {{id PropertySetFactory kind {}}} binding_type nobject
>binding_name {{id ScriptCommander kind {}}} binding_type nobject
>binding_name {{id propset1 kind {}}} binding_type nobject
>binding_name {{id qqq1 kind {}}} binding_type nobject
# widzimy tutaj podgl±d cosnaming ^

<set q1 [$ns resolve_str "propset1"]
<set q1 [$ns resolve {{id "propset1" kind ""}}]
>  #% _combat_obj_3
<$ns rebind {{id "hello_corba_karmaz" kind ""}} $q1
>  #% 

--- kli2.tcl
<lappend auto_path ./combat-tcl-0.7.4; package re combat
>  #% 0.7
<source COS_ns.tcl
>  #% 1
<combat::ir add $_ir_COS_ns
>  #% 
<set ns [corba::string_to_object http://students.wmi.amu.edu.pl:20002/nsd.ior]
>  #% _combat_obj_1
<$ns list 10 x y; join $x \n
>  #% binding_name {{id ABC kind {}}} binding_type nobject
>binding_name {{id EventChannelFactory kind {}}} binding_type nobject
>binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
>binding_name {{id PropertySetFactory kind {}}} binding_type nobject
>binding_name {{id ScriptCommander kind {}}} binding_type nobject
>binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
>binding_name {{id propset1 kind {}}} binding_type nobject
>binding_name {{id qqq1 kind {}}} binding_type nobject
# widzimy, ¿e 'hello_corba_karmaz' zosta³ dodany
<$ns resolve_str hello_corba_karmaz
>  #% _combat_obj_2
# i mo¿emy dostaæ do niego referencjê :-)

##### KONIEC ZADANIA 25

##### ZADANIE 27
znowu potrzebujemy dwóch konsol.
W konsoli numer 1 otwieramy kon1.tcl:
(tradycyjnie: polecenia uruchamiane poprzedzam '<', a wyjscie '>')

# Jak zwykle, zaznaczamy komende i wciskamy Ctrl+Enter
<lappend auto_path ./combat-tcl-0.7.4; package re combat
>  #% 0.7

<corba::init -ORBInitRef InterfaceRepository=IOR:010000002100000049444c3a6f6d672e6f72672f434f5242412f5265706f7369746f72793a312e300000000002000000000000003700000001010000150000007368656c6c2e776d692e616d752e6564752e706c000043bc13000000496e746572666163655265706f7369746f7279000100000024000000010000000100000001000000140000000100000001000100000000000901010000000000
>  #% 

#source COS_ns.tcl
#combat::ir add $_ir_COS_ns
#nie ladujemy lokalnie; uzywamy zewnetrznego IR (w tym wypadku, tego co w zad 25).
#powyzsze wiersze NIE S¡ wykonywane!

<set ns [corba::string_to_object http://students.wmi.amu.edu.pl:20002/nsd.ior]
>  #% _combat_obj_1


<$ns list 10 x y; join $x \n
>  #% binding_name {{id ABC kind {}}} binding_type nobject
>binding_name {{id EventChannelFactory kind {}}} binding_type nobject
>binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
>binding_name {{id PropertySetFactory kind {}}} binding_type nobject
>binding_name {{id ScriptCommander kind {}}} binding_type nobject
>binding_name {{id abcc kind {}}} binding_type nobject
>binding_name {{id channel1 kind {}}} binding_type nobject
>binding_name {{id channel2 kind {}}} binding_type nobject
>binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
>binding_name {{id propset1 kind {}}} binding_type nobject

>set q1 [$ns resolve_str "propset1"]
>set q1 [$ns resolve {{id "propset1" kind ""}}]
  #% _combat_obj_25

#a uzyje sobie tego, co stworzylem w zadaniu 25 :)
>$ns rebind {{id "hello_corba_karmaz" kind ""}} $q1
<  #% 

A w konsoli numer 2 powinna dzialac referencja do obiektu hello_corba_karmaz.

<lappend auto_path ./combat-tcl-0.7.4; package re combat
>  #% 0.7
#source COS_ns.tcl
#combat::ir add $_ir_COS_ns
#znow nie ladujemy lokalnie -- ponizej ORBInitRef do zewnetrznego IOR.

<corba::init -ORBInitRef InterfaceRepository=IOR:010000002100000049444c3a6f6d672e6f72672f434f5242412f5265706f7369746f72793a312e300000000002000000000000003700000001010000150000007368656c6c2e776d692e616d752e6564752e706c000043bc13000000496e746572666163655265706f7369746f7279000100000024000000010000000100000001000000140000000100000001000100000000000901010000000000
>  #% 

<set ns [corba::string_to_object http://students.wmi.amu.edu.pl:20002/nsd.ior]
>  #% _combat_obj_1

#listujemy raz jeszcze:

<$ns list 10 x y; join $x \n
>  #% binding_name {{id ABC kind {}}} binding_type nobject
>binding_name {{id EventChannelFactory kind {}}} binding_type nobject
>binding_name {{id PropertySetDefFactory kind {}}} binding_type nobject
>binding_name {{id PropertySetFactory kind {}}} binding_type nobject
>binding_name {{id ScriptCommander kind {}}} binding_type nobject
>binding_name {{id abcc kind {}}} binding_type nobject
>binding_name {{id channel1 kind {}}} binding_type nobject
>binding_name {{id channel2 kind {}}} binding_type nobject
>binding_name {{id hello_corba_karmaz kind {}}} binding_type nobject
>binding_name {{id propset1 kind {}}} binding_type nobject

#no i zrobmy resolve obiektu o nazwie hello_corba_karmaz:
<$ns resolve_str hello_corba_karmaz
>  #% _combat_obj_24
# i mamy referencje!


### KONIEC ZADANIA 27

##### ZADANIE 29
Bazujemy tutaj na kodzie ¼ród³owym z podtytu³u "Combat - broker jêzyka Tcl", orazl Hello3.idl, Hello3.tcl.

kod serwera (serwer1.tcl), uruchamiane przez
bash$ ./tclkit serwer1.tcl
--- poczatek ---

lappend auto_path ./combat-tcl-0.7.4

package require combat

class HelloWorld {
  inherit PortableServer::ServantBase
  public method _Interface {} {
    return "IDL:HelloApp2/Hello:1.0"
      # tzw "RepoID"; mozna to wyciagnac z pliku Hello3.tcl
  }

  # w pliku IDL mamy:
  #   string sayHello();
  #   string sayHello2(in string we);
  #   long podajLiczbe();
  #   Hello sayHello_nowyObiekt();
  #   typedef long tab[10];
  #   void wektorRazy2(in tab tab1, out tab tab2);
  #   void uruchomZwrotnaMet(in WywZwrotne ref);
  #
  public method sayHello {} {
    return "Jak sie masz ???"
  }

  public method sayHello2 {_str} {
    set str "$str $_str"
    return "sayHello2: str=$str"
  }

  public method podajLiczbe {} {
    set x $liczba; incr liczba
    return $x
  }

  # ta metoda tworzy nowy obiekt HelloWorld i zwraca ref do tego obiektu
  public method sayHello_nowyObiekt {} {
    global poa
    puts "poczatek sayHello_nowyObiekt"
    puts "poa=$poa"

    set obj [HelloWorld ::#auto]
      # nowy obiekt (servant) jest tworzony w namespace globalnym
      # "#auto" to automatyczne nadawanie nazwy obiektowi
    puts "obj=$obj"

    set ref [$poa servant_to_reference $obj]
    puts "ref=$ref"

    puts "koniec sayHello_nowyObiekt"
    return $ref
  }

  public method wektorRazy2 {tab1 tab2} {
    puts "wektorRazy2 poczatek"
    upvar $tab2 tab2_value
      # obsluga arg. typu "out" (zwracanie "przez zmienna" w Pascalu)

    set tab2_value {}
    foreach x $tab1 {lappend tab2_value [expr $x*2]}

    puts "wektorRazy2 koniec"
  }

  public method uruchomZwrotnaMet ref {
    for {set i 0} {$i<5} {incr i} {
      $ref metoda
    }
  }

  private variable str ""
  private variable liczba 0
}

corba::init -ORBServerPort 10000
#corba::init

source Hello3.tcl
combat::ir add $_ir_Hello3

set obj [HelloWorld #auto]
puts "obj=$obj"

### POA -------------------------------------------------------

set poa [corba::resolve_initial_references "RootPOA"]
set mgr [$poa the_POAManager]
puts "poa=$poa"

set mypoa [$poa create_POA MyPOA $mgr {PERSISTENT USER_ID}]
$mypoa activate_object_with_id "oid" $obj
set ref [$mypoa id_to_reference "oid"]

#set ref [$poa servant_to_reference $obj]
puts "ref=$ref"

set ior [corba::object_to_string $ref]
set f [open {Hello.IOR} "w"]; puts $f $ior; close $f
puts "HelloWorld IOR = $ior"

$mgr activate
  # od tego momentu serwer zaczyna obslugiwac zadania IIOP

### -----------------------------------------------------------

vwait nieskonczenie
  # na uzytek uruchamiania przez "tclkit serwer1.tcl &"
--- koniec ---

kod klienta (tradycyjnie: linie wej¶ciowe <, linie wyj¶ciowe >)
uruchamiany w konsoli2c.tcl!
---poczatek ---

<lappend auto_path ./combat-tcl-0.7.4; package re combat
>  #% 0.7
  

<source Hello3.tcl
>  #% 1

<combat::ir add $_ir_Hello3
>  #% 

<set f [open {Hello.IOR} "r"]; set ior [read $f]; close $f
>  #% 

<set m [corba::string_to_object $ior]
>  #% _combat_obj_1

>$m podajLiczbe
# uruchomione 4 razy
<  #% 3
<  #% 2
<  #% 1
<  #% 0

# tutaj nastapilo wylaczenie serwera.
>$m podajLiczbe
#przy probie uruchominia metody raz jeszcze otrzymaem
blad "Error: IDL:omg.org/CORBA/COMM_FAILURE: 1.0 {minor_code_value 0 completion_status COMPLETE_MAYBE}"

# ponowne uruchomienie serwera, klient nadal ten sam
<$m podajLiczbe
>  #% 3
>  #% 2
>  #% 1
>  #% 0
--- koniec pliku klienta ---

##### KONIEC ZADANIA 29
}
