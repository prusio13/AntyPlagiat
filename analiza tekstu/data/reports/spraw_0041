przedmiot TAS temat B nr_indeksu 396407 liczba_pkt 5 




zadanie 10

1)

serwer

s396407@pc25i:~/TAS/II/SERWER$ java sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=2
sss: powolnaMetoda(); koniec dzialania !


klient

s396407@pc25i:~/TAS/II/KLIENT$ javac kkk.java
s396407@pc25i:~/TAS/II/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=1
kkk: oo2.powolnaMetoda()=1
kkk: oo2.powolnaMetoda()=2
s396407@pc25i:~/TAS/II/KLIENT$ 


Modyfikacja implementacji powolnaMetoda() plik sss.java po stronie serwera

public int powolnaMetoda() throws RemoteException
  {
	for (licznik = 0; licznik<10 ; licznik++)
	{
	    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
		Thread aktualnywatek = Thread.currentThread();
		String nazwa = aktualnywatek.getName();
		System.out.println("Nazwa " + nazwa);
	}
    try {Thread.sleep(200);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }

2)

Interfejs OdleglyObiekt, klasy OdleglaKlasa  ma metodê drugiObiekt(), która zwraca referencje do obiektu o typie interfejsowym OdleglyObiekt. Metoda drugiObiekt() w klasie OdleglaKlasa zwraca referencje typu OdleglyObiekt do pola drugiObiet. Inicjacja pola odbywa siê w publicznym konstruktorze OdleglKlasa z argumentem String s, a wywo³ywany jest tam konstruktor OdleglaKlasa().

Konstruktor:

OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
      Naming.rebind(s,this);
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }

    drugiObiekt= new OdleglaKlasa();

    UnicastRemoteObject.exportObject(drugiObiekt);


    System.out.println("sss: OdleglaKlasa(String); ok");
  }

Klient:

import java.rmi.*;
import java.rmi.registry.*;

public class kkk
{
  public static void main(String args[])
  {

    try {
      OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
        "rmi://localhost/przyklad_rmi4");
      
      OdleglyObiekt oo2 = oo.drugiObiekt();
      System.out.println("kkk: oo2.powolnaMetoda()="+oo2.powolnaMetoda());
      System.out.println("kkk: oo2.powolnaMetoda()="+oo2.powolnaMetoda());
    } catch(Exception e) {
      System.err.println("kkk: blad !!! "+e.getMessage());
    }
  }
} 

Serwer:

sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!

sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); licznik=2
current thread = Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=3
current thread = Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=4
current thread = Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !
current thread = Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !


Klient:

kkk: oo2.powolnaMetoda()=2
kkk: oo2.powolnaMetoda()=4

kkk: oo2.powolnaMetoda()=3
kkk: oo2.powolnaMetoda()=4


Konstruktor OdleglaKlasa(String s):

OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
      Naming.rebind(s,this);
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }


    drugiObiekt= new OdleglaKlasa();


    System.out.println("sss: OdleglaKlasa(String); ok");
  }
  
  
  3)
  
  
  Klient:

import java.rmi.*;
import java.rmi.registry.*;

public class kkk
{
  public static void main(String args[])
  {

    try {
      OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
        "rmi://localhost/przyklad_rmi4");
 
      System.out.println("kkk: oo.powolnaMetoda()="+oo.powolnaMetoda());

      oo.generujeBlad();
    } catch(Exception e) {
      System.err.println("kkk: blad !!! "+e.getMessage());
    }
  }
}

Serwer:

sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
current thread = Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !

I klienta:

kkk: oo.powolnaMetoda()=1
kkk: blad !!! RemoteException occurred in server thread; nested exception is: 
	java.rmi.RemoteException: sztucznie wygenerowany blad ...
 
 
 ------------------------------------------
 
 zadanie 11
 
Interfejs OdleglyBufor:

import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public int pobierz() throws RemoteException, InterruptedException;
    public void wstaw(int element) throws RemoteException, InterruptedException;
}

Interfejs FabrykaBuforow:

import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
}

ServerLogic.java:


import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Integer> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Integer>();
    }
    
    public synchronized int pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(int element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("sss: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }
    
}

public class ServerLogic{
    public static void main(String[] argv){
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}

Klasa Client.java:

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Client{
  public static void main(String args[]){
            try{
	  
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  ktora zwraca referencje do zdalnego OdleglegoBufora
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBufor(10);


		  Runnable producent = new Runnable(){
		  public void run(){
		      try{
			  int x;
			  Random random = new Random(System.currentTimeMillis());
			  while(true){
			      x = random.nextInt(100);
			      bufor.wstaw(x);
			      Thread.sleep(random.nextInt(1000));
			  }
		      }catch(RemoteException ex){
			  System.out.println("Blad Remote: " + ex.getMessage());
		      }catch(InterruptedException ex){
		    	
			  System.out.println("Zakonczono produkcje");
			  return;
		      }
		  }
	  };
	  
	  
	  Runnable konsument = new Runnable(){
		  public void run(){
		      try{
			  Random random = new Random(System.currentTimeMillis());
			  while(true){
			      System.out.println("pobrano " + bufor.pobierz());
			      Thread.sleep(random.nextInt(1000));
			  }p
		      }catch(RemoteException ex){
			  System.out.println("Blad Remote: " + ex.getMessage());
		      }catch(InterruptedException ex){
		      	  
			  System.out.println("Zakonczono konsumpcje");
			  return;
		      }
		  }
	  };

	  final Thread produkuj = new Thread(producent);
	  final Thread konsumuj = new Thread(konsument);
	  
	  
	  Runnable zakoncz = new Runnable(){
		  public void run(){
		      produkuj.interrupt();
		      konsumuj.interrupt();
		  }
	  };
	  
	  Runtime.getRuntime().addShutdownHook(new Thread(zakoncz));

		
	  produkuj.start();
	  konsumuj.start();
	  
     
    } catch(Exception e) {
      System.err.println("Client: blad !!! " + e.getMessage());
    }
  }
}

Serwer

ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono nowy bufor o rozmiarze: 10

<i chwilê pó¼niej ju¿ reakcje na konkretne wywo³ania>
wstawiono 2, #elementow w buforze: 1
wstawiono 77, #elementow w buforze: 1
wstawiono 43, #elementow w buforze: 1
wstawiono 37, #elementow w buforze: 1
wstawiono 58, #elementow w buforze: 2
wstawiono 57, #elementow w buforze: 1
wstawiono 82, #elementow w buforze: 1
wstawiono 21, #elementow w buforze: 1
wstawiono 61, #elementow w buforze: 1
wstawiono 75, #elementow w buforze: 1
wstawiono 75, #elementow w buforze: 1
wstawiono 24, #elementow w buforze: 2
wstawiono 84, #elementow w buforze: 1
wstawiono 36, #elementow w buforze: 2
wstawiono 4, #elementow w buforze: 2
wstawiono 18, #elementow w buforze: 1
wstawiono 45, #elementow w buforze: 2
wstawiono 83, #elementow w buforze: 2
wstawiono 0, #elementow w buforze: 1
wstawiono 14, #elementow w buforze: 2

Klient:

pobrano 2
pobrano 77
pobrano 43
pobrano 37
pobrano 58
pobrano 57
pobrano 82
pobrano 21
pobrano 61
pobrano 75
pobrano 75
pobrano 24
pobrano 84
pobrano 36
pobrano 4
pobrano 18
pobrano 45
pobrano 83
Zakonczono produkcje
Zakonczono konsumpcje

--------------------------------------------------


zadanie 12

FabrykaBuforow (interfejs):

import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
    OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException;
}

-interfejs OdleglyBufor:

import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public int pobierz() throws RemoteException, InterruptedException;
    public void wstaw(int element) throws RemoteException, InterruptedException;
}

ServerLogic.java:

import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Integer> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Integer>();
    }
    
    public synchronized int pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(int element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    private final Map<String, OdleglyBufor> memory;
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	memory = new HashMap<String, OdleglyBufor>();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("ServerLogic: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }

    public OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa){
	if(memory.containsKey(nazwa)){
	    System.out.println("wys³ano do klienta bufor o nazwie: " + nazwa);
	    return memory.get(nazwa);
	}else{
	    OdleglyBufor odleglyBufor =  new OBuforImpl(10);
	    try {
		UnicastRemoteObject.exportObject(odleglyBufor);
	    } catch(Exception e) {
		System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
	    }
	    memory.put(nazwa, odleglyBufor);
	    System.out.println("Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: " + nazwa);
	    return odleglyBufor;
	}
    }
}

public class ServerLogic{
    public static void main(String[] argv){
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}

Producent

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Producent{
  public static void main(String args[]){
      //System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons1");
	  int x;
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      x = random.nextInt(100);
	      bufor.wstaw(x);
	      System.out.println("Wstawiono: " + x);
	      Thread.sleep(random.nextInt(1000));
	  }
      } catch(Exception e) {
	  System.err.println("Producent: blad !!! "+e.getMessage());
      }
  }
}

Konsument

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Konsument{
  public static void main(String args[]){
      

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons1");
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      System.out.println("Pobrano: " + bufor.pobierz());
	      Thread.sleep(random.nextInt(1000));
	  }
      } catch(Exception e) {
	  System.err.println("Konsument: blad !!! "+e.getMessage());
      }
  }
}


Serwer

ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: prodKons1 // to jest efekt za¿±dania bufora o nazwie "prodKons1" przez producenta
wstawiono 24, #elementow w buforze: 1
wstawiono 99, #elementow w buforze: 2
wstawiono 65, #elementow w buforze: 3
wstawiono 83, #elementow w buforze: 4
wstawiono 83, #elementow w buforze: 5
wstawiono 7, #elementow w buforze: 6
wstawiono 97, #elementow w buforze: 7
wstawiono 14, #elementow w buforze: 8
wys³ano do klienta bufor o nazwie: prodKons1 // ta linia jest wysy³ana w momencie, gdy drugi z klientów - konsument, za¿±da³ bufora ju¿ istniej±cego
wstawiono 14, #elementow w buforze: 8
wstawiono 50, #elementow w buforze: 9
wstawiono 70, #elementow w buforze: 10
wstawiono 51, #elementow w buforze: 9
wstawiono 58, #elementow w buforze: 10
wstawiono 91, #elementow w buforze: 10
wstawiono 41, #elementow w buforze: 10
wstawiono 15, #elementow w buforze: 10
wstawiono 82, #elementow w buforze: 10
wstawiono 92, #elementow w buforze: 9
wstawiono 15, #elementow w buforze: 10
wstawiono 28, #elementow w buforze: 7
wstawiono 79, #elementow w buforze: 8
wstawiono 7, #elementow w buforze: 9
wstawiono 95, #elementow w buforze: 9
wstawiono 13, #elementow w buforze: 8
wstawiono 98, #elementow w buforze: 9
wstawiono 82, #elementow w buforze: 9
wstawiono 39, #elementow w buforze: 7
wstawiono 45, #elementow w buforze: 8
wstawiono 85, #elementow w buforze: 7
wstawiono 71, #elementow w buforze: 7
wstawiono 11, #elementow w buforze: 6
wstawiono 96, #elementow w buforze: 6
wstawiono 39, #elementow w buforze: 7
wstawiono 32, #elementow w buforze: 7
wstawiono 88, #elementow w buforze: 8
wstawiono 67, #elementow w buforze: 9
wstawiono 27, #elementow w buforze: 8
wstawiono 76, #elementow w buforze: 7
wstawiono 90, #elementow w buforze: 5
wstawiono 12, #elementow w buforze: 3
wstawiono 8, #elementow w buforze: 4
wstawiono 11, #elementow w buforze: 4
wstawiono 78, #elementow w buforze: 5
wstawiono 28, #elementow w buforze: 6
wstawiono 60, #elementow w buforze: 7
wstawiono 25, #elementow w buforze: 8
wstawiono 24, #elementow w buforze: 6
wstawiono 3, #elementow w buforze: 7
wstawiono 7, #elementow w buforze: 6

-producent:

Wstawiono: 24
Wstawiono: 99
Wstawiono: 65
Wstawiono: 83
Wstawiono: 83
Wstawiono: 7
Wstawiono: 97
Wstawiono: 14
Wstawiono: 14
Wstawiono: 50
Wstawiono: 70
Wstawiono: 51
Wstawiono: 58
Wstawiono: 91
Wstawiono: 41
Wstawiono: 15
Wstawiono: 82
Wstawiono: 92
Wstawiono: 15
Wstawiono: 28
Wstawiono: 79
Wstawiono: 7
Wstawiono: 95
Wstawiono: 13
Wstawiono: 98
Wstawiono: 82
Wstawiono: 39
Wstawiono: 45
Wstawiono: 85
Wstawiono: 71
Wstawiono: 11
Wstawiono: 96
Wstawiono: 39
Wstawiono: 32
Wstawiono: 88
Wstawiono: 67
Wstawiono: 27
Wstawiono: 76
Wstawiono: 90
Wstawiono: 12
Wstawiono: 8
Wstawiono: 11
Wstawiono: 78
Wstawiono: 28
Wstawiono: 60
Wstawiono: 25
Wstawiono: 24
Wstawiono: 3
Wstawiono: 7

-konsument:

Pobrano: 24
Pobrano: 99
Pobrano: 65
Pobrano: 83
Pobrano: 83
Pobrano: 7
Pobrano: 97
Pobrano: 14
Pobrano: 14
Pobrano: 50
Pobrano: 70
Pobrano: 51
Pobrano: 58
Pobrano: 91
Pobrano: 41
Pobrano: 15
Pobrano: 82
Pobrano: 92
Pobrano: 15
Pobrano: 28
Pobrano: 79
Pobrano: 7
Pobrano: 95
Pobrano: 13
Pobrano: 98
Pobrano: 82
Pobrano: 39
Pobrano: 45
Pobrano: 85
Pobrano: 71
Pobrano: 11
Pobrano: 96
Pobrano: 39
Pobrano: 32
Pobrano: 88
Pobrano: 67
Pobrano: 27
Pobrano: 76
Pobrano: 90
Pobrano: 12
Pobrano: 8
Pobrano: 11
Pobrano: 78
Pobrano: 28
Pobrano: 60
Pobrano: 25
Pobrano: 24


---------------------------------------------------------------------

zadanie 13


-Interfejs OdleglyObiekt.java:
import java.rmi.*;

public interface OdleglyObiekt extends Remote{
    OdleglyObiekt drugiObiekt() throws RemoteException;
    int powolnaMetoda() throws RemoteException;
    PrzykladowaKlasa eksperyment1(PrzykladowaKlasa pk1, PrzykladowaKlasa pk2) throws RemoteException;
}

-Klasa PrzykladowaKlasa.java:
import java.util.Random;
import java.io.Serializable;

public class PrzykladowaKlasa implements Serializable{
    private final String nazwa;
    private final int numer;
    
    public PrzykladowaKlasa(){
	nazwa = "Instancja klasy PrzykladowaKlasa";
	numer = new Random(System.currentTimeMillis()).nextInt();
	
	System.out.println("Utworzono instancje klasy PrzykladowaKlasa");
    }
    
       public String pokaz(){
	return "moja nazwa to " + nazwa + ", a moj numer to " + numer;
    }
}

-Plik sss.java:
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*;
import java.io.*;
import java.util.Random;


class OdleglaKlasa
implements OdleglyObiekt, Serializable
{
  OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
        
      Naming.rebind(s,this);
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }

    
    drugiObiekt= new OdleglaKlasa();
    UnicastRemoteObject.exportObject(drugiObiekt);
      

    System.out.println("sss: OdleglaKlasa(String); ok");
  }
  OdleglaKlasa() throws RemoteException
  {
    super();
    System.out.println("sss: OdleglaKlasa(); ok");
  }

  // -------- Interfejs OdleglyObiekt ----------

  private OdleglyObiekt drugiObiekt;
  public OdleglyObiekt drugiObiekt() throws RemoteException
  {
    return drugiObiekt;
  }

  int licznik=0;
  public int powolnaMetoda() throws RemoteException
  {
    licznik++;
    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
    try {Thread.sleep(200);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }

  
    public PrzykladowaKlasa eksperyment1(PrzykladowaKlasa pk1, PrzykladowaKlasa pk2){
	System.out.println(pk1.pokaz());
	System.out.println(pk2.pokaz());
	return (new Random(System.currentTimeMillis()).nextInt() % 2 == 0) ? pk1 : pk2;
    }
  }

public class sss
{
  public static void main(String args[])
  {
    System.setSecurityManager(new RMISecurityManager());

    try {
      System.out.println("sss: zaczynam tworzyc obiekty ...");
      OdleglyObiekt oo= new OdleglaKlasa("przyklad_rmi4");
      System.out.println("sss: obiekty utworzone !!!");
    } catch(Exception e) {
      System.err.println("sss: blad !!! "+e.getMessage());
    }
  }
}

PrzykladowaKlasa2 (dziedziczaca z Przykladowaklasa.java)
import java.util.Date;

public class PrzykladowaKlasa2 extends PrzykladowaKlasa{
    private final Date data;
    
  
    PrzykladowaKlasa2(), pojawia siê dwa komunikaty na terminalu
    
    public PrzykladowaKlasa2(){
	super();
	data = new Date();
	System.out.println("Utworzono instancje PrzykladowaKlasa2");
    }

        @Override
    public String pokaz(){
	return super.pokaz() + ", moja data utworzenia to " + data;
    }
}


kkk.java:
import java.rmi.*;
import java.rmi.registry.*;

public class kkk
{
  public static void main(String args[])
  {
    System.setSecurityManager(new RMISecurityManager());

    try {
      OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
        "rmi://localhost/przyklad_rmi4");
      PrzykladowaKlasa2 pk2 = new PrzykladowaKlasa2();
      PrzykladowaKlasa pk1 = new PrzykladowaKlasa();
      PrzykladowaKlasa result = oo.eksperyment1(pk1, pk2);

      System.out.println(result.pokaz());
      
    } catch(Exception e) {
      System.err.println("kkk: blad !!! "+e.getMessage());
    }
  }
}

serwer:
	sss: zaczynam tworzyc obiekty ...
	sss: OdleglaKlasa(); ok
	sss: OdleglaKlasa(String); ok
	sss: obiekty utworzone !!!
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -444191928
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -443807179, moja data utworzenia to Tue Dec 16 14:46:50 CET 2015
klient:
	Utworzono instancje klasy PrzykladowaKlasa
	Utworzono instancje PrzykladowaKlasa2
	Utworzono instancje klasy PrzykladowaKlasa
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -444191928

Z zwracaniem obiektu PrzykladowaKlasa2:
serwer:
	sss: zaczynam tworzyc obiekty ...
	sss: OdleglaKlasa(); ok
	sss: OdleglaKlasa(String); ok
	sss: obiekty utworzone !!!
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 596952276
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 586564055, moja data utworzenia to Tue Dec 16 14:49:25 CET 2015
klient:
	Utworzono instancje klasy PrzykladowaKlasa
	Utworzono instancje PrzykladowaKlasa2
	Utworzono instancje klasy PrzykladowaKlasa	
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 586564055, moja data utworzenia to Tue Dec 16 14:49:25 CET 2015
	
	---------------------------
	
	zadanie 14
	
Ksiazka.java:
import java.io.Serializable;

public class Ksiazka implements Serializable{
    private final int liczbaStron;
    private final String tytul;
    private final String autor;
    private final String tematyka;

    public Ksiazka(int l, String tyt, String a, String tem){
	liczbaStron = l;
	tytul = tyt;
	autor = a;
	tematyka = tem;
    }

    @Override
    public String toString(){
	return "(Ksiazka: " + autor + ", " + tytul + ", " + tematyka + ", " + liczbaStron + "str)";
    }
}

Samochod.java:
import java.io.Serializable;

public class Samochod implements Serializable{
    private final int moc;
    private final int vMax;
    private final String model;

    public Samochod(int m, int v, String mod){
	moc = m;
	vMax = v;
	model = mod;
    }

    @Override
    public String toString(){
	return "(Samochod: " + model +", moc = " + moc + ", vMax = " + vMax + ")";
    }
}

Rower.java:
import java.io.Serializable;

public class Rower implements Serializable{
    private final int rozmiarRamy;
    private final String klasa;
    private final boolean meski;

    public Rower(int r, String k, boolean m){
	rozmiarRamy = r;
	klasa = k;
	meski = m;
    }

    @Override
    public String toString(){
	String plec = meski ? "meski" : "damski";
	return "("+ plec +  " Rower " + klasa +", o rozmiarze ramy " + rozmiarRamy + ")";
    }

}


Serwer:
Interfejs OdleglyBufor.java:
import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public Object pobierz() throws RemoteException, InterruptedException;
    public void wstaw(Object element) throws RemoteException, InterruptedException;
}

FabrykaBuforow.java:
import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
    OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException;
}

Pliki class dla tych interfejsów umie¶ci³em oczywi¶cie równie¿ w katalogu klientów

ServerLogic.java:
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Object> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Object>();
    }
    
    public synchronized Object pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(Object element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println();
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    private final Map<String, OdleglyBufor> memory;
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	memory = new HashMap<String, OdleglyBufor>();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("ServerLogic: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }

    public OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa){
	if(memory.containsKey(nazwa)){
	    System.out.println("wys³ano do klienta bufor o nazwie: " + nazwa);
	    return memory.get(nazwa);
	}else{
	    OdleglyBufor odleglyBufor =  new OBuforImpl(5);
	    try {
		UnicastRemoteObject.exportObject(odleglyBufor);
	    } catch(Exception e) {
		System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
	    }
	    memory.put(nazwa, odleglyBufor);
	    System.out.println("Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: " + nazwa);
	    return odleglyBufor;
	}
    }
}

public class ServerLogic{
    public static void main(String[] argv){
	System.setSecurityManager(new RMISecurityManager());
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}

Klient:

Producent.java - oprócz ci±g³ego wstawiania, w tej klasie jest zaimplementowana logika produkowania (losowania) obiektów
import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Producent{
  public static void main(String args[]){
      System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons2");
	  String[] tytuly = {
	      "Dziady", 
	      "Potop", 
	      "Granica", 
	      "Ferdydurke"  
	  };

	  String[] autorzy = {
	      "Adam Mickiewicz", 
	      "Henryk Sienkiewicz", 
	      "Zofia Nalkowska", 
	      "Witold Gombrowicz"  
	  };

	  String[] samochody = {
	      "Honda Accord",
	      "Toyota Yaris",
	      "VW Golf",
	      "Renault Megane"
	  };

	  String[] rowery = {
	      "gorski",
	      "szosowy",
	      "BMX",
	      "Trialowy",
	      "Zjazdowy"
	  };


	  Object x = new Integer(4); // tylko dla formalnosci robie tu symboliczna inicjalizacje - kompilator tego wymaga
	  Random random = new Random(System.currentTimeMillis());
	  int los;
	  while(true){
	      random.setSeed(System.currentTimeMillis());
	      switch(random.nextInt(3)){
	         case 0:
		     los = random.nextInt(250);
		     x = new Ksiazka(los, tytuly[los % 4], autorzy[los % 4], "literatura piekna");
		     break;
	         case 1:
		     los = random.nextInt(50);
		     x = new Samochod(los * 5, los * 7, samochody[los%4]);
		     break;
	         case 2:
		     los = random.nextInt(7);
		     x = new Rower(los + 15, rowery[los % 5], (los % 2 == 0));
		     break;
	      }
	      
	      bufor.wstaw(x);
	      System.out.println("Wstawiono: " + x);
	      Thread.sleep(random.nextInt(2500));
	  }
      } catch(Exception e) {
	  System.err.println("Producent: blad !!! "+e.getMessage());
      }
  }
}

Konsument.java
import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Konsument{
  public static void main(String args[]){
      System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons2");
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      System.out.println("Pobrano: \n" + bufor.pobierz() + "\n---------------------------------------------");
	      Thread.sleep(random.nextInt(2500));
	  }
      } catch(Exception e) {
	  System.err.println("Konsument: blad !!! "+e.getMessage());
      }
  }
}
	
	
	serwer:

ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono i dodano do pamiêci bufor o rozmiarze 5 i nazwie: prodKons2

wstawiono (meski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 1
wys³ano do klienta bufor o nazwie: prodKons2

wstawiono (meski Rower Zjazdowy, o rozmiarze ramy 19), #elementow w buforze: 1

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 1

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 2

wstawiono (damski Rower Trialowy, o rozmiarze ramy 18), #elementow w buforze: 1

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 1

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 2

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 2

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 1

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 2

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 2

wstawiono (damski Rower Trialowy, o rozmiarze ramy 18), #elementow w buforze: 2

wstawiono (meski Rower Zjazdowy, o rozmiarze ramy 19), #elementow w buforze: 3

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 3

wstawiono (damski Rower Trialowy, o rozmiarze ramy 18), #elementow w buforze: 2

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 1

wstawiono (meski Rower Zjazdowy, o rozmiarze ramy 19), #elementow w buforze: 1

wstawiono (meski Rower Zjazdowy, o rozmiarze ramy 19), #elementow w buforze: 1

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 1

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 1

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 1

wstawiono (meski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 1

wstawiono (damski Rower Trialowy, o rozmiarze ramy 18), #elementow w buforze: 1

wstawiono (meski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 2

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 2

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 1

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 1

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 1

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 1

wstawiono (meski Rower Zjazdowy, o rozmiarze ramy 19), #elementow w buforze: 1

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 1

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 1

wstawiono (Samochod: Honda Accord, moc = 180, vMax = 252), #elementow w buforze: 1

wstawiono (Samochod: Honda Accord, moc = 80, vMax = 112), #elementow w buforze: 2

wstawiono (meski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 3

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 4
wys³ano do klienta bufor o nazwie: prodKons2

wstawiono (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 28str), #elementow w buforze: 5

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 155str), #elementow w buforze: 3

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 135str), #elementow w buforze: 4

wstawiono (meski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 4

wstawiono (Samochod: Toyota Yaris, moc = 205, vMax = 287), #elementow w buforze: 4

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str), #elementow w buforze: 5

wstawiono (Samochod: VW Golf, moc = 130, vMax = 182), #elementow w buforze: 5

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 134str), #elementow w buforze: 5

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 110str), #elementow w buforze: 5

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 103str), #elementow w buforze: 4

wstawiono (Samochod: Toyota Yaris, moc = 245, vMax = 343), #elementow w buforze: 2

wstawiono (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 192str), #elementow w buforze: 3

wstawiono (meski Rower Zjazdowy, o rozmiarze ramy 19), #elementow w buforze: 3

wstawiono (damski Rower gorski, o rozmiarze ramy 20), #elementow w buforze: 1

wstawiono (Samochod: Toyota Yaris, moc = 25, vMax = 35), #elementow w buforze: 1

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 46str), #elementow w buforze: 1

wstawiono (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 80str), #elementow w buforze: 1

wstawiono (Samochod: VW Golf, moc = 10, vMax = 14), #elementow w buforze: 1

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 2

wstawiono (Samochod: Renault Megane, moc = 155, vMax = 217), #elementow w buforze: 2

wstawiono (Samochod: Honda Accord, moc = 80, vMax = 112), #elementow w buforze: 2

wstawiono (Samochod: Honda Accord, moc = 140, vMax = 196), #elementow w buforze: 2

wstawiono (Samochod: Honda Accord, moc = 60, vMax = 84), #elementow w buforze: 2

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 3

wstawiono (Samochod: Honda Accord, moc = 100, vMax = 140), #elementow w buforze: 3

wstawiono (Samochod: VW Golf, moc = 10, vMax = 14), #elementow w buforze: 4

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 114str), #elementow w buforze: 3

wstawiono (Samochod: Toyota Yaris, moc = 45, vMax = 63), #elementow w buforze: 3

wstawiono (meski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 4

wstawiono (damski Rower Trialowy, o rozmiarze ramy 18), #elementow w buforze: 3

wstawiono (Samochod: Honda Accord, moc = 140, vMax = 196), #elementow w buforze: 3

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str), #elementow w buforze: 1

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 1

wstawiono (Samochod: Honda Accord, moc = 0, vMax = 0), #elementow w buforze: 1

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str), #elementow w buforze: 1

wstawiono (Samochod: Toyota Yaris, moc = 105, vMax = 147), #elementow w buforze: 1

wstawiono (meski Rower gorski, o rozmiarze ramy 15), #elementow w buforze: 2




Producent:

Wstawiono: (Samochod: Honda Accord, moc = 180, vMax = 252)
Wstawiono: (Samochod: Honda Accord, moc = 80, vMax = 112)

Wstawiono: (meski Rower szosowy, o rozmiarze ramy 21)
Wstawiono: (meski Rower gorski, o rozmiarze ramy 15)
Wstawiono: (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 28str)
Wstawiono: (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 155str)
Wstawiono: (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 135str)
Wstawiono: (meski Rower szosowy, o rozmiarze ramy 21)
Wstawiono: (Samochod: Toyota Yaris, moc = 205, vMax = 287)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str)
Wstawiono: (Samochod: VW Golf, moc = 130, vMax = 182)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 134str)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 110str)
Wstawiono: (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 103str)
Wstawiono: (Samochod: Toyota Yaris, moc = 245, vMax = 343)
Wstawiono: (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 192str)
Wstawiono: (meski Rower Zjazdowy, o rozmiarze ramy 19)
Wstawiono: (damski Rower gorski, o rozmiarze ramy 20)
Wstawiono: (Samochod: Toyota Yaris, moc = 25, vMax = 35)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 46str)
Wstawiono: (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 80str)
Wstawiono: (Samochod: VW Golf, moc = 10, vMax = 14)
Wstawiono: (meski Rower gorski, o rozmiarze ramy 15)
Wstawiono: (Samochod: Renault Megane, moc = 155, vMax = 217)
Wstawiono: (Samochod: Honda Accord, moc = 80, vMax = 112)
Wstawiono: (Samochod: Honda Accord, moc = 140, vMax = 196)
Wstawiono: (Samochod: Honda Accord, moc = 60, vMax = 84)
Wstawiono: (meski Rower BMX, o rozmiarze ramy 17)
Wstawiono: (Samochod: Honda Accord, moc = 100, vMax = 140)
Wstawiono: (Samochod: VW Golf, moc = 10, vMax = 14)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 114str)
Wstawiono: (Samochod: Toyota Yaris, moc = 45, vMax = 63)
Wstawiono: (meski Rower BMX, o rozmiarze ramy 17)
Wstawiono: (damski Rower Trialowy, o rozmiarze ramy 18)
Wstawiono: (Samochod: Honda Accord, moc = 140, vMax = 196)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str)
Wstawiono: (damski Rower szosowy, o rozmiarze ramy 16)
Wstawiono: (Samochod: Honda Accord, moc = 0, vMax = 0)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str)
Wstawiono: (Samochod: Toyota Yaris, moc = 105, vMax = 147)
Wstawiono: (meski Rower gorski, o rozmiarze ramy 15)


-Konsument:
(Samochod: Honda Accord, moc = 180, vMax = 252)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 80, vMax = 112)
---------------------------------------------
Pobrano: 
(meski Rower szosowy, o rozmiarze ramy 21)
---------------------------------------------
Pobrano: 
(meski Rower gorski, o rozmiarze ramy 15)
---------------------------------------------
Pobrano: 
(Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 28str)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 155str)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 135str)
---------------------------------------------
Pobrano: 
(meski Rower szosowy, o rozmiarze ramy 21)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 205, vMax = 287)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str)
---------------------------------------------
Pobrano: 
(Samochod: VW Golf, moc = 130, vMax = 182)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 134str)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 110str)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 103str)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 245, vMax = 343)
---------------------------------------------
Pobrano: 
(Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 192str)
---------------------------------------------
Pobrano: 
(meski Rower Zjazdowy, o rozmiarze ramy 19)
---------------------------------------------
Pobrano: 
(damski Rower gorski, o rozmiarze ramy 20)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 25, vMax = 35)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 46str)
---------------------------------------------
Pobrano: 
(Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 80str)
---------------------------------------------
Pobrano: 
(Samochod: VW Golf, moc = 10, vMax = 14)
---------------------------------------------
Pobrano: 
(meski Rower gorski, o rozmiarze ramy 15)
---------------------------------------------
Pobrano: 
(Samochod: Renault Megane, moc = 155, vMax = 217)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 80, vMax = 112)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 140, vMax = 196)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 60, vMax = 84)
---------------------------------------------
Pobrano: 
(meski Rower BMX, o rozmiarze ramy 17)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 100, vMax = 140)
---------------------------------------------
Pobrano: 
(Samochod: VW Golf, moc = 10, vMax = 14)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 114str)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 45, vMax = 63)
---------------------------------------------
Pobrano: 
(meski Rower BMX, o rozmiarze ramy 17)
---------------------------------------------
Pobrano: 
(damski Rower Trialowy, o rozmiarze ramy 18)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 140, vMax = 196)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str)
---------------------------------------------
Pobrano: 
(damski Rower szosowy, o rozmiarze ramy 16)
---------------------------------------------
Pobrano: 
(Samochod: Honda Accord, moc = 0, vMax = 0)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str)
---------------------------------------------
}
