przedmiot TAS temat A nr_indeksu s396463 liczba_pkt 4 



Zadanie 1 ---------------------
rpcgen -aC plik.x
Struktura macierzy po przej¶ciu przez rpcgen:
struct Macierz { 
      struct {
           u_int Elem_len;
           float *Elem_val; 
}Elem;
  int IleW; 
  int ileK; 
}

 float Elem <>; - rozdzielony na strukturê z³o¿on± z warto¶ci liczby elementów oraz wska¼ników na te elementy
 
Zadanie 2 ---------------------
Zmiany w sum_client.c
#ifndef	DEBUG
	clnt = clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */
    suma_1_arg.x1 = 9;
    suma_1_arg.x2 = 3;
	result_1 = suma_1(&suma_1_arg, clnt);
printf("%d\n", *result_1);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	
Zmiany w sum_server.c
int *
suma_1_svc(ParaLi *argp, struct svc_req *rqstp)
{
	static int  result;
	result=argp->x1+argp->x2;
	return &result;
}

./sum_server
make -f Makefile.sum

cc -g    -c -o sum_clnt.o sum_clnt.c
cc -g    -c -o sum_client.o sum_client.c
cc -g    -c -o sum_xdr.o sum_xdr.c
cc -g     -o sum_client  sum_clnt.o sum_client.o sum_xdr.o -lnsl 
cc -g     -o sum_server  sum_svc.o sum_server.o sum_xdr.o -lnsl

./sum_client localhost

12

Zadanie 3 ---------------------

macierz.h:
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _MATRIX_H_RPCGEN
#define _MATRIX_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct Macierz {
	struct {
		u_int Elem_len;
		float *Elem_val;
	} Elem;
	int IleW;
	int IleK;
};
typedef struct Macierz Macierz;

typedef Macierz Mac;

#define ProgMacierze 0x21001234
#define VerMacierze 1

#if defined(__STDC__) || defined(__cplusplus)
#define PokazMacierz 1
extern  void * pokazmacierz_1(Mac *, CLIENT *);
extern  void * pokazmacierz_1_svc(Mac *, struct svc_req *);
extern int progmacierze_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define PokazMacierz 1
extern  void * pokazmacierz_1();
extern  void * pokazmacierz_1_svc();
extern int progmacierze_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_Macierz (XDR *, Macierz*);
extern  bool_t xdr_Mac (XDR *, Mac*);

#else /* K&R C */
extern bool_t xdr_Macierz ();
extern bool_t xdr_Mac ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_MATRIX_H_RPCGEN */

m_klient.c:
#include "macierz.h"
#include <stdio.h>

void
progmacierze_1(char *host)
{
	float x = 0;
	CLIENT *clnt;
	void  *result_1;
	Mac  pokazmacierz_1_arg;

	
	printf("Wiersze: \n");
	scanf("%i", &pokazmacierz_1_arg.IleW);
	printf("Kolumny: \n");
	scanf("%i", &pokazmacierz_1_arg.IleK);
	
	pokazmacierz_1_arg.Elem.Elem_len = pokazmacierz_1_arg.IleW * pokazmacierz_1_arg.IleK;
	pokazmacierz_1_arg.Elem.Elem_val = calloc(pokazmacierz_1_arg.Elem.Elem_len, sizeof(float));

	int i;
	for (i = 0; i < pokazmacierz_1_arg.Elem.Elem_len; i++) {
		printf("Warto¶æ elementu %i\n", i);
		scanf("%f", &x);
		pokazmacierz_1_arg.Elem.Elem_val[i] = x;
	}
	free(pokazmacierz_1_arg.Elem.Elem_val);

#ifndef	DEBUG
	clnt = clnt_create (host, ProgMacierze, VerMacierze, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = pokazmacierz_1(&pokazmacierz_1_arg, clnt);
	if (result_1 == (void *) NULL) {
		clnt_perror (clnt, "call failed");
	}
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progmacierze_1 (host);
exit (0);
}

m_serwer.c:

#include "macierz.h"

void *
pokazmacierz_1_svc(Mac *argp, struct svc_req *rqstp)
{
	static char * result;
	
	int i;
	for (i = 0; i < argp->IleW * argp->IleK; i++) {
		printf("Element %i ma warto¶æ %f\n", i, argp->Elem.Elem_val[i]);
	}

	return (void *) &result;
}

./m_klient localhost
Wiersze: 
2
Kolumny: 
2
Warto¶æ elementu 0
4
Warto¶æ elementu 1
3
Warto¶æ elementu 2
2
Warto¶æ elementu 3
1

./m_serwer
Element 0 ma warto¶æ 4.000000
Element 1 ma warto¶æ 3.000000
Element 2 ma warto¶æ 2.000000
Element 3 ma warto¶æ 1.000000

Zadanie 4 ---------------------
macierz.x:

struct Macierz {
  float Elem <>;
  int IleW; int IleK;
};
typedef struct Macierz Mac;

struct TrzyMacierze { Mac M1; Mac M2;};
typedef struct TrzyMacierze TrzyMac;

program ProgMacierze {
  version VerMacierze {
    Mac operation(TrzyMac) = 1;
  } = 1;
} = 0x21001234;

macierz_klient.c:
{
	CLIENT *clnt;
	Mac  *result_1;
	TrzyMac  operation_1_arg;

	printf("Macierz pierwsza: \n");
	printf("Wiersze: \n");
	scanf("%i", &operation_1_arg.M1.IleW);
	operation_1_arg.M2.IleW = operation_1_arg.M1.IleW;
	int w =  operation_1_arg.M1.IleW;
	printf("Kolumny: \n");
	scanf("%i", &operation_1_arg.M1.IleK);
	operation_1_arg.M2.IleK = operation_1_arg.M1.IleK;
	
	operation_1_arg.M1.Elem.Elem_len = operation_1_arg.M1.IleW * operation_1_arg.M1.IleK;
	operation_1_arg.M1.Elem.Elem_val = calloc(operation_1_arg.M1.Elem.Elem_len, sizeof(float));

	int i;
	for (i = 0; i < operation_1_arg.M1.Elem.Elem_len; i++) {
		printf("Podaj %i element pierwszej macierzy: \n", i);
		float x = 0;
		scanf("%f", &x);
		operation_1_arg.M1.Elem.Elem_val[i] = x;
	}

	printf("Macierz druga: \n");
	
	operation_1_arg.M2.Elem.Elem_len = operation_1_arg.M2.IleW * operation_1_arg.M2.IleK;
	operation_1_arg.M2.Elem.Elem_val = calloc(operation_1_arg.M2.Elem.Elem_len, sizeof(float));

	i = 0;
	for (i = 0; i < operation_1_arg.M2.Elem.Elem_len; i++) {
		printf("Podaj element drugiej macierzy: %i\n", i);
		float x = 0;
		scanf("%f", &x);
		operation_1_arg.M2.Elem.Elem_val[i] = x;
	}


#ifndef	DEBUG
	clnt = clnt_create (host, ProgMacierze, VerMacierze, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

	result_1 = operation_1(&operation_1_arg, clnt);
	i = 0;
	int n = w - 1;
	printf("Result:\n");
	for (i = 0; i < result_1 -> Elem.Elem_len; i++) {
		printf("%f ", result_1 -> Elem.Elem_val[i]);
		if (i == n) {
		printf("\n");
		n = n + w ;
		}
	}
	if (result_1 == (Mac *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	printf("\n");
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}

macierz_serwer.c:

Mac *
operation_1_svc(TrzyMac *argp, struct svc_req *rqstp)
{
	static Mac  result;
	result.IleW = argp -> M1.IleW;
	result.IleK = argp -> M1.IleK;
	int x = argp -> M1.IleW;

	result.Elem.Elem_len = result.IleW * result.IleK;
	result.Elem.Elem_val = calloc(result.Elem.Elem_len, sizeof(float));
	int i;
	for (i = 0; i < result.Elem.Elem_len; i++) {
		result.Elem.Elem_val[i] = argp -> M1.Elem.Elem_val[i] + argp -> M2.Elem.Elem_val[i];
	}
	int n = x - 1;
	printf("Wynik \n");
	for (i = 0; i < result.Elem.Elem_len; i++) {
		printf("%f ", result.Elem.Elem_val[i]);
		if (i == n) {
		printf("\n");
		n = n + x;
		}
	}

	return &result;
}

./macierz_klient localhost
Macierz pierwsza: 
Wiersze: 
3
Kolumny: 
3
Podaj 0 element pierwszej macierzy:
1
Podaj 1 element pierwszej macierzy:
2
Podaj 2 element pierwszej macierzy:
3
Podaj 3 element pierwszej macierzy:
4
Podaj 4 element pierwszej macierzy:
5
Podaj 5 element pierwszej macierzy:
6
Podaj 6 element pierwszej macierzy:
1
Podaj 7 element pierwszej macierzy:
2
Podaj 8 element pierwszej macierzy:
3
Macierz druga: 
Podaj 0 element drugiej macierzy:
9
Podaj 1 element drugiej macierzy:
8
Podaj 2 element drugiej macierzy:
7
Podaj 3 element drugiej macierzy:
6
Podaj 4 element drugiej macierzy:
5
Podaj 5 element drugiej macierzy:
4
Podaj 6 element drugiej macierzy:
3
Podaj 7 element drugiej macierzy:
2
Podaj 8 element drugiej macierzy:
1

./macierz_serwer 
10.000000 10.000000 10.000000 
10.000000 10.000000 10.000000 
4.000000 4.000000 4.000000 } {<sprawozdanie przedmiot="TAS" temat="B">
<imie_nazwisko>Mateusz Zary³o</imie_nazwisko>
<nr_indeksu>s396463</nr_indeksu>
<liczba_pkt>5</liczba_pkt>
<z>10</z>
<z>11</z>
<z>12</z>
<z>13</z>
<z>14</z>
</sprawozdanie>

Zadanie 10 ---------------------
10.1. --------------------------
sss.java, powolnaMetoda():
public int powolnaMetoda() throws RemoteException
  {
	for (licznik = 0; licznik<10 ; licznik++)
	{
	    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
		Thread aktualnywatek = Thread.currentThread();
		String nazwa = aktualnywatek.getName();
		System.out.println("Nazwa " + nazwa);
	}
    try {
	Thread.sleep(2000);
	} 
	catch(Exception e) {};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }
Polecenie: rmiregistry
		   java sss
		   java kkk
kkk: oo.powolnaMetoda()=10
kkk: oo2.powolnaMetoda()=10
kkk: oo2.powolnaMetoda()=10

		   java kkk
		   
kkk: oo.powolnaMetoda()=10
kkk: oo2.powolnaMetoda()=10
kkk: oo2.powolnaMetoda()=10

Wydruk:
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(2)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=0
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=1
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=2
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=3
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=4
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=5
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=6
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=7
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=8
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); licznik=9
Nazwa RMI TCP Connection(3)-127.0.0.1
sss: powolnaMetoda(); koniec dzialania !

10.2. --------------------------
Obiekty klas implementuj±cych interfejs Odleg³yObiekt posiadaj± metodê drugiObiekt(), która zwraca referencjê do obiektu o typie interfejsowym OdleglyObiekt. Metoda drugiObiekt() zwraca referenncje do pola drugiObiekt. Pole to jest inicjalizowane w publicznym konstruktorze OdleglaKlasa, po czym nastêpuje eksportowanie utworzonego obiektu.

Klient:
import java.rmi.*;
import java.rmi.registry.*;

public class kkk
{
  public static void main(String args[])
  {

    try {
      OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
        "rmi://localhost/przyklad_rmi4");
      
      OdleglyObiekt oo2 = oo.drugiObiekt();
      System.out.println("kkk: oo2.powolnaMetoda()="+oo2.powolnaMetoda());
      System.out.println("kkk: oo2.powolnaMetoda()="+oo2.powolnaMetoda());
    } catch(Exception e) {
      System.err.println("kkk: blad !!! "+e.getMessage());
    }
  }
} 

Z EKSPORTOWANIEM:
Konstruktor:
OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
      Naming.rebind(s,this);
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }

    drugiObiekt= new OdleglaKlasa();

    UnicastRemoteObject.exportObject(drugiObiekt);


    System.out.println("sss: OdleglaKlasa(String); ok");
  }
 
Wydruki
Serwer:
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!

[obs³uga wywo³añ metody powolnaMetoda(), na obiekcie drugiObiekt, na rzecz dwóch klientów]:
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); licznik=2
current thread = Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=3
current thread = Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=4
current thread = Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !
current thread = Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !

Klient pierwszy i drugi:
kkk: oo2.powolnaMetoda()=2
kkk: oo2.powolnaMetoda()=4

-wydruk drugiego klienta:
kkk: oo2.powolnaMetoda()=3
kkk: oo2.powolnaMetoda()=4

£atwo zauwa¿yæ, ¿e koñcowy stan licznika, ze wzglêdu na wywo³ywanie metody na rzecz jednego obiektu na serwerze, jest taki sam - (4).

BEZ EKSPORTOWANIA:
Konstruktor:
OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
      Naming.rebind(s,this);
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }


    drugiObiekt= new OdleglaKlasa();


    System.out.println("sss: OdleglaKlasa(String); ok");
  }

Wydruki
Serwer:
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!

Klient pierwszy i drugi:
sss: powolnaMetoda(); licznik=1
current thread = Thread[main,5,main]
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=1
sss: powolnaMetoda(); licznik=2
current thread = Thread[main,5,main]
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=2

sss: powolnaMetoda(); licznik=1
current thread = Thread[main,5,main]
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=1
sss: powolnaMetoda(); licznik=2
current thread = Thread[main,5,main]
sss: powolnaMetoda(); koniec dzialania !
kkk: oo2.powolnaMetoda()=2

Widaæ, ¿e gdy drugiObiekt nie jest eksportowany, czê¶æ wydruków pojawi³o siê teraz po stronie klienta, a nie serwera. Dzieje siê tak za spraw± dzia³ania biblioteki RMI.

10.3. --------------------------

W programie klienckim wywo³amy metodê interfejsu OdleglyObiekt, implementowan± nastêpuj±co:
   public void generujeBlad() throws RemoteException{
        throw new RemoteException("sztucznie wygenerowany blad ...");
   }
   
Klient:
import java.rmi.*;
import java.rmi.registry.*;

public class kkk
{
  public static void main(String args[])
  {

    try {
      OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
        "rmi://localhost/przyklad_rmi4");
 
      System.out.println("kkk: oo.powolnaMetoda()="+oo.powolnaMetoda());

      oo.generujeBlad();
    } catch(Exception e) {
      System.err.println("kkk: blad !!! "+e.getMessage());
    }
  }
}

Wydruki
Serwer:
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: powolnaMetoda(); licznik=1
current thread = Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]
sss: powolnaMetoda(); koniec dzialania !

Klient:
kkk: oo.powolnaMetoda()=1
kkk: blad !!! RemoteException occurred in server thread; nested exception is: 
	java.rmi.RemoteException: sztucznie wygenerowany blad ...
	
Widaæ, ¿e serwer przekazuje do klienta informacjê o wyj±tkach. 

Zadanie 11 ---------------------
Interfejs OdleglyBufor:

import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public int pobierz() throws RemoteException, InterruptedException;
    public void wstaw(int element) throws RemoteException, InterruptedException;
}

Interfejs FabrykaBuforow (zdalny interfejs dla klasy TworzOdlegleBufory):

import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
}

ServerLogic.java:
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Integer> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Integer>();
    }
    
    public synchronized int pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(int element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("sss: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }
    
}

public class ServerLogic{
    public static void main(String[] argv){
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}

Klasa Client.java:
import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Client{
  public static void main(String args[]){
            try{
	  
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  ktora zwraca referencje do zdalnego OdleglegoBufora
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBufor(10);


		  Runnable producent = new Runnable(){
		  public void run(){
		      try{
			  int x;
			  Random random = new Random(System.currentTimeMillis());
			  while(true){
			      x = random.nextInt(100);
			      bufor.wstaw(x);
			      Thread.sleep(random.nextInt(1000));
			  }
		      }catch(RemoteException ex){
			  System.out.println("Blad Remote: " + ex.getMessage());
		      }catch(InterruptedException ex){
		    	
			  System.out.println("Zakonczono produkcje");
			  return;
		      }
		  }
	  };
	  
	  
	  Runnable konsument = new Runnable(){
		  public void run(){
		      try{
			  Random random = new Random(System.currentTimeMillis());
			  while(true){
			      System.out.println("pobrano " + bufor.pobierz());
			      Thread.sleep(random.nextInt(1000));
			  }p
		      }catch(RemoteException ex){
			  System.out.println("Blad Remote: " + ex.getMessage());
		      }catch(InterruptedException ex){
		      	  
			  System.out.println("Zakonczono konsumpcje");
			  return;
		      }
		  }
	  };

	  final Thread produkuj = new Thread(producent);
	  final Thread konsumuj = new Thread(konsument);
	  
	  
	  Runnable zakoncz = new Runnable(){
		  public void run(){
		      produkuj.interrupt();
		      konsumuj.interrupt();
		  }
	  };
	  
	  Runtime.getRuntime().addShutdownHook(new Thread(zakoncz));

		
	  produkuj.start();
	  konsumuj.start();
	  
     
    } catch(Exception e) {
      System.err.println("Client: blad !!! " + e.getMessage());
    }
  }
}

Wydruki
Serwer:
ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono nowy bufor o rozmiarze: 10

wstawiono 2, #elementow w buforze: 1
wstawiono 77, #elementow w buforze: 1
wstawiono 43, #elementow w buforze: 1
wstawiono 37, #elementow w buforze: 1
wstawiono 58, #elementow w buforze: 2
wstawiono 57, #elementow w buforze: 1
wstawiono 82, #elementow w buforze: 1
wstawiono 21, #elementow w buforze: 1
wstawiono 61, #elementow w buforze: 1
wstawiono 75, #elementow w buforze: 1
wstawiono 75, #elementow w buforze: 1
wstawiono 24, #elementow w buforze: 2
wstawiono 84, #elementow w buforze: 1
wstawiono 36, #elementow w buforze: 2
wstawiono 4, #elementow w buforze: 2
wstawiono 18, #elementow w buforze: 1
wstawiono 45, #elementow w buforze: 2
wstawiono 83, #elementow w buforze: 2
wstawiono 0, #elementow w buforze: 1
wstawiono 14, #elementow w buforze: 2

Klient:
pobrano 2
pobrano 77
pobrano 43
pobrano 37
pobrano 58
pobrano 57
pobrano 82
pobrano 21
pobrano 61
pobrano 75
pobrano 75
pobrano 24
pobrano 84
pobrano 36
pobrano 4
pobrano 18
pobrano 45
pobrano 83
Zakonczono produkcje
Zakonczono konsumpcje

Zadanie 12 ---------------------
-interfejs FabrykaBuforow:

import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
    OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException;
}

-interfejs OdleglyBufor:

import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public int pobierz() throws RemoteException, InterruptedException;
    public void wstaw(int element) throws RemoteException, InterruptedException;
}

-implementacje interfejsów zdalnych oraz kod serwera - plik ServerLogic.java:

import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Integer> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Integer>();
    }
    
    public synchronized int pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(int element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    private final Map<String, OdleglyBufor> memory;
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	memory = new HashMap<String, OdleglyBufor>();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("ServerLogic: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }

    public OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa){
	if(memory.containsKey(nazwa)){
	    System.out.println("wys³ano do klienta bufor o nazwie: " + nazwa);
	    return memory.get(nazwa);
	}else{
	    OdleglyBufor odleglyBufor =  new OBuforImpl(10);
	    try {
		UnicastRemoteObject.exportObject(odleglyBufor);
	    } catch(Exception e) {
		System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
	    }
	    memory.put(nazwa, odleglyBufor);
	    System.out.println("Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: " + nazwa);
	    return odleglyBufor;
	}
    }
}

public class ServerLogic{
    public static void main(String[] argv){
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}

-Strona kliencka - producent:

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Producent{
  public static void main(String args[]){
      //System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons1");
	  int x;
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      x = random.nextInt(100);
	      bufor.wstaw(x);
	      System.out.println("Wstawiono: " + x);
	      Thread.sleep(random.nextInt(1000));
	  }
      } catch(Exception e) {
	  System.err.println("Producent: blad !!! "+e.getMessage());
      }
  }
}

-Strona kliencka - konsument:

import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Konsument{
  public static void main(String args[]){
      //System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons1");
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      System.out.println("Pobrano: " + bufor.pobierz());
	      Thread.sleep(random.nextInt(1000));
	  }
      } catch(Exception e) {
	  System.err.println("Konsument: blad !!! "+e.getMessage());
      }
  }
}

Wydruki
Serwer:

ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: prodKons1
wstawiono 24, #elementow w buforze: 1
wstawiono 99, #elementow w buforze: 2
wstawiono 65, #elementow w buforze: 3
wstawiono 83, #elementow w buforze: 4
wstawiono 83, #elementow w buforze: 5
wstawiono 7, #elementow w buforze: 6
wstawiono 97, #elementow w buforze: 7
wstawiono 14, #elementow w buforze: 8
wys³ano do klienta bufor o nazwie: prodKons1 
wstawiono 14, #elementow w buforze: 8
wstawiono 50, #elementow w buforze: 9
wstawiono 70, #elementow w buforze: 10
wstawiono 51, #elementow w buforze: 9
wstawiono 58, #elementow w buforze: 10
wstawiono 91, #elementow w buforze: 10
wstawiono 41, #elementow w buforze: 10
wstawiono 15, #elementow w buforze: 10
wstawiono 82, #elementow w buforze: 10
wstawiono 92, #elementow w buforze: 9
wstawiono 15, #elementow w buforze: 10
wstawiono 28, #elementow w buforze: 7
wstawiono 79, #elementow w buforze: 8
wstawiono 7, #elementow w buforze: 9
wstawiono 95, #elementow w buforze: 9
wstawiono 13, #elementow w buforze: 8
wstawiono 98, #elementow w buforze: 9
wstawiono 82, #elementow w buforze: 9
wstawiono 39, #elementow w buforze: 7
wstawiono 45, #elementow w buforze: 8
wstawiono 85, #elementow w buforze: 7
wstawiono 71, #elementow w buforze: 7
wstawiono 11, #elementow w buforze: 6
wstawiono 96, #elementow w buforze: 6
wstawiono 39, #elementow w buforze: 7
wstawiono 32, #elementow w buforze: 7
wstawiono 88, #elementow w buforze: 8
wstawiono 67, #elementow w buforze: 9
wstawiono 27, #elementow w buforze: 8
wstawiono 76, #elementow w buforze: 7
wstawiono 90, #elementow w buforze: 5
wstawiono 12, #elementow w buforze: 3
wstawiono 8, #elementow w buforze: 4
wstawiono 11, #elementow w buforze: 4
wstawiono 78, #elementow w buforze: 5
wstawiono 28, #elementow w buforze: 6
wstawiono 60, #elementow w buforze: 7
wstawiono 25, #elementow w buforze: 8
wstawiono 24, #elementow w buforze: 6
wstawiono 3, #elementow w buforze: 7
wstawiono 7, #elementow w buforze: 6

Producent:
Wstawiono: 24
Wstawiono: 99
Wstawiono: 65
Wstawiono: 83
Wstawiono: 83
Wstawiono: 7
Wstawiono: 97
Wstawiono: 14
Wstawiono: 14
Wstawiono: 50
Wstawiono: 70
Wstawiono: 51
Wstawiono: 58
Wstawiono: 91
Wstawiono: 41
Wstawiono: 15
Wstawiono: 82
Wstawiono: 92
Wstawiono: 15
Wstawiono: 28
Wstawiono: 79
Wstawiono: 7
Wstawiono: 95
Wstawiono: 13
Wstawiono: 98
Wstawiono: 82
Wstawiono: 39
Wstawiono: 45
Wstawiono: 85
Wstawiono: 71
Wstawiono: 11
Wstawiono: 96
Wstawiono: 39
Wstawiono: 32
Wstawiono: 88
Wstawiono: 67
Wstawiono: 27
Wstawiono: 76
Wstawiono: 90
Wstawiono: 12
Wstawiono: 8
Wstawiono: 11
Wstawiono: 78
Wstawiono: 28
Wstawiono: 60
Wstawiono: 25
Wstawiono: 24
Wstawiono: 3
Wstawiono: 7

Konsument:
Pobrano: 24
Pobrano: 99
Pobrano: 65
Pobrano: 83
Pobrano: 83
Pobrano: 7
Pobrano: 97
Pobrano: 14
Pobrano: 14
Pobrano: 50
Pobrano: 70
Pobrano: 51
Pobrano: 58
Pobrano: 91
Pobrano: 41
Pobrano: 15
Pobrano: 82
Pobrano: 92
Pobrano: 15
Pobrano: 28
Pobrano: 79
Pobrano: 7
Pobrano: 95
Pobrano: 13
Pobrano: 98
Pobrano: 82
Pobrano: 39
Pobrano: 45
Pobrano: 85
Pobrano: 71
Pobrano: 11
Pobrano: 96
Pobrano: 39
Pobrano: 32
Pobrano: 88
Pobrano: 67
Pobrano: 27
Pobrano: 76
Pobrano: 90
Pobrano: 12
Pobrano: 8
Pobrano: 11
Pobrano: 78
Pobrano: 28
Pobrano: 60
Pobrano: 25
Pobrano: 24

Zadanie 13 ---------------------

-Interfejs OdleglyObiekt.java:
import java.rmi.*;

public interface OdleglyObiekt extends Remote{
    OdleglyObiekt drugiObiekt() throws RemoteException;
    int powolnaMetoda() throws RemoteException;
    PrzykladowaKlasa eksperyment1(PrzykladowaKlasa pk1, PrzykladowaKlasa pk2) throws RemoteException;
}

-Klasa PrzykladowaKlasa.java:
import java.util.Random;
import java.io.Serializable;

public class PrzykladowaKlasa implements Serializable{
    private final String nazwa;
    private final int numer;
    
    public PrzykladowaKlasa(){
	nazwa = "Instancja klasy PrzykladowaKlasa";
	numer = new Random(System.currentTimeMillis()).nextInt();
	
	System.out.println("Utworzono instancje klasy PrzykladowaKlasa");
    }
    
    public String pokaz(){
	return "moja nazwa to " + nazwa + ", a moj numer to " + numer;
    }
}

-Plik sss.java - wewn±trz implementacja interfejsu OdleglyObiekt oraz klasa logiki serwera - sss:
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*;
import java.io.*;
import java.util.Random;


class OdleglaKlasa
implements OdleglyObiekt, Serializable
{
  OdleglaKlasa(String s) throws RemoteException
  {
    super();
    try {
      UnicastRemoteObject.exportObject(this);
        // tu decydujemy ze obiekt bedzie "zdalny"
        // exportObject() musi byc PRZED rebind() !!!
      Naming.rebind(s,this);
        // rejestruje sie w Naming Service (= rmiregistry)
    } catch(Exception e) {
      System.err.println("sss: OdleglaKlasa(String); blad !!! "+e.getMessage());
    }

    // tworzymy drugi obiekty ...
    drugiObiekt= new OdleglaKlasa();
    UnicastRemoteObject.exportObject(drugiObiekt);

    System.out.println("sss: OdleglaKlasa(String); ok");
  }
  OdleglaKlasa() throws RemoteException
  {
    super();
    System.out.println("sss: OdleglaKlasa(); ok");
  }


  private OdleglyObiekt drugiObiekt;
  public OdleglyObiekt drugiObiekt() throws RemoteException
  {
    return drugiObiekt;
  }

  int licznik=0;
  public int powolnaMetoda() throws RemoteException
  {
    licznik++;
    System.out.println("sss: powolnaMetoda(); licznik="+licznik);
    try {Thread.sleep(200);} catch(Exception e){};
    System.out.println("sss: powolnaMetoda(); koniec dzialania !");
    return licznik;
  }

    public PrzykladowaKlasa eksperyment1(PrzykladowaKlasa pk1, PrzykladowaKlasa pk2){
	System.out.println(pk1.pokaz());
	System.out.println(pk2.pokaz());
	return (new Random(System.currentTimeMillis()).nextInt() % 2 == 0) ? pk1 : pk2;
    }
}

public class sss
{
  public static void main(String args[])
  {
    System.setSecurityManager(new RMISecurityManager());

    try {
      System.out.println("sss: zaczynam tworzyc obiekty ...");
      OdleglyObiekt oo= new OdleglaKlasa("przyklad_rmi4");
      System.out.println("sss: obiekty utworzone !!!");
    } catch(Exception e) {
      System.err.println("sss: blad !!! "+e.getMessage());
    }
  }
}
-Kod Klasy dziedzicz±cej z PrzykladowaKlasa.java - PrzykladowaKlasa2 import java.util.Date;

public class PrzykladowaKlasa2 extends PrzykladowaKlasa{
    private final Date data;
    
  
    PrzykladowaKlasa2(), pojawia siê dwa komunikaty na terminalu
    
    public PrzykladowaKlasa2(){
	super();
	data = new Date();
	System.out.println("Utworzono instancje PrzykladowaKlasa2");
    }

        @Override
    public String pokaz(){
	return super.pokaz() + ", moja data utworzenia to " + data;
    }
}

grant {
      permission java.security.AllPermission;
}; 

-klasa logiki klienta - kkk.java:
import java.rmi.*;
import java.rmi.registry.*;

public class kkk
{
  public static void main(String args[])
  {
    System.setSecurityManager(new RMISecurityManager());

    try {
      OdleglyObiekt oo = (OdleglyObiekt)Naming.lookup(
        "rmi://localhost/przyklad_rmi4");
      PrzykladowaKlasa2 pk2 = new PrzykladowaKlasa2();
      PrzykladowaKlasa pk1 = new PrzykladowaKlasa();
      PrzykladowaKlasa result = oo.eksperyment1(pk1, pk2);

      System.out.println(result.pokaz());
      
    } catch(Exception e) {
      System.err.println("kkk: blad !!! "+e.getMessage());
    }
  }
}

-plik polityki - plik.polityka - zdefiniowany tak samo w katalogu klienta i w katalogu serwera:
grant {
      permission java.security.AllPermission;
}; 

Wydruki, gdy zwracany jest obiekt klasy PrzykladowaKlasa:
Serwer:
sss: zaczynam tworzyc obiekty ...
	sss: OdleglaKlasa(); ok
	sss: OdleglaKlasa(String); ok
	sss: obiekty utworzone !!!
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -444191928
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -443807179, moja data utworzenia to Tue Dec 16 14:46:50 CET 2015

Klient:
	Utworzono instancje klasy PrzykladowaKlasa
	Utworzono instancje PrzykladowaKlasa2
	Utworzono instancje klasy PrzykladowaKlasa
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to -444191928
	
Wydruki, gdy zwracany jest obiekt klasy PrzykladowaKlasa2:
Serwer:
sss: zaczynam tworzyc obiekty ...
	sss: OdleglaKlasa(); ok
	sss: OdleglaKlasa(String); ok
	sss: obiekty utworzone !!!
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 596952276
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 586564055, moja data utworzenia to Tue Dec 16 14:49:50 CET 2015
	
Klient:
	Utworzono instancje klasy PrzykladowaKlasa
	Utworzono instancje PrzykladowaKlasa2
	Utworzono instancje klasy PrzykladowaKlasa	
	moja nazwa to Instancja klasy PrzykladowaKlasa, a moj numer to 586564055, moja data utworzenia to Tue Dec 16 14:49:50 CET 2015
	
Zadanie 14 ---------------------
Ksiazka.java:
import java.io.Serializable;

public class Ksiazka implements Serializable{
    private final int liczbaStron;
    private final String tytul;
    private final String autor;
    private final String tematyka;

    public Ksiazka(int l, String tyt, String a, String tem){
	liczbaStron = l;
	tytul = tyt;
	autor = a;
	tematyka = tem;
    }

    @Override
    public String toString(){
	return "(Ksiazka: " + autor + ", " + tytul + ", " + tematyka + ", " + liczbaStron + "str)";
    }
}

Samochod.java:
import java.io.Serializable;

public class Samochod implements Serializable{
    private final int moc;
    private final int vMax;
    private final String model;

    public Samochod(int m, int v, String mod){
	moc = m;
	vMax = v;
	model = mod;
    }

    @Override
    public String toString(){
	return "(Samochod: " + model +", moc = " + moc + ", vMax = " + vMax + ")";
    }
}

Rower.java:
import java.io.Serializable;

public class Rower implements Serializable{
    private final int rozmiarRamy;
    private final String klasa;
    private final boolean Mêski;

    public Rower(int r, String k, boolean m){
	rozmiarRamy = r;
	klasa = k;
	Mêski = m;
    }

    @Override
    public String toString(){
	String plec = Mêski ? "Mêski" : "damski";
	return "("+ plec +  " Rower " + klasa +", o rozmiarze ramy " + rozmiarRamy + ")";
    }

}

Serwer:
Interfejs OdleglyBufor.java:
import java.rmi.*;
import java.lang.InterruptedException;

public interface OdleglyBufor extends Remote {
    public Object pobierz() throws RemoteException, InterruptedException;
    public void wstaw(Object element) throws RemoteException, InterruptedException;
}

FabrykaBuforow.java:
import java.rmi.*;

public interface FabrykaBuforow extends Remote{
    OdleglyBufor nowyOdleglyBufor(int size) throws RemoteException;
    OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa) throws RemoteException;
}

ServerLogic.java:
import java.rmi.*;
import java.rmi.registry.*;
import java.rmi.server.*; 
import java.io.*;
import java.util.Queue;
import java.util.LinkedList;
import java.util.Map;
import java.util.HashMap;
import java.lang.InterruptedException;

class OBuforImpl implements OdleglyBufor, Serializable{
    private final Queue<Object> bufor;
    private final int size;
    
    public OBuforImpl(int s){
	size = s;
	bufor = new LinkedList<Object>();
    }
    
    public synchronized Object pobierz() throws RemoteException, InterruptedException{
	while(bufor.size() == 0){
	    wait();
	}
	notifyAll();
	return bufor.poll();
    }

    public synchronized void wstaw(Object element) throws RemoteException, InterruptedException{
	while(bufor.size() == size){
	    wait();
	}
	bufor.add(element);
	System.out.println();
	System.out.println("wstawiono " + element + ", #elementow w buforze: " + bufor.size());
	notifyAll();
    }
}

class TworzOdlegleBufory implements FabrykaBuforow, Serializable{
    private final Map<String, OdleglyBufor> memory;
    public TworzOdlegleBufory(String s) throws RemoteException{
	super();
	memory = new HashMap<String, OdleglyBufor>();
	try{
	    UnicastRemoteObject.exportObject(this);
            Naming.rebind(s,this);
	}catch(Exception e){
	    System.err.println("ServerLogic: OdleglaKlasa(String); blad !!! "+e.getMessage());
	}
    }

    public OdleglyBufor nowyOdleglyBufor(int size){
	OdleglyBufor odleglyBufor =  new OBuforImpl(size);
        try {
          UnicastRemoteObject.exportObject(odleglyBufor);
        } catch(Exception e) {
          System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
        }
	System.out.println("Utworzono nowy bufor o rozmiarze: " + size);
	return odleglyBufor;
    }

    public OdleglyBufor nowyOdleglyBuforZNazwa(String nazwa){
	if(memory.containsKey(nazwa)){
	    System.out.println("wys³ano do klienta bufor o nazwie: " + nazwa);
	    return memory.get(nazwa);
	}else{
	    OdleglyBufor odleglyBufor =  new OBuforImpl(5);
	    try {
		UnicastRemoteObject.exportObject(odleglyBufor);
	    } catch(Exception e) {
		System.err.println("ServerLogic: odleglyBufor(String); blad !!! "+e.getMessage());
	    }
	    memory.put(nazwa, odleglyBufor);
	    System.out.println("Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: " + nazwa);
	    return odleglyBufor;
	}
    }
}

public class ServerLogic{
    public static void main(String[] argv){
	System.setSecurityManager(new RMISecurityManager());
       	try {
	    System.out.println("ServerLogic: zaczynam tworzyc fabryke ...");
	    FabrykaBuforow tworzOdlegleBufory = new TworzOdlegleBufory("producent-konsument");
	    System.out.println("fabryka buforow utworzona !!!");
	} catch(Exception e) {
	    System.err.println("ServerLogic: blad !!! "+e.getMessage());
	}
    }
}


Klient
Producent.java:
import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Producent{
  public static void main(String args[]){
      System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons2");
	  String[] tytuly = {
	      "Dziady", 
	      "Potop", 
	      "Granica", 
	      "Ferdydurke"  
	  };

	  String[] autorzy = {
	      "Adam Mickiewicz", 
	      "Henryk Sienkiewicz", 
	      "Zofia Nalkowska", 
	      "Witold Gombrowicz"  
	  };

	  String[] samochody = {
	      "Honda Civic",
	      "Toyota Yaris",
	      "Opel Astra",
	      "Renault Megane"
	  };

	  String[] rowery = {
	      "górski",
	      "szosowy",
	      "BMX",
	      "Trialowy",
	      "Zjazdowy"
	  };


	  Object x = new Integer(4); // tylko dla formalnosci robie tu symboliczna inicjalizacje - kompilator tego wymaga
	  Random random = new Random(System.currentTimeMillis());
	  int los;
	  while(true){
	      random.setSeed(System.currentTimeMillis());
	      switch(random.nextInt(3)){
	         case 0:
		     los = random.nextInt(250);
		     x = new Ksiazka(los, tytuly[los % 4], autorzy[los % 4], "literatura piekna");
		     break;
	         case 1:
		     los = random.nextInt(50);
		     x = new Samochod(los * 5, los * 7, samochody[los%4]);
		     break;
	         case 2:
		     los = random.nextInt(7);
		     x = new Rower(los + 15, rowery[los % 5], (los % 2 == 0));
		     break;
	      }
	      
	      bufor.wstaw(x);
	      System.out.println("Wstawiono: " + x);
	      Thread.sleep(random.nextInt(2500));
	  }
      } catch(Exception e) {
	  System.err.println("Producent: blad !!! "+e.getMessage());
      }
  }
}


Konsument.java:
import java.rmi.*;
import java.rmi.registry.*;
import java.util.Random;

public class Konsument{
  public static void main(String args[]){
      System.setSecurityManager(new RMISecurityManager());

      try{
	  FabrykaBuforow fabryka = (FabrykaBuforow)Naming.lookup("rmi://localhost/producent-konsument");
	  final OdleglyBufor bufor = fabryka.nowyOdleglyBuforZNazwa("prodKons2");
	  Random random = new Random(System.currentTimeMillis());
	  while(true){
	      System.out.println("Pobrano: \n" + bufor.pobierz() + "\n---------------------------------------------");
	      Thread.sleep(random.nextInt(2500));
	  }
      } catch(Exception e) {
	  System.err.println("Konsument: blad !!! "+e.getMessage());
      }
  }
}

Wydruki:
Serwer:
ServerLogic: zaczynam tworzyc fabryke ...
fabryka buforow utworzona !!!
Utworzono i dodano do pamiêci bufor o rozmiarze 10 i nazwie: prodKons2

wstawiono (Samochod: Honda Civic, moc = 180, vMax = 200), #elementow w buforze: 1

wstawiono (Samochod: Honda Civic, moc = 80, vMax = 124), #elementow w buforze: 2

wstawiono (Mêski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 3

wstawiono (Mêski Rower górski, o rozmiarze ramy 15), #elementow w buforze: 4
wys³ano do klienta bufor o nazwie: prodKons2

wstawiono (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 28str), #elementow w buforze: 5

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 155str), #elementow w buforze: 3

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 135str), #elementow w buforze: 4

wstawiono (Mêski Rower szosowy, o rozmiarze ramy 21), #elementow w buforze: 4

wstawiono (Samochod: Toyota Yaris, moc = 205, vMax = 287), #elementow w buforze: 4

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str), #elementow w buforze: 5

wstawiono (Samochod: Opel Astra, moc = 130, vMax = 182), #elementow w buforze: 5

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 134str), #elementow w buforze: 5

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 110str), #elementow w buforze: 5

wstawiono (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 103str), #elementow w buforze: 4

wstawiono (Samochod: Toyota Yaris, moc = 245, vMax = 343), #elementow w buforze: 2

wstawiono (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 192str), #elementow w buforze: 3

wstawiono (Mêski Rower Zjazdowy, o rozmiarze ramy 19), #elementow w buforze: 3

wstawiono (damski Rower górski, o rozmiarze ramy 20), #elementow w buforze: 1

wstawiono (Samochod: Toyota Yaris, moc = 25, vMax = 35), #elementow w buforze: 1

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 46str), #elementow w buforze: 1

wstawiono (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 80str), #elementow w buforze: 1

wstawiono (Samochod: Opel Astra, moc = 10, vMax = 14), #elementow w buforze: 1

wstawiono (Mêski Rower górski, o rozmiarze ramy 15), #elementow w buforze: 2

wstawiono (Samochod: Renault Megane, moc = 155, vMax = 217), #elementow w buforze: 2

wstawiono (Samochod: Honda Civic, moc = 80, vMax = 124), #elementow w buforze: 2

wstawiono (Samochod: Honda Civic, moc = 140, vMax = 196), #elementow w buforze: 2

wstawiono (Samochod: Honda Civic, moc = 60, vMax = 84), #elementow w buforze: 2

wstawiono (Mêski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 3

wstawiono (Samochod: Honda Civic, moc = 100, vMax = 140), #elementow w buforze: 3

wstawiono (Samochod: Opel Astra, moc = 10, vMax = 14), #elementow w buforze: 4

wstawiono (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 114str), #elementow w buforze: 3

wstawiono (Samochod: Toyota Yaris, moc = 45, vMax = 63), #elementow w buforze: 3

wstawiono (Mêski Rower BMX, o rozmiarze ramy 17), #elementow w buforze: 4

wstawiono (damski Rower Trialowy, o rozmiarze ramy 18), #elementow w buforze: 3

wstawiono (Samochod: Honda Civic, moc = 140, vMax = 196), #elementow w buforze: 3

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str), #elementow w buforze: 1

wstawiono (damski Rower szosowy, o rozmiarze ramy 16), #elementow w buforze: 1

wstawiono (Samochod: Honda Civic, moc = 0, vMax = 0), #elementow w buforze: 1

wstawiono (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str), #elementow w buforze: 1

wstawiono (Samochod: Toyota Yaris, moc = 105, vMax = 147), #elementow w buforze: 1

wstawiono (Mêski Rower górski, o rozmiarze ramy 15), #elementow w buforze: 2

Producent:
Wstawiono: (Samochod: Honda Civic, moc = 180, vMax = 200)
Wstawiono: (Samochod: Honda Civic, moc = 80, vMax = 124)
Wstawiono: (Mêski Rower szosowy, o rozmiarze ramy 21)
Wstawiono: (Mêski Rower górski, o rozmiarze ramy 15)
Wstawiono: (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 28str)
Wstawiono: (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 155str)
Wstawiono: (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 135str)
Wstawiono: (Mêski Rower szosowy, o rozmiarze ramy 21)
Wstawiono: (Samochod: Toyota Yaris, moc = 205, vMax = 287)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str)
Wstawiono: (Samochod: Opel Astra, moc = 130, vMax = 182)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 134str)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 110str)
Wstawiono: (Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 103str)
Wstawiono: (Samochod: Toyota Yaris, moc = 245, vMax = 343)
Wstawiono: (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 192str)
Wstawiono: (Mêski Rower Zjazdowy, o rozmiarze ramy 19)
Wstawiono: (damski Rower górski, o rozmiarze ramy 20)
Wstawiono: (Samochod: Toyota Yaris, moc = 25, vMax = 35)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 46str)
Wstawiono: (Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 80str)
Wstawiono: (Samochod: Opel Astra, moc = 10, vMax = 14)
Wstawiono: (Mêski Rower górski, o rozmiarze ramy 15)
Wstawiono: (Samochod: Renault Megane, moc = 155, vMax = 217)
Wstawiono: (Samochod: Honda Civic, moc = 80, vMax = 124)
Wstawiono: (Samochod: Honda Civic, moc = 140, vMax = 196)
Wstawiono: (Samochod: Honda Civic, moc = 60, vMax = 84)
Wstawiono: (Mêski Rower BMX, o rozmiarze ramy 17)
Wstawiono: (Samochod: Honda Civic, moc = 100, vMax = 140)
Wstawiono: (Samochod: Opel Astra, moc = 10, vMax = 14)
Wstawiono: (Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 114str)
Wstawiono: (Samochod: Toyota Yaris, moc = 45, vMax = 63)
Wstawiono: (Mêski Rower BMX, o rozmiarze ramy 17)
Wstawiono: (damski Rower Trialowy, o rozmiarze ramy 18)
Wstawiono: (Samochod: Honda Civic, moc = 140, vMax = 196)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str)
Wstawiono: (damski Rower szosowy, o rozmiarze ramy 16)
Wstawiono: (Samochod: Honda Civic, moc = 0, vMax = 0)
Wstawiono: (Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str)
Wstawiono: (Samochod: Toyota Yaris, moc = 105, vMax = 147)
Wstawiono: (Mêski Rower górski, o rozmiarze ramy 15)

Konsument:
(Samochod: Honda Civic, moc = 180, vMax = 200)
---------------------------------------------
Pobrano: 
(Samochod: Honda Civic, moc = 80, vMax = 124)
---------------------------------------------
Pobrano: 
(Mêski Rower szosowy, o rozmiarze ramy 21)
---------------------------------------------
Pobrano: 
(Mêski Rower górski, o rozmiarze ramy 15)
---------------------------------------------
Pobrano: 
(Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 28str)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 155str)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 135str)
---------------------------------------------
Pobrano: 
(Mêski Rower szosowy, o rozmiarze ramy 21)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 205, vMax = 287)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str)
---------------------------------------------
Pobrano: 
(Samochod: Opel Astra, moc = 130, vMax = 182)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 134str)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 110str)
---------------------------------------------
Pobrano: 
(Ksiazka: Witold Gombrowicz, Ferdydurke, literatura piekna, 103str)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 245, vMax = 343)
---------------------------------------------
Pobrano: 
(Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 192str)
---------------------------------------------
Pobrano: 
(Mêski Rower Zjazdowy, o rozmiarze ramy 19)
---------------------------------------------
Pobrano: 
(damski Rower górski, o rozmiarze ramy 20)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 25, vMax = 35)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 46str)
---------------------------------------------
Pobrano: 
(Ksiazka: Adam Mickiewicz, Dziady, literatura piekna, 80str)
---------------------------------------------
Pobrano: 
(Samochod: Opel Astra, moc = 10, vMax = 14)
---------------------------------------------
Pobrano: 
(Mêski Rower górski, o rozmiarze ramy 15)
---------------------------------------------
Pobrano: 
(Samochod: Renault Megane, moc = 155, vMax = 217)
---------------------------------------------
Pobrano: 
(Samochod: Honda Civic, moc = 80, vMax = 124)
---------------------------------------------
Pobrano: 
(Samochod: Honda Civic, moc = 140, vMax = 196)
---------------------------------------------
Pobrano: 
(Samochod: Honda Civic, moc = 60, vMax = 84)
---------------------------------------------
Pobrano: 
(Mêski Rower BMX, o rozmiarze ramy 17)
---------------------------------------------
Pobrano: 
(Samochod: Honda Civic, moc = 100, vMax = 140)
---------------------------------------------
Pobrano: 
(Samochod: Opel Astra, moc = 10, vMax = 14)
---------------------------------------------
Pobrano: 
(Ksiazka: Zofia Nalkowska, Granica, literatura piekna, 114str)
---------------------------------------------
Pobrano: 
(Samochod: Toyota Yaris, moc = 45, vMax = 63)
---------------------------------------------
Pobrano: 
(Mêski Rower BMX, o rozmiarze ramy 17)
---------------------------------------------
Pobrano: 
(damski Rower Trialowy, o rozmiarze ramy 18)
---------------------------------------------
Pobrano: 
(Samochod: Honda Civic, moc = 140, vMax = 196)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 225str)
---------------------------------------------
Pobrano: 
(damski Rower szosowy, o rozmiarze ramy 16)
---------------------------------------------
Pobrano: 
(Samochod: Honda Civic, moc = 0, vMax = 0)
---------------------------------------------
Pobrano: 
(Ksiazka: Henryk Sienkiewicz, Potop, literatura piekna, 61str)
---------------------------------------------}
