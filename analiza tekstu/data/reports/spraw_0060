przedmiot TAS temat A nr_indeksu 384163 liczba_pkt 5 



Zadanie 1 -------------------------------------
T³umaczenie bardziej z³o¿onych struktur odbywa siê przez podanie wska¼nika do tablicy i jej d³ugo¶ci.

struct 
	{
		u_int Elem_len;
		float *Elem_val;
	} Elem;


Zadanie 2 -------------------------------------
Kody:

sum_server.c-------------------------------------

/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "sum.h"

int *
suma_1_svc(ParaLi *argp, struct svc_req *rqstp)
{
	static int  result;

	/*
	 * insert server code here
	 */
        printf( "%d %d\n",  argp->x1,  argp->x2 ); 
        result = argp->x1 + argp->x2;

	return &result;
}


sum_client.c------------------------------------- 


#include "sum.h"


void
progservice_1(char *host, int x1, int x2)
{
	CLIENT *clnt;
	int  *result_1;
	ParaLi  add2arg;

#ifndef	DEBUG
	clnt = clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

        add2arg.x1 = x1;
        add2arg.x2 = x2;


	result_1 = suma_1(&add2arg, clnt);
	if (result_1 == (int *) NULL) {
		clnt_perror (clnt, "call failed");
	}

        printf( "Suma dwoch l: %d\n" , *result_1  );

#ifndef	DEBUG
	clnt_destroy (clnt);
#endif	 /* DEBUG */
}


int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progservice_1 (host, atoi( argv[2]) ,atoi( argv[3] ));
exit (0);
}


Wydruki:

Klient:
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA$ ./sum_client 127.0.0.1 8 5
Suma dwoch l: 13
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA$ ./sum_client 127.0.0.1 12 12
Suma dwoch l: 24

Serwer:
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA$ ./sum_server
8 5
12 12

Zadanie 3 -------------------------------------

Kody:

macierz_client.c-------------------------------------

void
progservice_1(char *host)
{
	CLIENT  *clnt;
	int   *result_1;
	macierz writeFirst;

#ifndef	DEBUG
	clnt=clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
	if (clnt==NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif	/* DEBUG */

        int w,k;

		
	printf( "podaj ile wierszy i kolumn\n" );
        scanf( "%d%d", &w, &k );

	writeFirst.x.x_val = calloc( w * k, sizeof( int  ) );
	
	writeFirst.x.x_len = w * k;
	writeFirst.k = k;
        writeFirst.l = w;

	int i, j;	
	for ( i = 0 ; i < w * k; i++ ) {
		scanf( "%d", writeFirst.x.x_val + i  );
	}

	result_1=wypisz_1(&writeFirst, clnt);
	if (result_1==(int *) NULL) {
		clnt_perror(clnt, "call failed");
	}
	free( writeFirst.x.x_val );
#ifndef	DEBUG
	clnt_destroy (clnt);
#endif
}

macierz_server.c-------------------------------------

serwer:
int *
wypiszFunc(macierz *argp, struct svc_req *rqstp)
{
	static int  result;

	int i;
	for( i = 0; i < argp->k * argp->l; ++i  ) {
		printf( "%d ", argp->x.x_val[i] );
		if( i % argp->k == argp->k - 1 ) printf( "\n" );
	}

	return &result;
}

Wydruki:
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA$ ./Macierz_client
3 3
1 2 8
2 5 4
9 4 7

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA$ ./Macierz_server
1 2 8
2 5 4
9 4 7

Zadanie 4 -------------------------------------

Kody:

Klient-------------------------------------

DODAWANIE

#include "macierz.h"
void
progservice_1(char *host)
{
	CLIENT  *clnt;
	macierz   *result_1;
	matrix2   addarg;

	int w,k;
		
	scanf( "%d%d", &w, &k );

	addarg.a.x.x_val = calloc( w*k, sizeof(int));
	addarg.b.x.x_val = calloc( w*k, sizeof(int));
        addarg.a.x.x_len=w*k;
        addarg.b.x.x_len=w*k;
	addarg.a.l=w;
        addarg.a.k=k;
        addarg.b.l=w;
        addarg.b.k=k;
	int i;
	for(i=0;i<w*k;i++){
		scanf( "%d", addarg.a.x.x_val + i );
        }

	for(i=0;i<w*k;i++){
                scanf( "%d", addarg.b.x.x_val + i );
        }
#ifndef	DEBUG
	clnt=clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
	if (clnt==NULL) {
		clnt_pcreateerror(host);
		exit (1);
	}
#endif

	result_1 = add_1(&addarg, clnt);
	if (result_1 == (macierz *) NULL) {
		clnt_perror (clnt, "call failed");
	}
	
	for(i=0;i<result_1->l*result_1->k;++i ){
		printf( "%d ", result_1->x.x_val[i] );
		if( i % result_1->l == result_1->l - 1 ) printf("\n");
	}

#ifndef	DEBUG
	clnt_destroy (clnt);
	xdr_free ((xdrproc_t) xdr_macierz, (char *) result_1);

#endif
}

MNO¯ENIE

void
progservice_2(char *host)
{
	CLIENT*clnt;
	macierz *result_1;
	matrix2 addarg;

	int w,k;
		
	int w1,k1;
		
	scanf("%d%d",&w,&k);

	addarg.a.x.x_val=calloc(w*k,sizeof(int));

	int i;
	for(i=0;i<w*k;i++){
		scanf("%d",addarg.a.x.x_val+i);
        }
	scanf("%d%d",&w1,&k1);
	addarg.b.x.x_val=calloc(w1*k1,sizeof(int));

        addarg.a.x.x_len=w*k;
        addarg.b.x.x_len=w1*k1;

	addarg.a.l=w;
        addarg.a.k=k;

        addarg.b.l=w1;
        addarg.b.k=k1;


	for(i=0;i<w1*k1;i++){
                scanf("%d",addarg.b.x.x_val+i);
        }
 

#ifndef	DEBUG
	clnt = clnt_create (host, PROGSERVICE, VERSERVICE, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror (host);
		exit (1);
	}
#endif
	result_1 = times_1(&addarg, clnt);
	if (result_1 == (macierz *) NULL) {
		clnt_perror (clnt, "call failed");
	}


	for( i = 0; i < result_1->l * result_1->k; ++i  )
	{
		printf( "%d ", result_1->x.x_val[i] );
		if( i % result_1->l == result_1->l - 1 ) printf("\n");
	}

	xdr_free ((xdrproc_t) xdr_macierz, (char *) result_1);
	free( addarg.a.x.x_val );
	free( addarg.b.x.x_val );

#ifndef	DEBUG
	clnt_destroy (clnt);
#endif
}

int
main (int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf ("usage: %s server_host\n", argv[0]);
		exit (1);
	}
	host = argv[1];
	progservice_2 (host);
exit (0);
}


Serwer-------------------------------------

DODAWANIE

#include "macierz.h"
macierz *
add_1_svc(matrix2 *argp, struct svc_req *rqstp)
{
static macierz  result;

	macierz* A=&argp->a;
	macierz* B=&argp->b;
	
	if(( A->l!= B->l )||( A->k!= B->k )){
		printf( "Niew³a¶ciwy rozmiar macierzy" );
		return NULL;
	}
	result.l=A->l;
	result.k=A->k;
	result.x.x_val = calloc( A->k * A->l, sizeof(int));
	result.x.x_len = A->k * A->l;

	int i;
	for(i=0;i<A->k*A->l;i++){
		result.x.x_val[i]=A->x.x_val[i]+B->x.x_val[i];
	}
	return &result;
}

MNO¯ENIE

macierz *
times_1_svc(matrix2 *argp, struct svc_req *rqstp)
{
	static macierz  result;
	macierz* A = &argp->a;
	macierz* B = &argp->b;
	
	if(( A->k != B->l )){
		printf( "Niew³a¶ciwy rozmiar macierzy" );
		return NULL;
	}

	result.l=A->l;
	result.k=B->k;
	result.x.x_val=calloc(result.k * result.l,sizeof(int));
	result.x.x_len=result.k * result.l;


	int i;
	for( i = 0; i < result.l; i++ ){
		int j;
		for( j = 0; j < result.k; j++ ){
			int k;
			for( k = 0; k < A->k; k++ ){
				result.x.x_val[i*result.k+j]+=A->x.x_val[i*A->k+k]*B->x.x_val[k*B->k+j];				
			}	
		}
	}
	return &result;
}

Wydruki:

DODAWANIE

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA/matrix$ ./macierz_client localhost
3 4

2 2 2 2
3 3 3 3
4 4 4 4

1 1 1 1
1 1 1 1
1 1 1 1

3 3 3 3
4 4 4 4
5 5 5 5
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA/matrix$ ./macierz_server



MNO¯ENIE

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA/matrix$ ./macierz_client localhost
4 3
1 2 3 4
5 6 7 8
9 8 7 6

4 5
4 3 2 1 2
3 4 5 6 7
8 9 8 7 6
5 4 3 2 1

54 54 48 42 38
134 134 120 106 102
146 146 132 118 122

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA/matrix$ ./macierz_server

Zadanie 7 -------------------------------------

Kody (klient):

import org.acplt.oncrpc.*;
import java.net.InetAddress;
import java.io.IOException;

public class get_sum {

	static int opt;
    public static void main(String [] args) {

// check the arguments
	//if (args.length !=2) {
        //		System.out.println("usage: infoline host_name stu num ");
	//	System.exit(1);
	//}
	
//create an rpc client

       sumClient client = null;
	
	 try {
            client = new sumClient(InetAddress.getByName(args[0]),
                                    OncRpcProtocols.ONCRPC_TCP);
        } catch ( Exception e ) {
            System.out.println("infoline: error when creating RPC client:");
            e.printStackTrace(System.out);
        }
/*
        client.getClient().setTimeout(300*1000);

        System.out.print("Making request to server");

	// make request object
	ParaLi arg1 =new ParaLi ();
	arg1.value.x1=Integer.parseInt(args[1]);
	arg1.value.x2=Integer.parseInt(args[2]);
      try {
            int res =client.suma_1(arg1);
            System.out.println("Result is:"+ (char)res);
        } catch ( Exception e ) {
		System.out.println("Error contacting server");
            e.printStackTrace(System.out);
            return;
        }
        try {
            client.close();
        } catch ( Exception e ) {
            System.out.println("infoline: error when closing client:");
            e.printStackTrace(System.out);
        }
        client = null;
    }
}

Wydruki:

katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA/Java$ java -classpath oncrpc.jar get_sum localhost 10 66

Suma dwoch licz: 77

serwer:
katarzyna@katarzyna-LIFEBOOK-AH531:~/TAS/tematA/Java$ sudo ./sum_server 

10 66


}
