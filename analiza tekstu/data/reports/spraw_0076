przedmiot TAS temat B nr_indeksu 396322 liczba_pkt 2 



Zadanie 10 -------------------------------------

1) Doda?em p?tle wypisuj?c? aktualny w?tek, po wypisaniu go po stronie serwera mo?emy zauwa?y?, ?e obs?ugiwane s? dwa w?tki aktualnie czyli dwóch róznych klientów. Dodana p?tla znajduje si? poni?ej:

Dodana p?tla:

for (int i = 0; i < 10; i++) {
	System.out.println("(" + Thread.currentThread() + ") " + i);
	try {Thread.sleep(200);} catch(Exception e){};
    }
Wyruk z konsoli:

(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 0
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 1
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 0
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 2
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 1
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 3
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 2
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 4
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 3
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 5
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 4
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 6
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 5
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 7
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 6
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 8
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 7
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 9
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 8
sss: powolnaMetoda(); licznik=2
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 9
sss: powolnaMetoda(); koniec dzialania !
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 0
sss: powolnaMetoda(); licznik=2
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 1
sss: powolnaMetoda(); koniec dzialania !
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 0
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 2
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 1
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 3
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 2
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 4
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 3
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 5
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 4
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 6
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 5
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 7
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 6
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 8
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 7
(Thread[RMI TCP Connection(2)-127.0.0.1,5,RMI Runtime]) 9
(Thread[RMI TCP Connection(3)-127.0.0.1,5,RMI Runtime]) 8


2)Ró?nica mi?dzy obiektem odleg?ym a nieeksportowanym jest taka, ?e obiekt odleg?y (eksportowany) wykonywany jest po stonie klienta i serwera   podczas gdy obiekt nieeksportowany wykonywany jest tylko po stroie klienta
?eby obiekt nie by? eksportowany z kodu programu usuwamy linijk?: UnicastRemoteObject.exportObject(this);


3)
- deklarujemy metode w pliku OdleglyObiekt.java w nast?puj?cy sposób:

import java.rmi.*;
public interface OdleglyObiekt extends Remote
{
  OdleglyObiekt drugiObiekt() throws RemoteException;
  int powolnaMetoda() throws RemoteException;
  void generujeBlad() throws RemoteException;
}

- definicja metody wyrzucaj?cej b??d w sss.java + wydruk z konsoli:

 public void generujeBlad() throws RemoteException
    {
        throw new RemoteException("sztucznie wygenerowany blad ...");
    }
	
 
pawel@pawel-Domowy0 ~/Pulpit/TematB/KLIENT $ java kkk
kkk: blad !!! RemoteException occurred in server thread; nested exception is: 
	java.rmi.RemoteException: sztucznie wygenerowany blad
	
	

	
Zadanie 10 -------------------------------------

Przy serializacji XDR zarówno serwer jak i klient musz? zna? struktur? danych, co odróznia to od serializacji javowej.
Przy serializacji w Javie wykorzystywany jest XML. Zastosowanie XML-a umo?liwia edycje ju? serializowanych danych. 
XML jest powszechnie stosowany, w aplikacjach biurkowych i serwerowych. W javie wszystkie prymitywne typy danych s? serializowane. Jedyne ograniczenie to iloœ? danych jak? mo?na zaalokowa? w pami?ci maszyny wirtualnej.
W XDR( eXternal Data Representation Standard)elementy reprezentowane s? przez wielokrotnoœci 32 bitów.

Typy danych w XDR: 
int, Unsigned int,enumeration,boolean,hyper int,unsigned hyper int,floating-point,double-precision floating-point,quadruple-precision floating-point,fixed length opaque data,
string,fixed-length array,variable-length array,struct,discriminated union,void,constant,typedef,optional-data.

Materia?y:
https://tools.ietf.org/html/rfc4506https://en.wikipedia.org/wiki/External_Data_Representation
https://en.wikipedia.org/wiki/External_Data_Representation
}
