przedmiot TAS temat B nr_indeksu 396365 liczba_pkt 2 



Zadanie 10 -------------------------------------
[Uruchom przyklad programu RMI rmi4.zip, a nastepnie:
1. Zaprojektuj eksperyment ktory pokaze ze jesli 2 klientow uruchamia metode na rzecz tego samego obiektu RMI, to sa oni obslugiwani na osobnych watkach (przerob implementacje powolnaMetoda() !).
2. Sprawd¼ i opisz roznice w dzialaniu tego programu gdy drugiObiekt:
a) jest eksportowany (czyli jest obiektem odleglym)
b )nie jest eksportowany
3. Zbadaj jak sa obslugiwane wyjatki ktore pojawiaja sie w metodach obiektu RMI; w tym celu dodaj nastepujaca metode do interfejsu OdleglyObiekt:
        public void generujeBlad() throws RemoteException
        {
            throw new RemoteException("sztucznie wygenerowany blad ...");
        }
    i zobacz jak sie ona zachowuje z pkt widzenia klienta ...

W sprawozdaniu umiesc odp na pytania, kod, wydruki produkowane przez programy.]

ad 1.
Serwer (wydruk z terminala):

s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/SERWER$ javac sss.java
Note: sss.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/SERWER$ rmiregistry&
[1] 6298
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/SERWER$ java sss
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(); ok
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!

Po zmodyfikowaniu kodu klienta by wypisywal nr PID dla poszczegolnego klienta (by pokazac ze obsluga klienta dziala na osobnych watkach. dodane linijki to:

KOD (kkk.java):
15.	byte[] bo = new byte[100];
16.	String[] command = { "bash", "-c", "echo $PPID" };

24.	Process p = Runtime.getRuntime().exec(command);
25.	p.getInputStream().read(bo);
26.	System.out.println("PID: "+new String(bo));
27.	Thread.sleep(4000);

Po jednoczesnym uruchomieniu dwoch klientow dane sa nastepujace wyniki:

Klient 1 (wydruk z terminala):
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=2
PID: 6489

kkk: oo2.powolnaMetoda()=2
kkk: oo2.powolnaMetoda()=4
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/KLIENT$

Klient 2 (wydruk z terminala):
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/KLIENT$ java kkk
kkk: oo.powolnaMetoda()=2
PID: 6507

kkk: oo2.powolnaMetoda()=3
kkk: oo2.powolnaMetoda()=4
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/KLIENT$ 

Serwer (wydruk z terminala):
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=2
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=1
sss: powolnaMetoda(); licznik=2
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=3
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); licznik=4
sss: powolnaMetoda(); koniec dzialania !
sss: powolnaMetoda(); koniec dzialania !

Odp: Jak widac nr PID sa rozne (klient 1. ma nr 6489 a drugi ma nr 6507) co pokazuje ze klienci obslugiwnani sa na osobnych watkach.

ad 3. Zmodyfikowanie kodu serwera o nastepujace linijki:

KOD (sss.java):
54.	throw new RemoteException("sztucznie wygenerowany blad ...");

Uruchomienie serwera wyglada tak samo jak w przypadku podpunktu 1.

Klient natomiast daje nastepujacy efekt:

klient 1 (wydruk z terminala):
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/KLIENT$ java kkk
kkk: blad !!! RemoteException occurred in server thread; nested exception is: 
	java.rmi.RemoteException: sztucznie wygenerowany blad ...
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/KLIENT$ 

				
Zadanie 11 -------------------------------------
[["Odlegla" wersja problemu producenta & konsumenta]
Zaprogramuj obiekt RMI "OdleglyBufor" (nazwa interfejsu), rozwiazujacy problem producenta i konsumenta.]

W pliku "sss.java" ktory jest serwerem w tym zadaniu utworzylem klase Tworzyciel ktory tworzy obiekt RMI. Bufor ktory odpowiada za przechowywanie danych (w tym przypadku liczb) ktore pozniej odbiera klient.

Kod serwera jest w pliku "sss.java".

W pliku "kkk.java" dodalem dwie klasy. Klasa konsumenta ktora pobiera dane z bufora. Oraz klase Producenta ktora odpowiada za wrzucanie liczby do bufora.

Kod klienta jest w pliku "kkk.java"


Klient (wydruk z terminala):
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 11/KLIENT$ java kkk
Konsument: rozpoczecie
Producent: wystawia  1
Konsument: bierze liczbe 1
Producent: wystawia  2
Konsument: bierze liczbe 2
Producent: wystawia  3
Konsument: bierze liczbe 3
Producent: wystawia  4
Konsument: bierze liczbe 4
Producent: wystawia  5
Konsument: bierze liczbe 5

Serwer (wydruk z terminala):
s396365@pc25e:~/Desktop/TAS/TamatB/Zad 11/SERWER$ java sss localhost
sss: zaczynam tworzyc obiekty ...
sss: OdleglaKlasa(String); ok
sss: obiekty utworzone !!!
sss: OdleglaKlasa(String); ok
Bufor: doadanie elementu
Bufor: doadanie elementu
Bufor: usunecie elementu
Bufor: usunecie elementu
Bufor: doadanie elementu
Bufor: usunecie elementu
Bufor: doadanie elementu
Bufor: usunecie elementu
Bufor: doadanie elementu
Bufor: usunecie elementu
Bufor: doadanie elementu
}
