przedmiot TAS temat C nr_indeksu 396365 liczba_pkt 6 



Zadanie 20 -------------------------------------
[(wypróbowaæ gotowe przyk³ady + proste eksperymenty)
Spróbuj skompilowaæ i uruchomiæ przyk³ady zawarte w plikach przyk³ad Java i przyk³ad Tcl. W tym zadaniu uruchamiaj jedynie prost± metodê sayHello(). Wypróbuj dzia³anie klienta/serwera CORBA w nastepuj±cych konfiguracjach:
            klient serwer
        1.  java   java
        2.  tcl      tcl
        3.  java    tcl
        4.  tcl      java
Przekazywanie ref do obiektu CORBA zrealizuj poprzez IOR zapisany w pliku.
Wykonaj te¿ inne podobne eksperymenty (bez programowania) i opisz je w sprawozdaniu ...]

Kompilacja aplikacji w jêzyku java:
Po wypakowaniu nale¿y najpierw zadzia³aæ przy pomocy idlj:
Poleceniem idlj -fall Hello2.idl tworzymy potrzebne komponenty do skompilawania serwera i klienta w jezyku java.

Pozniej kompilujemy sam serwer oraz klienta.

ad.1
serwer: java
klient: java

Najpierw w jednym terminalu uruchamiamy serwer (wydruk z konsoli):

s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ java HelloServer2 
HelloServant2()
IOR=IOR:000000000000001849444c3a48656c6c6f417070322f48656c6c6f3a312e3000000000010000000000000082000102000000000a3132372e302e302e31009bab00000031afabcb00000000203498a76200000001000000000000000100000008526f6f74504f410000000008000000010000000014000000000000020000000100000020000000000001000100000002050100010001002000010109000000010001010000000026000000020002
orb.run();

Pozniej w nastepnym terminalu uruchamiamy klienta (wydruk z konsoli):

s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ java HelloClient2 
podajLiczbe=0
sayHello=Hello world !!!

Od razu jest uruchamiana metoda sayHello(). Widzimy ze terminal z serwerem odpala te metode co widac na termianlu:

podajLiczbe(), 0
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0, 
^C

ad.2
serwer: tcl
klient: tcl

Na poczatku dajemy pogram "clkit_2" której dajemy prawa wykonywania za pomoc± programu chmod.
Dodajemy rowniez plik tcl "konsola2.tcl" ktora ulatwia przeprowadzania eksperymentow zwiazanych z jezykiem tcl. 

Uruchominie serwera:
Polceniem:

s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ ./tclkit_2 konsola2c.tcl ser.tcl

Dostajemy konsole z wczytanym kodem serwera kory wykonujemy.

Na terminalu dostajemy: 

obj=helloWorld0
poa=::Combat::PortableServer::rootPOA0
ref=_combat_obj_1
HelloWorld IOR = IOR:01666f6f1800000049444c3a48656c6c6f417070322f48656c6c6f3a312e3000020000000000000040000000010102661a00000070633234652e6c6162732e776d692e616d752e6564752e706c00598b120000002f313434383839303132362f393033362a31666f00000000010000002400000001666f6f01000000010000001400000001666f6f01000105000000000901010000000000

Uruchomienie klienta:
Polecenie:

s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ ./tclkit_2 konsola2c.tcl cli0.tcl 

Dostejemy kosole z kodem klienta ktorego w pzeciwenstwie do serwera wykonujemy linia po linii.

Wydruk z konsoli tcl:

lappend auto_path ./combat-tcl-0.7.4; package re combat
  #% 0.7
source Hello3.tcl
  #% 1
combat::ir add $_ir_Hello3
  #% 
set f [open {Hello.IOR} "r"]; set ior [read $f]; close $f
  #% 
set m [corba::string_to_object $ior]
  #% _combat_obj_1
$m podajLiczbe
  #% 4
  #% 3
  #% 2
  #% 1
  #% 0
$m sayHello
  #% Jak sie masz ???
  #% Jak sie masz ???
  #% Jak sie masz ???
$m sayHello2 Jacek
  #% sayHello2: str= Tomek Fanek Jacek
  #% sayHello2: str= Tomek Fanek
  #% sayHello2: str= Tomek

ad.3
serwer: java
klient: tcl

Umiescilem pliki serwera oraz klienta w jednym katalogu. Najpierw uruchomilem serwer tym samym poleceniem co do podpunktu 1
Po uruchomieniu serwera uruchomilem klienta tcl i wykonywalem polecenia linia po linii.

Wydruk z terminala z serwerem:

s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ java HelloServer2 
HelloServant2()
IOR=IOR:000000000000001849444c3a48656c6c6f417070322f48656c6c6f3a312e3000000000010000000000000082000102000000000a3132372e302e302e31008e9300000031afabcb0000000020589ed46a00000001000000000000000100000008526f6f74504f410000000008000000010000000014000000000000020000000100000020000000000001000100000002050100010001002000010109000000010001010000000026000000020002
orb.run();
podajLiczbe(), 0
podajLiczbe(), 1
podajLiczbe(), 2
podajLiczbe(), 3
podajLiczbe(), 4
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0, 
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0, 
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0, 
sayHello()
8: 0, 0, 0, 1, 0, 0, 0, 0, 


Wdruk z konsoli tcl klienta:

lappend auto_path ./combat-tcl-0.7.4; package re combat
  #% 0.7
source Hello3.tcl
  #% 1
combat::ir add $_ir_Hello3
  #% 
set m [corba::string_to_object $ior]
  #% _combat_obj_1
$m podajLiczbe
  #% 4
  #% 3
  #% 2
  #% 1
  #% 0
$m sayHello
  #% Hello world !!!
  #% Hello world !!!
  #% Hello world !!!
  #% Hello world !!!
$m sayHello2 Kamil
  #% Kamil[Kamil[Jacek[Tomek[]]]]
  #% Kamil[Jacek[Tomek[]]]
  #% Jacek[Tomek[]]
  #% Tomek[]

ad.4
serwer: tcl
klient: java

Zaczynamy od uruchomiena serwera tcl. Te samo polecenie co w przykladzie 2. Po uuchomieniu serwera uruchamiamy klienta java. Klienta uruchomilem trzykroni by sprawdzic czy zmienne sa rzeczywiscie przechowywane po stronie serwera. 

Wydruk z terminala serwera:

s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ ./tclkit_2 konsola2c.tcl ser.tcl 
obj=helloWorld0
poa=::Combat::PortableServer::rootPOA0
ref=_combat_obj_1
HelloWorld IOR = IOR:01666f6f1800000049444c3a48656c6c6f417070322f48656c6c6f3a312e3000020000000000000040000000010102661a00000070633234652e6c6162732e776d692e616d752e6564752e706c00a8a5130000002f313434383839313336382f31313132382a316600000000010000002400000001666f6f01000000010000001400000001666f6f01000105000000000901010000000000

Wydruk z terminala klienta:
s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ java HelloClient2 
podajLiczbe=0
sayHello=Jak sie masz ???
s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ java HelloClient2 
podajLiczbe=1
sayHello=Jak sie masz ???
s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ java HelloClient2 
podajLiczbe=2
sayHello=Jak sie masz ???

Zadanie 22 -------------------------------------
[Zaprogramuj ob. CORBA który posiada metodê "pomnoz" mno¿±c± przez podan± sta³± wektory dowolnej d³ugo¶ci i zwracaj±c± wynik wektorowy (typ "sequence"); broker dowolny.
Dodaj metodê "pomnoz10" mno¿±ca wy³±cznie wektory d³ugo¶ci 10 (typ "zwyk³a tablica"); zbadaj czy Combat przestrzega tego ograniczenia.
Zaprogramuj ob.  CORBA który potrafi obliczaæ wyznacznik macierzy (albo sume elementów macierzy) o dowolnych wymiarach. Klient ma byæ zaprogramowany w jêzyku Java lub Tcl, serwer w jêzyku Java.]

Do wykonania tego zadania zmodyfikowa³em pliki z zadania 20. W pliku "Hello3.idl" dodajemy nastêpuj±ce typy danych reprezentuj±ce wiersze macierzy oraz metodê która bêdzie dzia³aæ na ka¿dy element macierzy by obliczyc sume jej elementow.

Poszczegolne linijki kodu sa w pliku "Hello3.idl".

Nastepnie generujemy plik Hello3.tcl ktory bedzie pelnil role klienta.

Plik java (wydruk z konsoli):
s396365@pc24e:~/Desktop/TAS/TematC/Zad22$ idlj -fall Hello3.idl
s396365@pc24e:~/Desktop/TAS/TematC/Zad20$ java HelloServer2 
HelloServant2()
IOR=IOR:000000000000001849444c3a48656c6c6f417070322f48656c6c6f3a312e3000000000010000000000000082000102000000000a3132372e302e302e31009bab00000031afabcb00000000203498a76200000001000000000000000100000008526f6f74504f410000000008000000010000000014000000000000020000000100000020000000000001000100000002050100010001002000010109000000010001010000000026000000020002
orb.run();
sumaElementow()
sumaElementow()

Wydruk z konsoli tcl klienta:

lappend auto_path ./combat-tcl-0.7.4; package re combat
  #% 0.7
source Hello3.tcl
  #% 1
combat::ir add $_ir_Hello3
  #% 
set m [corba::string_to_object $ior]
  #% _combat_obj_1
$m  sumaElementow  {{1  1  1}  {2  2  2}}
    #%  9
$m  sumaElementow  {{1  1  1}  {2  2  2}  {1  2  1}}
    #%  13

Zadanie 25 -------------------------------------
[Zak³adam ¿e posiadamy IOR pewnego serwera Corba ...
Napisz dwa klienty Corby (kli1 i kli2) pod dowolnym brokerem:]

Wydruk z konsola2c.tcl:

lappend  auto_path  combat-tcl-0.7.4
    #%  /home/students/s396365/Desktop/TAS/TematC/tclkit/lib/tcl8.4  /home/students/s396365/Desktop/TAS/TematC/tclkit/lib  /home/students/s396365/Desktop/TAS/TematC/tclkit/lib/tk8.4  combat-tcl-0.7.4
package  require  combat
    #%  0.7
corba::init
    #%  
source  zad25/COS_ns.tcl
    #%  1
combat::ir  add  $_ir_COS_ns
    #%  
set  ns  [corba::string_to_object  http://mhanckow.students.wmi.amu.edu.pl/pliki/nsd.ior]
    #%  _combat_obj_1
$ns  list  10  x  y;  join  $x  \n
    #%  binding_name  {{id  EventChannelFactory  kind  {}}}  binding_type  nobject
binding_name  {{id  PropertySetDefFactory  kind  {}}}  binding_type  nobject
binding_name  {{id  PropertySetFactory  kind  {}}}  binding_type  nobject
binding_name  {{id  ob_mhanckow  kind  {}}}  binding_type  nobject
binding_name  {{id  qwe  kind  {}}}  binding_type  nobject
binding_name  {{id  sample  kind  {}}}  binding_type  ncontext
source  zad25/Hello3.tcl
    #%  1
combat::ir  add  $_ir_Hello3
    #%  
class  WywolanieZwrotne  {
    inherit  PortableServer::ServantBase
    public  method  _Interface  {}  {
        return  "IDL:HelloApp2/WywZwrotne:1.0"
    }
    public  method  metoda  {}  {
        puts  "WywolanieZwrotne,  metoda  ($licz)";  incr  licz
        
        #  to  dziala  ok  ...
        #set  poac  [corba::resolve_initial_references  "POACurrent"]
        #puts  "get_object_id=[$poac  get_object_id]"
    }
    private  variable  licz  0
}
set  obj  [WywolanieZwrotne  #auto]
    #%  wywolanieZwrotne2
set  poa  [corba::resolve_initial_references  "RootPOA"]
    #%  ::Combat::PortableServer::rootPOA0
set  mgr  [$poa  the_POAManager]
    #%  ::Combat::PortableServer::POA::pOAManager0
set  ref  [$poa  servant_to_reference  $obj]
    #%  _combat_obj_5
$ns  to_name  "qwe"
    #%  {id  qwe  kind  {}}
$ns  rebind  [$ns  to_name  "qwe"]  $ref
$ns  bind_new_context  [$ns  to_name  sample]  
    #%  _combat_obj_7
$ns  resolve  [$ns  to_name  "sample/qwe"]
    #%  _combat_obj_8
set  ns2  [$ns  resolve  [$ns  to_name  sample]]
    #%  _combat_obj_9
$ns2  list  10  x  y;  join  $x  \n
    #%  binding_name  {{id  qwe  kind  {}}}  binding_type  nobject

Zadanie 30 -------------------------------------
[Zaprogramowaæ ob. RMI z nastêpuj±cym interfejsem (przyklad na stronie)]

Nale¿y skompilowaæ plik "sss.java" z tematu B by poxniej za pomoca programou rmic wygenerowac pliki idl RMI dla poszczegolnych obiektow.

Wydruk:

s396365@pc25e:~/Desktop/TAS/TamatB/Zad 10/SERWER$ javac sss.java
Note: sss.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
s396365@pc16f:~/Desktop/TAS/TAS/TematC/Zad30$ rmic -iiop -idl -novalueMethods OdleglaKlasa

powstale pliki sa w katalogu Zad30

Zadanie 32 -------------------------------------
[Zaprogramowaæ serwer dla powy¿szego pliku IDL pod JavaIDL;]

Wszystkie pliki znajduja sie w katalogu Zad32
na poczatku nalezy utworzyc plik idl i pozniej go utruchomic...


Zadanie 33 -------------------------------------
[Zaprogramowac program lub procedurê, która pokazuje krótki opis metod i ich parametrów dla podanej ref do ob. Corby.]

wydruk z konsoli tcl "konsola2c.tcl":

lappend  auto_path  combat-tcl-0.7.4
    #%  /home/students/s396365/Desktop/TAS/TematC/tclkit/lib/tcl8.4  /home/students/s396365/Desktop/TAS/TematC/tclkit/lib  /home/students/s396365/Desktop/TAS/TematC/tclkit/lib/tk8.4  combat-tcl-0.7.4
package  re  combat
    #%  0.7
set  m  [corba::string_to_object  http://mhanckow.students.wmi.amu.edu.pl/pliki/Hello.ior]
    #%  _combat_obj_1
$m  sayHello
    #%  Jak  sie  masz  ???  (5)
set  ir  [$m  _get_interface]
    #%  _combat_obj_3
$ir  _is_a  IDL:omg.org/CORBA/InterfaceDef:1.0
    #%  1
source  zad33/corba_ir.tcl
    #%  1
combat::ir  add  $_ir_corba_ir
    #%  
$ir  describe
    #%  kind  dk_Interface  value  {{struct  IDL:omg.org/CORBA/InterfaceDescription:1.0  {name  string  id  string  defined_in  string  version  string  base_interfaces  {sequence  string}}}  {name  Hello  id  IDL:HelloApp/Hello:1.0  defined_in  IDL:HelloApp:1.0  version  1.0  base_interfaces  {}}}
set  x  [$ir  contents  dk_Operation  1]
    #%  _combat_obj_5
$x  describe
    #%  kind  dk_Operation  value  {{struct  IDL:omg.org/CORBA/OperationDescription:1.0  {name  string  id  string  defined_in  string  version  string  result  TypeCode  mode  {enum  {OP_NORMAL  OP_ONEWAY}}  contexts  {sequence  string}  parameters  {sequence  {struct  IDL:omg.org/CORBA/ParameterDescription:1.0  {name  string  type  TypeCode  type_def  {Object  IDL:omg.org/CORBA/IDLType:1.0}  mode  {enum  {PARAM_IN  PARAM_OUT  PARAM_INOUT}}}}}  exceptions  {sequence  {struct  IDL:omg.org/CORBA/ExceptionDescription:1.0  {name  string  id  string  defined_in  string  version  string  type  TypeCode}}}}}  {name  sayHello  id  IDL:HelloApp/Hello/sayHello:1.0  defined_in  IDL:HelloApp/Hello:1.0  version  1.0  result  string  mode  OP_NORMAL  contexts  {}  parameters  {}  exceptions  {}}}
lindex  [$ir  describe]  3  1
    #%  name  Hello  id  IDL:HelloApp/Hello:1.0  defined_in  IDL:HelloApp:1.0  version  1.0  base_interfaces  {}
}
